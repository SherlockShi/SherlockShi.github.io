<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[RxJava操作符实践：11_转换操作之8_nest]]></title>
      <url>http://sherlockshi.github.io/2016/10/24/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A11_%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E4%B9%8B8_nest/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>将一个Observable转换为一个发射这个Observable的Observable。</p>
<a id="more"></a>
<p>当和 嵌套的 Observable 打交道的时候，就要使用 nest 函数了。nest 函数把一个普通的非 嵌套 Observable 变为一个嵌套的 Observable。 nest 把一个源 Observable 变为一个嵌套的 Observable 发射出去就结束了。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-21-k8_nest.png" alt="nest"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    .nest()</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Observable&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Observable&lt;Integer&gt; observable)</span> </span>&#123;</span><br><span class="line">            observable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onCompleted(inner)."</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onError(inner): "</span> + e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：11_转换操作之7_toSortedList]]></title>
      <url>http://sherlockshi.github.io/2016/10/24/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A11_%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E4%B9%8B7_toSortedList/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>toSortedList类似于toList，不同的是，它会对产生的列表排序，默认是自然升序，如果发射的数据项没有实现Comparable接口，会抛出一个异常。</p>
<a id="more"></a>
<p>然而，你也可以传递一个函数作为用于比较两个数据项，这是toSortedList不会使用Comparable接口。</p>
<p>toSortedList默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-21-k7_to_sorted_list.png" alt="toSortedList"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>)</span><br><span class="line">    .toSortedList()</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;Integer&gt; integers)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>toSortedList操作符还有以下变体：</p>
<ul>
<li>toSortedList()</li>
<li>toSortedList(Func2)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：11_转换操作之6_toMultimap]]></title>
      <url>http://sherlockshi.github.io/2016/10/24/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A11_%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E4%B9%8B6_toMultiMap/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>toMultiMap类似于toMap，不同的是，它生成的这个Map同时还是一个ArrayList（默认是这样，你可以传递一个可选的工厂方法修改这个行为）。</p>
<a id="more"></a>
<p>toMultiMap默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-21-k6_to_multi_map.png" alt="toMultimap"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student stu1 = <span class="keyword">new</span> Student(<span class="number">1001</span>, <span class="string">"ZhangSan"</span>);</span><br><span class="line">Student stu2 = <span class="keyword">new</span> Student(<span class="number">1002</span>, <span class="string">"LiSi"</span>);</span><br><span class="line"></span><br><span class="line">Observable.just(stu1, stu2)</span><br><span class="line">        .toMultimap(<span class="keyword">new</span> Func1&lt;Student, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> student.getId();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Map&lt;Integer, Collection&lt;Student&gt;&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Map&lt;Integer, Collection&lt;Student&gt;&gt; map)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext: "</span> + map.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: onNext: &#123;<span class="number">1002</span>=[Student&#123;id=<span class="number">1002</span>, name=<span class="string">'LiSi'</span>&#125;], <span class="number">1001</span>=[Student&#123;id=<span class="number">1001</span>, name=<span class="string">'ZhangSan'</span>&#125;]&#125;</span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<p>toMap(Func1)将原Observable发送的数据保存到一个MAP中，并在参数函数中，设定sutdent的id属性作为key。但toMultimap操作符在将数据保存到MAP前，先将数据保存到Collection，而toMap操作符将数据直接保存到MAP中，并没有再包裹一层<br>Collection。</p>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>toMultimap操作符还有以下变体：</p>
<ul>
<li>toMultiMap(Func1)</li>
<li>toMultiMap(Func1,Func1)</li>
<li>toMultiMap(Func1,Func1,Func0)</li>
<li>toMultiMap(Func1,Func1,Func0,Func1)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：11_转换操作之5_toMap]]></title>
      <url>http://sherlockshi.github.io/2016/10/23/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A11_%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E4%B9%8B5_toMap/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>toMap收集原始Observable发射的所有数据项到一个Map（默认是HashMap）然后发射这个Map。</p>
<a id="more"></a>
<p>你可以提供一个用于生成Map的Key的函数，还可以提供一个函数转换数据项到Map存储的值（默认数据项本身就是值）。</p>
<p>toMap默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-21-k5_to_map.png" alt="toMap"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student stu1 = <span class="keyword">new</span> Student(<span class="number">1001</span>, <span class="string">"ZhangSan"</span>);</span><br><span class="line">Student stu2 = <span class="keyword">new</span> Student(<span class="number">1002</span>, <span class="string">"LiSi"</span>);</span><br><span class="line"></span><br><span class="line">Observable.just(stu1, stu2).toMap(<span class="keyword">new</span> Func1&lt;Student, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> student.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;Map&lt;Integer, Student&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Map&lt;Integer, Student&gt; map)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext: "</span> + map.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: &#123;<span class="number">1002</span>=Student&#123;id=<span class="number">1002</span>, name=<span class="string">'LiSi'</span>&#125;, <span class="number">1001</span>=Student&#123;id=<span class="number">1001</span>, name=<span class="string">'ZhangSan'</span>&#125;&#125;</span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<p>toMap(Func1)将原Observable发送的数据保存到一个MAP中，并在参数函数中，设定sutdent的id属性作为key。</p>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>toMap操作符还有以下变体：</p>
<ul>
<li>toMap(Func1)</li>
<li>toMap(Func1,Func1)</li>
<li>toMap(Func1,Func1,Func0)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：11_转换操作之4_toList]]></title>
      <url>http://sherlockshi.github.io/2016/10/23/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A11_%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E4%B9%8B4_toList/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>这个操作符让Observable将多项数据组合成一个List，然后调用一次onNext方法传递整个列表。</p>
<a id="more"></a>
<p>通常，发射多项数据的Observable会为每一项数据调用onNext方法。你可以用toList操作符改变这个行为，让Observable将多项数据组合成一个List，然后调用一次onNext方法传递整个列表。</p>
<p>如果原始Observable没有发射任何数据就调用了onCompleted，toList返回的Observable会在调用onCompleted之前发射一个空列表。如果原始Observable调用了onError，toList返回的Observable会立即调用它的观察者的onError方法。</p>
<p>toList默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-21-k4_to_list.png" alt="toList"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).toList()</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;Integer&gt; integers)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：11_转换操作之3_toIterable]]></title>
      <url>http://sherlockshi.github.io/2016/10/23/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A11_%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E4%B9%8B3_toIterable/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>这个操作符将Observable转换为一个Iterable，你可以通过它迭代原始Observable发射的数据集。</p>
<a id="more"></a>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-21-k3_to_iterable.png" alt="toIterable"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterable&lt;Integer&gt; iterable = Observable.just(<span class="number">1</span>,<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).toBlocking().toIterable();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Integer i : iterable) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Data: "</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Data: <span class="number">1</span></span><br><span class="line">Data: <span class="number">2</span></span><br><span class="line">Data: <span class="number">3</span></span><br><span class="line">Data: <span class="number">4</span></span><br></pre></td></tr></table></figure>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：11_转换操作之2_toFuture]]></title>
      <url>http://sherlockshi.github.io/2016/10/23/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A11_%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E4%B9%8B2_toFuture/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>这个操作符将Observable转换为一个返回单个数据项的Future。</p>
<a id="more"></a>
<p>toFuture操作符也是只能用于BlockingObservable。这个操作符将Observable转换为一个返回单个数据项的Future，如果原始Observable发射多个数据项，Future会收到一个IllegalArgumentException；如果原始Observable没有发射任何数据，Future会收到一个NoSuchElementException。</p>
<p>如果你想将发射多个数据项的Observable转换为Future，可以这样用：myObservable.toList().toBlocking().toFuture()。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-21-k2_to_future.png" alt="toFuture"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Future future = Observable.just(<span class="number">1</span>).toBlocking().toFuture();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"Data: "</span> + future.get());</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Data: <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><h2 id="1-发射多个数据项-异常处理"><a href="#1-发射多个数据项-异常处理" class="headerlink" title="1. 发射多个数据项(异常处理)"></a>1. 发射多个数据项(异常处理)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Future future = Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).toBlocking().toFuture();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"Data: "</span> + future.get());</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: java.lang.IllegalArgumentException: Sequence contains too many elements</span><br></pre></td></tr></table></figure></p>
<p>可见当原始Observable发射多个数据项，Future会收到一个IllegalArgumentException。</p>
<h2 id="2-发射多个数据项-正确处理"><a href="#2-发射多个数据项-正确处理" class="headerlink" title="2. 发射多个数据项(正确处理)"></a>2. 发射多个数据项(正确处理)</h2><p>如果你想将发射多个数据项的Observable转换为Future，可以这样用：myObservable.toList().toBlocking().toFuture()。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Future future = Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).toList().toBlocking().toFuture();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"Data: "</span> + future.get());</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Data: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="3-不发射任何数据"><a href="#3-不发射任何数据" class="headerlink" title="3. 不发射任何数据"></a>3. 不发射任何数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Future future = Observable.empty().toBlocking().toFuture();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"Data: "</span> + future.get());</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Error: "</span> + e.getCause());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: java.util.NoSuchElementException: Sequence contains no elements</span><br></pre></td></tr></table></figure></p>
<p>可见原始Observable没有发射任何数据，Future会收到一个NoSuchElementException。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：11_转换操作之1_getIterator]]></title>
      <url>http://sherlockshi.github.io/2016/10/21/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A11_%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E4%B9%8B1_getIterator/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>这个操作符将Observable转换为一个Iterator，你可以通过它迭代原始Observable发射的数据集。</p>
<a id="more"></a>
<p>getIterator操作符只能用于BlockingObservable的子类，要使用它，你首先必须把原始的Observable转换为一个BlockingObservable。可以使用这两个操作符：BlockingObservable.from或the Observable.toBlocking。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-21-k1_get_iterator.png" alt="getIterator"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; iterator = Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>).toBlocking().getIterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Data: "</span> + iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Data: <span class="number">1</span></span><br><span class="line">Data: <span class="number">2</span></span><br><span class="line">Data: <span class="number">3</span></span><br><span class="line">Data: <span class="number">4</span></span><br><span class="line">Data: <span class="number">5</span></span><br></pre></td></tr></table></figure>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：10_连接操作之4_refCount]]></title>
      <url>http://sherlockshi.github.io/2016/10/21/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A10_%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E4%B9%8B4_refCount/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>让一个可连接的Observable行为像普通的Observable。</p>
<a id="more"></a>
<p>可连接的Observable (connectable Observable)与普通的Observable差不多，不过它并不会在被订阅时开始发射数据，而是直到使用了Connect操作符时才会开始。用这种方法，你可以在任何时候让一个Observable开始发射数据。</p>
<p>RefCount操作符把从一个可连接的Observable连接和断开的过程自动化了。它操作一个可连接的Observable，返回一个普通的Observable。当第一个订阅者订阅这个Observable时，RefCount连接到下层的可连接Observable。RefCount跟踪有多少个观察者订阅它，直到最后一个观察者完成才断开与下层可连接Observable的连接。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-20-j4_fef_count.png" alt="refCount"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"&lt;========before refCount()=======&gt;"</span>);</span><br><span class="line"></span><br><span class="line">ConnectableObservable connectableObservable = Observable.range(<span class="number">1</span>, <span class="number">50000</span>).sample(<span class="number">10</span>, TimeUnit.MILLISECONDS).publish();</span><br><span class="line"></span><br><span class="line">connectableObservable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted1."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError1: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext1: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connectableObservable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted2."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError2: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext2: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connectableObservable.connect();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"&lt;========after refCount()=======&gt;"</span>);</span><br><span class="line"></span><br><span class="line">Observable observable = connectableObservable.refCount();</span><br><span class="line"></span><br><span class="line">observable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted3."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError3: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext3: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted4."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError4: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext4: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;========<span class="function">before <span class="title">refCount</span><span class="params">()</span></span>=======&gt;</span><br><span class="line">onNext1: <span class="number">11653</span></span><br><span class="line">onNext2: <span class="number">11653</span></span><br><span class="line">onNext1: <span class="number">21317</span></span><br><span class="line">onNext2: <span class="number">21317</span></span><br><span class="line">onNext1: <span class="number">32731</span></span><br><span class="line">onNext2: <span class="number">32731</span></span><br><span class="line">onNext1: <span class="number">40808</span></span><br><span class="line">onNext2: <span class="number">40808</span></span><br><span class="line">onCompleted1.</span><br><span class="line">onCompleted2.</span><br><span class="line">&lt;========<span class="function">after <span class="title">refCount</span><span class="params">()</span></span>=======&gt;</span><br><span class="line">onNext3: <span class="number">15517</span></span><br><span class="line">onNext3: <span class="number">30592</span></span><br><span class="line">onNext3: <span class="number">45208</span></span><br><span class="line">onCompleted3.</span><br><span class="line">onNext4: <span class="number">16052</span></span><br><span class="line">onNext4: <span class="number">16090</span></span><br><span class="line">onNext4: <span class="number">20936</span></span><br><span class="line">onNext4: <span class="number">31274</span></span><br><span class="line">onNext4: <span class="number">47841</span></span><br><span class="line">onCompleted4.</span><br></pre></td></tr></table></figure>
<p>由运行结果可以看出，RefCount操作符将一个Connectable Observable 对象重新转化为一个普通的Observable对象，这时候订阅者进行订阅将会触发数据的发射。</p>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>refCount操作符还有以下变体：</p>
<ul>
<li>share()</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：10_连接操作之3_replay]]></title>
      <url>http://sherlockshi.github.io/2016/10/21/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A10_%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E4%B9%8B3_replay/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>保证所有的观察者收到相同的数据序列，即使它们在Observable开始发射数据之后才订阅。</p>
<a id="more"></a>
<p>可连接的Observable (connectable Observable)与普通的Observable差不多，不过它并不会在被订阅时开始发射数据，而是直到使用了Connect操作符时才会开始。用这种方法，你可以在任何时候让一个Observable开始发射数据。</p>
<p>如果在将一个Observable转换为可连接的Observable之前对它使用Replay操作符，产生的这个可连接Observable将总是发射完整的数据序列给任何未来的观察者，即使那些观察者在这个Observable开始给其它观察者发射数据之后才订阅。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-20-j3_replay.png" alt="replay"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ConnectableObservable observable = Observable.range(<span class="number">1</span>, <span class="number">6</span>).replay();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Subscriber subscriber2 = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted2."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError2: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext2: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Subscriber subscriber1 = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted1."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError1: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (integer == <span class="number">3</span>) &#123;</span><br><span class="line">            observable.subscribe(subscriber2);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"onNext1: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">observable.subscribe(subscriber1);</span><br><span class="line"></span><br><span class="line">observable.connect();</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">onNext1: <span class="number">1</span></span><br><span class="line">onNext1: <span class="number">2</span></span><br><span class="line">onNext2: <span class="number">1</span></span><br><span class="line">onNext2: <span class="number">2</span></span><br><span class="line">onNext2: <span class="number">3</span></span><br><span class="line">onNext1: <span class="number">3</span></span><br><span class="line">onNext1: <span class="number">4</span></span><br><span class="line">onNext2: <span class="number">4</span></span><br><span class="line">onNext1: <span class="number">5</span></span><br><span class="line">onNext2: <span class="number">5</span></span><br><span class="line">onNext1: <span class="number">6</span></span><br><span class="line">onNext2: <span class="number">6</span></span><br><span class="line">onCompleted1.</span><br><span class="line">onCompleted2.</span><br></pre></td></tr></table></figure>
<p>Replay操作符返回一个Connectable Observable 对象并且可以缓存其发射过的数据，这样即使有订阅者在其发射数据之后进行订阅也能收到其之前发射过的数据。不过使用Replay操作符我们最好还是限定其缓存的大小，否则缓存的数据太多了可会占用很大的一块内存。对缓存的控制可以从空间和时间两个方面来实现。</p>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>replay操作符还有以下变体：</p>
<ul>
<li>replay()</li>
<li>replay(int)</li>
<li>replay(long,TimeUnit)</li>
<li>replay(int,long,TimeUnit)</li>
<li>replay(Func1)</li>
<li>replay(Func1,int)</li>
<li>replay(Func1,long,TimeUnit)</li>
<li>replay(Func1,int,long,TimeUnit)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：10_连接操作之2_publish]]></title>
      <url>http://sherlockshi.github.io/2016/10/20/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A10_%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E4%B9%8B2_publish/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>将普通的Observable转换为可连接的Observable。</p>
<a id="more"></a>
<p>可连接的Observable (connectable Observable)与普通的Observable差不多，不过它并不会在被订阅时开始发射数据，而是直到使用了Connect操作符时才会开始。用这种方法，你可以在任何时候让一个Observable开始发射数据。</p>
<p>有一个变体接受一个函数作为参数。这个函数用原始Observable发射的数据作为参数，产生一个新的数据作为ConnectableObservable给发射，替换原位置的数据项。实质是在签名的基础上添加一个Map操作。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-20-j2_publish.png" alt="publish"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><h2 id="1-未使用publish操作符时"><a href="#1-未使用publish操作符时" class="headerlink" title="1. 未使用publish操作符时"></a>1. 未使用<code>publish</code>操作符时</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Observable observable = Observable.range(<span class="number">1</span>, <span class="number">1000000</span>)</span><br><span class="line">		.sample(<span class="number">10</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">observable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted1."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError1: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext1: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted2."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError2: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext2: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="2-运行结果"><a href="#2-运行结果" class="headerlink" title="2. 运行结果"></a>2. 运行结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">onNext1: <span class="number">15281</span></span><br><span class="line">onNext1: <span class="number">40401</span></span><br><span class="line">...</span><br><span class="line">onNext1: <span class="number">983620</span></span><br><span class="line">onCompleted1.</span><br><span class="line">onNext2: <span class="number">25895</span></span><br><span class="line">onNext2: <span class="number">48456</span></span><br><span class="line">...</span><br><span class="line">onNext2: <span class="number">983356</span></span><br><span class="line">onCompleted2.</span><br></pre></td></tr></table></figure>
<p>可见Observable在订阅的时候就开始发射数据，导致两个观察者收到的数据是不一样的。</p>
<h2 id="3-使用publish操作符后"><a href="#3-使用publish操作符后" class="headerlink" title="3. 使用publish操作符后"></a>3. 使用<code>publish</code>操作符后</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">ConnectableObservable observable = Observable.range(<span class="number">1</span>, <span class="number">1000000</span>).sample(<span class="number">10</span>, TimeUnit.MILLISECONDS).publish();</span><br><span class="line"></span><br><span class="line">observable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted1."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError1: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext1: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted2."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError2: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext2: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observable.connect();</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onNext1: <span class="number">20491</span></span><br><span class="line">onNext2: <span class="number">20491</span></span><br><span class="line">onNext1: <span class="number">39191</span></span><br><span class="line">onNext2: <span class="number">39191</span></span><br><span class="line">...</span><br><span class="line">onNext1: <span class="number">997372</span></span><br><span class="line">onNext2: <span class="number">997372</span></span><br><span class="line">onCompleted1.</span><br><span class="line">onCompleted2.</span><br></pre></td></tr></table></figure>
<p>可见在订阅的时候，并不会开始发射数据，只有等到<code>connect</code>连接后，才开始发射数据，所以两个观察者接收到的数据是一样的。</p>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：10_连接操作之1_connect]]></title>
      <url>http://sherlockshi.github.io/2016/10/20/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A10_%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C%E4%B9%8B1_connect/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>让一个可连接的Observable开始发射数据给订阅者。</p>
<a id="more"></a>
<p>可连接的Observable (connectable Observable)与普通的Observable差不多，不过它并不会在被订阅时开始发射数据，而是直到使用了Connect操作符时才会开始。用这个方法，你可以等待所有的观察者都订阅了Observable之后再开始发射数据。</p>
<p>RxJava中connect是ConnectableObservable接口的一个方法，使用publish操作符可以将一个普通的Observable转换为一个ConnectableObservable。</p>
<p>调用ConnectableObservable的connect方法会让它后面的Observable开始给发射数据给订阅者。</p>
<p>connect方法返回一个Subscription对象，可以调用它的unsubscribe方法让Observable停止发射数据给观察者。</p>
<p>即使没有任何订阅者订阅它，你也可以使用connect方法让一个Observable开始发射数据（或者开始生成待发射的数据）。这样，你可以将一个”冷”的Observable变为”热”的。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-20-j1_connect.png" alt="connect"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><h2 id="1-未使用connect操作符时"><a href="#1-未使用connect操作符时" class="headerlink" title="1. 未使用connect操作符时"></a>1. 未使用<code>connect</code>操作符时</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Observable observable = Observable.range(<span class="number">1</span>, <span class="number">1000000</span>)</span><br><span class="line">		.sample(<span class="number">10</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">observable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted1."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError1: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext1: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted2."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError2: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext2: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="2-运行结果"><a href="#2-运行结果" class="headerlink" title="2. 运行结果"></a>2. 运行结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">onNext1: <span class="number">15281</span></span><br><span class="line">onNext1: <span class="number">40401</span></span><br><span class="line">...</span><br><span class="line">onNext1: <span class="number">983620</span></span><br><span class="line">onCompleted1.</span><br><span class="line">onNext2: <span class="number">25895</span></span><br><span class="line">onNext2: <span class="number">48456</span></span><br><span class="line">...</span><br><span class="line">onNext2: <span class="number">983356</span></span><br><span class="line">onCompleted2.</span><br></pre></td></tr></table></figure>
<p>可见Observable在订阅的时候就开始发射数据，导致两个观察者收到的数据是不一样的。</p>
<h2 id="3-使用connect操作符后"><a href="#3-使用connect操作符后" class="headerlink" title="3. 使用connect操作符后"></a>3. 使用<code>connect</code>操作符后</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">ConnectableObservable observable = Observable.range(<span class="number">1</span>, <span class="number">1000000</span>).sample(<span class="number">10</span>, TimeUnit.MILLISECONDS).publish();</span><br><span class="line"></span><br><span class="line">observable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted1."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError1: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext1: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted2."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError2: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext2: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observable.connect();</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onNext1: <span class="number">20491</span></span><br><span class="line">onNext2: <span class="number">20491</span></span><br><span class="line">onNext1: <span class="number">39191</span></span><br><span class="line">onNext2: <span class="number">39191</span></span><br><span class="line">...</span><br><span class="line">onNext1: <span class="number">997372</span></span><br><span class="line">onNext2: <span class="number">997372</span></span><br><span class="line">onCompleted1.</span><br><span class="line">onCompleted2.</span><br></pre></td></tr></table></figure>
<p>可见在订阅的时候，并不会开始发射数据，只有等到<code>connect</code>连接后，才开始发射数据，所以两个观察者接收到的数据是一样的。</p>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：9_反压操作之3_onBackpressureLatest]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A9_%E5%8F%8D%E5%8E%8B%E6%93%8D%E4%BD%9C%E4%B9%8B3_onBackpressureLatest/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>当Observable发出的元素的速度比订阅者消化得要快,订阅者会接收Observable最新发出的item进行处理。</p>
<a id="more"></a>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-i3_on_backpressure_latest.png" alt="onBackpressureLatest"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Observable.interval(<span class="number">1</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">    .onBackpressureLatest()</span><br><span class="line">    .observeOn(Schedulers.newThread())</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + aLong);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">...</span><br><span class="line">onNext: <span class="number">15</span></span><br><span class="line">onNext: <span class="number">1607</span></span><br><span class="line">onNext: <span class="number">1608</span></span><br><span class="line">...</span><br><span class="line">onNext: <span class="number">1622</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<p><a href="http://blog.chengyunfeng.com/?p=981" target="_blank" rel="external">RxJava 教程第四部分：并发 之数据流发射太快如何办</a></p>
<p><a href="http://www.dundunwen.com/article/275b1d92-f9da-4bb8-b111-3aa8a6ace245.html" target="_blank" rel="external">RxJava中backpressure这个概念的理解</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：9_反压操作之2_onBackpressureDrop]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A9_%E5%8F%8D%E5%8E%8B%E6%93%8D%E4%BD%9C%E4%B9%8B2_onBackpressureDrop/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>如果消费者无法处理数据，则 onBackpressureDrop 就把该数据丢弃了。</p>
<a id="more"></a>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-i2_on_backpressure_drop.png" alt="onBackpressureDrop"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Observable.interval(<span class="number">1</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">    .onBackpressureDrop()</span><br><span class="line">    .observeOn(Schedulers.newThread())</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + aLong);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">...</span><br><span class="line">onNext: <span class="number">15</span></span><br><span class="line">onNext: <span class="number">1608</span></span><br><span class="line">onNext: <span class="number">1609</span></span><br><span class="line">...</span><br><span class="line">onNext: <span class="number">1623</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>由运行结果可以看出，前面 16 个数据正常的被处理的，这是应为 observeOn 在切换线程的时候， 使用了一个 16 个数据的小缓冲。</p>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<p><a href="http://blog.chengyunfeng.com/?p=981" target="_blank" rel="external">RxJava 教程第四部分：并发 之数据流发射太快如何办</a></p>
<p><a href="http://www.dundunwen.com/article/275b1d92-f9da-4bb8-b111-3aa8a6ace245.html" target="_blank" rel="external">RxJava中backpressure这个概念的理解</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：9_反压操作之1_onBackpressureBuffer]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A9_%E5%8F%8D%E5%8E%8B%E6%93%8D%E4%BD%9C%E4%B9%8B1_onBackpressureBuffer/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>onBackpressureBuffer 会缓存所有当前无法消费的数据，直到 Observer 可以处理为止。</p>
<a id="more"></a>
<p>你可以指定缓冲的数量，如果缓冲满了则会导致数据流失败。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-i1_on_backpressure_buffer.png" alt="onBackpressureBuffer"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Observable.interval(<span class="number">1</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">    .onBackpressureBuffer(<span class="number">1000</span>)</span><br><span class="line">    .observeOn(Schedulers.newThread())</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + aLong);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onNext: <span class="number">5</span></span><br><span class="line">onNext: <span class="number">6</span></span><br><span class="line">onNext: <span class="number">7</span></span><br><span class="line">onNext: <span class="number">8</span></span><br><span class="line">onNext: <span class="number">9</span></span><br><span class="line">onNext: <span class="number">10</span></span><br><span class="line">onError: Overflowed buffer of <span class="number">1000</span></span><br></pre></td></tr></table></figure>
<p>由运行结果可以看出，生产者比消费者快 100 倍。使用 1000个缓冲来处理这种消费者比较慢的情况。当消费者消费 11个数据的时候，缓冲区满了，生产者生产了 1100个数据，数据流就抛出异常了。</p>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<p><a href="http://blog.chengyunfeng.com/?p=981" target="_blank" rel="external">RxJava 教程第四部分：并发 之数据流发射太快如何办</a></p>
<p><a href="http://www.dundunwen.com/article/275b1d92-f9da-4bb8-b111-3aa8a6ace245.html" target="_blank" rel="external">RxJava中backpressure这个概念的理解</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：8_算术和聚合操作之7_reduce]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A8_%E7%AE%97%E6%9C%AF%E5%92%8C%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C%E4%B9%8B7_reduce/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>按顺序对Observable发射的每项数据应用一个函数并发射最终的值。</p>
<a id="more"></a>
<p>Reduce操作符对原始Observable发射数据的第一项应用一个函数，然后再将这个函数的返回值与第二项数据一起传递给函数，以此类推，持续这个过程知道原始Observable发射它的最后一项数据并终止，此时Reduce返回的Observable发射这个函数返回的最终值。</p>
<p>在其它场景中，这种操作有时被称为累积，聚集，压缩，折叠，注射等。</p>
<p>注意如果原始Observable没有发射任何数据，reduce抛出异常IllegalArgumentException。</p>
<p>reduce默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-h7_reduce.png" alt="reduce"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    .reduce(<span class="keyword">new</span> Func2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer1, Integer integer2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> integer1 + integer2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">10</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>reduce操作符还有以下变体：</p>
<ul>
<li>reduce(R,Func2)</li>
</ul>
<p>跟reduce相关的操作符还有：</p>
<ul>
<li>collect(Func0,Action2)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：8_算术和聚合操作之6_count]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A8_%E7%AE%97%E6%9C%AF%E5%92%8C%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C%E4%B9%8B6_count/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>计算原始Observable发射物的数量，然后只发射这个值。</p>
<a id="more"></a>
<p>Count操作符将一个Observable转换成一个发射单个值的Observable，这个值表示原始Observable发射的数据的数量。</p>
<p>如果原始Observable发生错误终止，Count不发射数据而是直接传递错误通知。如果原始Observable永远不终止，Count既不会发射数据也不会终止。</p>
<p>RxJava的实现是count和countLong。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-h6_count.png" alt="count"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    .count()</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>count操作符还有以下变体：</p>
<ul>
<li>countLong()</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：8_算术和聚合操作之5_concat]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A8_%E7%AE%97%E6%9C%AF%E5%92%8C%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C%E4%B9%8B5_concat/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>不交错的发射两个或多个Observable的发射物。</p>
<a id="more"></a>
<p>Concat操作符连接多个Observable的输出，就好像它们是一个Observable，第一个Observable发射的所有数据在第二个Observable发射的任何数据前面，以此类推。</p>
<p>直到前面一个Observable终止，Concat才会订阅额外的一个Observable。注意：因此，如果你尝试连接一个”热”Observable（这种Observable在创建后立即开始发射数据，即使没有订阅者），Concat将不会看到也不会发射它之前发射的任何数据。</p>
<p>在ReactiveX的某些实现中有一种ConcatMap操作符（名字可能叫concat_all, concat_map, concatMapObserver, for, forIn/for_in, mapcat, selectConcat或selectConcatObserver），他会变换原始Observable发射的数据到一个对应的Observable，然后再按观察和变换的顺序进行连接操作。</p>
<p>StartWith操作符类似于Concat，但是它是插入到前面，而不是追加那些Observable的数据到原始Observable发射的数据序列。</p>
<p>Merge操作符也差不多，它结合两个或多个Observable的发射物，但是数据可能交错，而Concat不会让多个Observable的发射物交错。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-h5_concat.png" alt="concat"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Observable observable1 = Observable.interval(<span class="number">1000</span>,</span><br><span class="line">        TimeUnit.MILLISECONDS,</span><br><span class="line">        Schedulers.newThread()).take(<span class="number">2</span>);</span><br><span class="line">Observable observable2 = Observable.interval(<span class="number">500</span>, <span class="number">1000</span>,</span><br><span class="line">        TimeUnit.MILLISECONDS,</span><br><span class="line">        Schedulers.newThread()).take(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">Observable.concat(observable1, observable2)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onNext: "</span> + aLong);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>跟concat相关的操作符还有：</p>
<ul>
<li>concatWith</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：8_算术和聚合操作之4_sum]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A8_%E7%AE%97%E6%9C%AF%E5%92%8C%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C%E4%B9%8B4_sum/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>计算Observable发射的数值的和并发射这个和。</p>
<a id="more"></a>
<p>Sum操作符操作一个发射数值的Observable，仅发射单个值：原始Observable所有数值的和。</p>
<p>RxJava的实现是sumDouble, sumFloat, sumInteger, sumLong，它们不是RxJava核心模块的一部分，属于rxjava-math模块。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-h4_sum.png" alt="sum"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><p>由于max操作符是属于可选的rxjava-math模块的，所以需要加入下面的依赖：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.reactivex:rxjava-math:1.0.0'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MathObservable.sumInteger(Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">10</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>跟sum相关的操作符还有：</p>
<ul>
<li>stringConcat</li>
<li>join</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：8_算术和聚合操作之3_min]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A8_%E7%AE%97%E6%9C%AF%E5%92%8C%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C%E4%B9%8B3_min/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>发射原始Observable的最小值。</p>
<a id="more"></a>
<p>Min操作符操作一个发射数值的Observable并发射单个值：最小的那个值。</p>
<p>RxJava中，min属于rxjava-math模块。</p>
<p>min接受一个可选参数，用于比较两项数据的大小，如果最小值的数据超过一项，min会发射原始Observable最近发射的那一项。</p>
<p>minBy类似于min，但是它发射的不是最小值，而是发射Key最小的项，Key由你指定的一个函数生成。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-h3_min.png" alt="min"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><p>由于max操作符是属于可选的rxjava-math模块的，所以需要加入下面的依赖：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.reactivex:rxjava-math:1.0.0'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MathObservable.min(Observable.just(<span class="number">10</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">9</span>))</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">6</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>跟min相关的操作符还有：</p>
<ul>
<li>minBy</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：8_算术和聚合操作之2_max]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A8_%E7%AE%97%E6%9C%AF%E5%92%8C%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C%E4%B9%8B2_max/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>发射原始Observable的最大值。</p>
<a id="more"></a>
<p>Max操作符操作一个发射数值的Observable并发射单个值：最大的那个值。</p>
<p>RxJava中，max属于rxjava-math模块。</p>
<p>max接受一个可选参数，用于比较两项数据的大小，如果最大值的数据超过一项，max会发射原始Observable最近发射的那一项。</p>
<p>maxBy类似于max，但是它发射的不是最大值，而是发射Key最大的项，Key由你指定的一个函数生成。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-h2_max.png" alt="max"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><p>由于max操作符是属于可选的rxjava-math模块的，所以需要加入下面的依赖：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.reactivex:rxjava-math:1.0.0'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MathObservable.max(Observable.just(<span class="number">10</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">9</span>))</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">23</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>跟max相关的操作符还有：</p>
<ul>
<li>maxBy</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：8_算术和聚合操作之1_average]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A8_%E7%AE%97%E6%9C%AF%E5%92%8C%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C%E4%B9%8B1_average/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>计算原始Observable发射数字的平均值并发射它。</p>
<a id="more"></a>
<p>Average操作符操作符一个发射数字的Observable，并发射单个值：原始Observable发射的数字序列的平均值。</p>
<p>这个操作符不包含在RxJava核心模块中，它属于不同的rxjava-math模块。它被实现为四个操作符：averageDouble, averageFloat, averageInteger, averageLong。</p>
<p>如果原始Observable不发射任何数据，这个操作符会抛异常：IllegalArgumentException。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-h1_average.png" alt="average"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><p>由于average操作符是属于可选的rxjava-math模块的，所以需要加入下面的依赖：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.reactivex:rxjava-math:1.0.0'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MathObservable.averageInteger(Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>average操作符还有以下变体：</p>
<ul>
<li>averageInteger</li>
<li>averageDouble</li>
<li>averageFloat</li>
<li>averageLong</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：7_条件和布尔操作之9_sequenceEqual]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A7_%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B8%83%E5%B0%94%E6%93%8D%E4%BD%9C%E4%B9%8B9_sequenceEqual/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>判定两个Observables是否发射相同的数据序列。</p>
<a id="more"></a>
<p>传递两个Observable给SequenceEqual操作符，它会比较两个Observable的发射物，如果两个序列是相同的（相同的数据，相同的顺序，相同的终止状态），它就发射true，否则发射false。</p>
<p>它还有一个版本接受第三个参数，可以传递一个函数用于比较两个数据项是否相同。</p>
<p>这个操作符默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-g9_sequence_equal.png" alt="sequenceEqual"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Observable observable1 = Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).delay(<span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">Observable observable2 = Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).delay(<span class="number">2000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">Observable.sequenceEqual(observable1, observable2)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Boolean&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Boolean aBoolean)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + aBoolean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="keyword">true</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>async操作符还有以下变体：</p>
<ul>
<li>sequenceEqual(Observable,Observable,Func2)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：7_条件和布尔操作之8_contains]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A7_%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B8%83%E5%B0%94%E6%93%8D%E4%BD%9C%E4%B9%8B8_contains/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>判定一个Observable是否发射一个特定的值。</p>
<a id="more"></a>
<p>给Contains传一个指定的值，如果原始Observable发射了那个值，它返回的Observable将发射true，否则发射false。</p>
<p>contains默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-g8_contains.png" alt="contains"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    .contains(<span class="number">5</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Boolean&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Boolean aBoolean)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + aBoolean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="keyword">true</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<p>发射的数据里面包含5，符合判断条件，所以结果返回true。</p>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：7_条件和布尔操作之7_all]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A7_%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B8%83%E5%B0%94%E6%93%8D%E4%BD%9C%E4%B9%8B7_all/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>判定是否Observable发射的所有数据都满足某个条件。</p>
<a id="more"></a>
<p>传递一个谓词函数给All操作符，这个函数接受原始Observable发射的数据，根据计算返回一个布尔值。All返回一个只发射一个单个布尔值的Observable，如果原始Observable正常终止并且每一项数据都满足条件，就返回true；如果原始Observable的任何一项数据不满足条件就返回False。</p>
<p>RxJava将这个操作符实现为all，它默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-g7_all.png" alt="all"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    .all(<span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> integer &lt; <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Boolean&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Boolean aBoolean)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + aBoolean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="keyword">true</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<p>由于所有数据都小于10，符合判断条件，所以结果返回true。</p>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：7_条件和布尔操作之6_takeWhile]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A7_%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B8%83%E5%B0%94%E6%93%8D%E4%BD%9C%E4%B9%8B6_takeWhile/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>发射Observable发射的数据，直到一个指定的条件不成立。</p>
<a id="more"></a>
<p>TakeWhile发射原始Observable，直到你指定的某个条件不成立的那一刻，它停止发射原始Observable，并终止自己的Observable。</p>
<p>RxJava中的takeWhile操作符返回一个镜像原始Observable行为的Observable，直到某一项数据你指定的函数返回false那一刻，这个新的Observable发射onCompleted终止通知。</p>
<p>takeWhile默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-g6_take_while.png" alt="takeWhile"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    .takeWhile(<span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> integer != <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<ol>
<li>发射前2个数据的时候，1和2都符合判断条件，即不等于3，<code>takeWhile</code>正常将数据发射出去；</li>
<li>直到发射3的时候，判断条件不成立了，即3是等于3的；</li>
<li><code>takeWhile</code>才将后续的所有数据发射出来（3、4、5和完成事件）。</li>
</ol>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：7_条件和布尔操作之5_takeUntil]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A7_%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B8%83%E5%B0%94%E6%93%8D%E4%BD%9C%E4%B9%8B5_takeUntil/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>当第二个Observable发射了一项数据或者终止时，丢弃原始Observable发射的任何数据。</p>
<a id="more"></a>
<p>TakeUntil订阅并开始发射原始Observable，它还监视你提供的第二个Observable。如果第二个Observable发射了一项数据或者发射了一个终止通知，TakeUntil返回的Observable会停止发射原始Observable并终止。</p>
<p>RxJava中的实现是takeUntil。注意：第二个Observable发射一项数据或一个onError通知或一个onCompleted通知都会导致takeUntil停止发射数据。</p>
<p>takeUntil默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-g5_take_until.png" alt="takeUntil"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Observable observable1 = Observable.interval(<span class="number">1000</span>, TimeUnit.MILLISECONDS).take(<span class="number">5</span>);</span><br><span class="line">Observable observable2 = Observable.just(<span class="number">1</span>, <span class="number">2</span>).delay(<span class="number">2500</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">observable1.takeUntil(observable2)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + aLong);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<ol>
<li><code>observable1</code>每隔1秒发一个数据（第1秒时发射0，第2秒时发射1），<code>takeUntil</code>正常把数据发射出来；</li>
<li>直到<code>observable2</code>在2.5秒的时候发射了第1个数据；</li>
<li><code>takeUntil</code>就停止发射数据了。</li>
</ol>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：7_条件和布尔操作之4_skipWhile]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A7_%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B8%83%E5%B0%94%E6%93%8D%E4%BD%9C%E4%B9%8B4_skipWhile/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>丢弃Observable发射的数据，直到一个指定的条件不成立。</p>
<a id="more"></a>
<p>SkipWhile订阅原始的Observable，但是忽略它的发射物，直到你指定的某个条件变为false的那一刻，它开始发射原始Observable。</p>
<p>skipWhile默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-g4_skip_while.png" alt="skipWhile"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    .skipWhile(<span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> integer != <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onNext: <span class="number">5</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<ol>
<li>发射前2个数据的时候，1和2都符合判断条件，即不等于3，<code>skipWhile</code>并不会将数据发射出去；</li>
<li>直到发射3的时候，判断条件不成立了，即3是等于3的；</li>
<li><code>skipWhile</code>才将后续的所有数据发射出来（3、4、5和完成事件）。</li>
</ol>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：7_条件和布尔操作之3_skipUntil]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A7_%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B8%83%E5%B0%94%E6%93%8D%E4%BD%9C%E4%B9%8B3_skipUntil/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>丢弃原始Observable发射的数据，直到第二个Observable发射了一项数据。</p>
<a id="more"></a>
<p>SkipUntil订阅原始的Observable，但是忽略它的发射物，直到第二个Observable发射了一项数据那一刻，它开始发射原始Observable。</p>
<p>RxJava中对应的是skipUntil，它默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-g3_skip_until.png" alt="skipUntil"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Observable observable1 = Observable.interval(<span class="number">1000</span>, TimeUnit.MILLISECONDS).take(<span class="number">5</span>);</span><br><span class="line">Observable observable2 = Observable.just(<span class="number">1</span>, <span class="number">2</span>).delay(<span class="number">2500</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">observable1.skipUntil(observable2)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + aLong);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<ol>
<li><code>observable1</code>每隔1秒发一个数据（第1秒时发射0，第2秒时发射1），但是<code>skipUntil</code>并不会把数据发射出来；</li>
<li>直到<code>observable2</code>在2.5秒的时候发射了第1个数据；</li>
<li><code>skipUntil</code>才将<code>observable1</code>后续的所有数据发射出来（2、3、4和完成事件）。</li>
</ol>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：7_条件和布尔操作之2_defaultIfEmpty]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A7_%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B8%83%E5%B0%94%E6%93%8D%E4%BD%9C%E4%B9%8B2_defaultIfEmpty/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>发射来自原始Observable的值，如果原始Observable没有发射任何值，就发射一个默认值。</p>
<a id="more"></a>
<p>DefaultIfEmpty简单的精确地发射原始Observable的值，如果原始Observable没有发射任何数据正常终止（以onCompletedd的形式），DefaultIfEmpty返回的Observable就发射一个你提供的默认值。</p>
<p>RxJava将这个操作符实现为defaultIfEmpty。它默认不在任何特定的调度器上执行。</p>
<p>还有一个新的操作符switchIfEmpty，不在RxJava 1.0.0版中，它和defaultIfEmtpy类似，不同的是，如果原始Observable没有发射数据，它发射一个备用Observable的发射物。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-g2_default_if_empty.png" alt="defaultIfEmpty"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.empty()</span><br><span class="line">    .defaultIfEmpty(<span class="number">1</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：7_条件和布尔操作之1_amb]]></title>
      <url>http://sherlockshi.github.io/2016/10/19/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A7_%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B8%83%E5%B0%94%E6%93%8D%E4%BD%9C%E4%B9%8B1_amb/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>给定两个或多个Observables，它只发射首先发射数据或通知的那个Observable的所有数据。</p>
<a id="more"></a>
<p>当你传递多个Observable给Amb时，它只发射其中一个Observable的数据和通知：首先发送通知给Amb的那个，不管发射的是一项数据还是一个onError或onCompleted通知。Amb将忽略和丢弃其它所有Observables的发射物。</p>
<p>RxJava的实现是amb，有一个类似的对象方法ambWith。例如，Observable.amb(o1,o2)和o1.ambWith(o2)是等价的。</p>
<p>这个操作符默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-19-g1_amb.png" alt="amb"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Observable just1 = Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).delay(<span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">Observable just2 = Observable.just(<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>).delay(<span class="number">800</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">Observable.amb(just1, just2)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">11</span></span><br><span class="line">onNext: <span class="number">12</span></span><br><span class="line">onNext: <span class="number">13</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<p>由运行结果可以看出，just2在800毫秒的时候，发射了第1个数据给Amb，Amb就只发射just2的数据，而忽略了其它Observable的数据。</p>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：6_辅助操作之12_do]]></title>
      <url>http://sherlockshi.github.io/2016/10/18/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A6_%E8%BE%85%E5%8A%A9%E6%93%8D%E4%BD%9C%E4%B9%8B12_do/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>注册一个动作作为原始Observable生命周期事件的一种占位符。</p>
<a id="more"></a>
<p>你可以注册回调，当Observable的某个事件发生时，Rx会在与Observable链关联的正常通知集合中调用它。Rx实现了多种操作符用于达到这个目的。</p>
<p>RxJava实现了很多Do操作符的变体。</p>
<p>doOnEach操作符让你可以注册一个回调，它产生的Observable每发射一项数据就会调用它一次。你可以以Action的形式传递参数给它，这个Action接受一个onNext的变体Notification作为它的唯一参数，你也可以传递一个Observable给doOnEach，这个Observable的onNext会被调用，就好像它订阅了原始的Observable一样。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-17-f12_do.png" alt="do"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    .doOnEach(<span class="keyword">new</span> Action1&lt;Notification&lt;? <span class="keyword">super</span> Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Notification&lt;? <span class="keyword">super</span> Integer&gt; notification)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (notification.getKind() == Notification.Kind.OnNext</span><br><span class="line">                    &amp;&amp; (Integer) notification.getValue() == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"The value is 2!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onError: The value is <span class="number">2</span>!</span><br></pre></td></tr></table></figure>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>do操作符还有以下变体：</p>
<ul>
<li>doOnEach(Action1)</li>
<li>doOnEach(Observer)</li>
<li>doOnNext</li>
<li>doOnSubscribe</li>
<li>doOnUnsubscribe</li>
<li>doOnCompleted</li>
<li>doOnError</li>
<li>doOnTerminate</li>
<li>finallyDo</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：6_辅助操作之11_using]]></title>
      <url>http://sherlockshi.github.io/2016/10/18/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A6_%E8%BE%85%E5%8A%A9%E6%93%8D%E4%BD%9C%E4%B9%8B11_using/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>创建一个只在Observable生命周期内存在的一次性资源。</p>
<a id="more"></a>
<p>Using操作符让你可以指示Observable创建一个只在它的生命周期内存在的资源，当Observable终止时这个资源会被自动释放。</p>
<p>using操作符接受三个参数：</p>
<ol>
<li>一个用户创建一次性资源的工厂函数</li>
<li>一个用于创建Observable的工厂函数</li>
<li>一个用于释放资源的函数</li>
</ol>
<p>当一个观察者订阅using返回的Observable时，using将会使用Observable工厂函数创建观察者要观察的Observable，同时使用资源工厂函数创建一个你想要创建的资源。当观察者取消订阅这个Observable时，或者当观察者终止时（无论是正常终止还是因错误而终止），using使用第三个函数释放它创建的资源。</p>
<p>using默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-17-f11_using.png" alt="using"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Animal create."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Animal release."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Observable.using(<span class="keyword">new</span> Func0&lt;Animal&gt;() &#123;</span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> Animal <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                     <span class="keyword">return</span> <span class="keyword">new</span> Animal();</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">    <span class="keyword">new</span> Func1&lt;Animal, Observable&lt;?&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Observable&lt;?&gt; call(Animal animal) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.timer(<span class="number">5000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">new</span> Action1&lt;Animal&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">            animal.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Animal create.</span><br><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onCompleted.</span><br><span class="line">Animal release.</span><br></pre></td></tr></table></figure>
<p>从运行结果可以看出，经过5秒后，timer发射了一个数据项，Observable就终止了，using就使用第三个函数释放它创建的资源。</p>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：6_辅助操作之10_timeout]]></title>
      <url>http://sherlockshi.github.io/2016/10/18/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A6_%E8%BE%85%E5%8A%A9%E6%93%8D%E4%BD%9C%E4%B9%8B10_timeout/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>对原始Observable的一个镜像，如果过了一个指定的时长仍没有发射数据，它会发一个错误通知。</p>
<a id="more"></a>
<p>如果原始Observable过了指定的一段时长没有发射任何数据，Timeout操作符会以一个onError通知终止这个Observable。</p>
<p>RxJava中的实现为timeout，但是有好几个变体。</p>
<p>第一个变体接受一个时长参数，每当原始Observable发射了一项数据，timeout就启动一个计时器，如果计时器超过了指定指定的时长而原始Observable没有发射另一项数据，timeout就抛出TimeoutException，以一个错误通知终止Observable。</p>
<p>这个timeout默认在computation调度器上执行，你可以通过参数指定其它的调度器。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-17-f10_timeout.png" alt="timeout"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span> * i);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                subscriber.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">            subscriber.onNext(i);</span><br><span class="line">        &#125;</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .timeout(<span class="number">250</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">    .subscribeOn(Schedulers.newThread())</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onError: <span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<ul>
<li>经过100毫秒后，发射1；</li>
<li>再经过200毫秒后，发射2；</li>
<li>然后再经过250毫秒，还没有再发射新的数据项（这一次要300毫秒才发射），就超时了，就报出<code>TimeoutException</code>，以一个错误通知终止Observable。</li>
</ul>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>timeout操作符还有以下变体：</p>
<ul>
<li>timeout(long,TimeUnit)</li>
<li>timeout()</li>
<li>timeout(long,TimeUnit,Observable)</li>
<li>timeout(long,TimeUnit,Observable,Scheduler)</li>
<li>timeout(Func1)</li>
<li>timeout(Func1,Observable)</li>
<li>timeout(Func0,Func1)</li>
<li>timeout(Func0,Func1,Observable)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：6_辅助操作之9_timeInterval]]></title>
      <url>http://sherlockshi.github.io/2016/10/18/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A6_%E8%BE%85%E5%8A%A9%E6%93%8D%E4%BD%9C%E4%B9%8B9_timeInterval/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>将一个发射数据的Observable转换为发射那些数据发射时间间隔的Observable。</p>
<a id="more"></a>
<p>TimeInterval操作符拦截原始Observable发射的数据项，替换为发射表示相邻发射物时间间隔的对象。</p>
<p>RxJava中的实现为timeInterval，这个操作符将原始Observable转换为另一个Obserervable，后者发射一个标志替换前者的数据项，这个标志表示前者的两个连续发射物之间流逝的时间长度。新的Observable的第一个发射物表示的是在观察者订阅原始Observable到原始Observable发射它的第一项数据之间流逝的时间长度。不存在与原始Observable发射最后一项数据和发射onCompleted通知之间时长对应的发射物。</p>
<p>timeInterval默认在immediate调度器上执行，你可以通过传参数修改。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-17-f9_time_interval.png" alt="timeInterval"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span> * i);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                subscriber.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">            subscriber.onNext(i);</span><br><span class="line">        &#125;</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .timeInterval()</span><br><span class="line">    .subscribeOn(Schedulers.newThread())</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;TimeInterval&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(TimeInterval&lt;Integer&gt; timeInterval)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: interval="</span> + timeInterval.getIntervalInMilliseconds() + <span class="string">", Value="</span> +timeInterval.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onNext: interval=<span class="number">100</span>, Value=<span class="number">1</span></span><br><span class="line">onNext: interval=<span class="number">100</span>, Value=<span class="number">2</span></span><br><span class="line">onNext: interval=<span class="number">100</span>, Value=<span class="number">3</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>delay操作符还有以下变体：</p>
<ul>
<li>timeInterval()</li>
<li>timeInterval(Scheduler)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：6_辅助操作之8_delay]]></title>
      <url>http://sherlockshi.github.io/2016/10/18/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A6_%E8%BE%85%E5%8A%A9%E6%93%8D%E4%BD%9C%E4%B9%8B8_delay/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>延迟一段指定的时间再发射来自Observable的发射物。</p>
<a id="more"></a>
<p>Delay操作符让原始Observable在发射每项数据之前都暂停一段指定的时间段。效果是Observable发射的数据项在时间上向前整体平移了一个增量。</p>
<p>RxJava的实现是 delay和delaySubscription。</p>
<p>第一种delay接受一个定义时长的参数（包括数量和单位）。每当原始Observable发射一项数据，delay就启动一个定时器，当定时器过了给定的时间段时，delay返回的Observable发射相同的数据项。</p>
<p>注意：delay不会平移onError通知，它会立即将这个通知传递给订阅者，同时丢弃任何待发射的onNext通知。然而它会平移一个onCompleted通知。</p>
<p>delay默认在computation调度器上执行，你可以通过参数指定使用其它的调度器。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-17-f8_delay.png" alt="delay"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    .delay(<span class="number">2000</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span>秒后...）</span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>delay操作符还有以下变体：</p>
<ul>
<li>delay(long,TimeUnit)</li>
<li>delay()</li>
<li>delay(Func1)</li>
<li>delay(Func0,Func1)</li>
</ul>
<p>跟delay相关的操作符还有：</p>
<ul>
<li>delaySubscription(long,TimeUnit)</li>
<li>delaySubscription(long,TimeUnit,Scheduler)</li>
<li>delaySubscription(Func0)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：6_辅助操作之7_subscribeOn]]></title>
      <url>http://sherlockshi.github.io/2016/10/18/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A6_%E8%BE%85%E5%8A%A9%E6%93%8D%E4%BD%9C%E4%B9%8B7_subscribeOn/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>指定Observable自身在哪个调度器上执行。</p>
<a id="more"></a>
<p>很多ReactiveX实现都使用调度器 “Scheduler”来管理多线程环境中Observable的转场。你可以使用SubscribeOn操作符指定Observable在一个特定的调度器上运转。</p>
<p>ObserveOn操作符的作用类似，但是功能很有限，它指示Observable在一个指定的调度器上给观察者发通知。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-17-f7_subscribe_on.png" alt="subscribeOn"></p>
<p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-17-f7_subscribe_on2.png" alt="subscribeOn"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"ThreadName: "</span> + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    .map(<span class="keyword">new</span> Func1&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"ThreadName(just): "</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span> integer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribeOn(Schedulers.newThread())</span><br><span class="line">    .map(<span class="keyword">new</span> Func1&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"ThreadName(subscribeOn): "</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span> integer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">//    .observeOn(Schedulers.newThread())</span></span><br><span class="line"><span class="comment">//    .map(new Func1&lt;Integer, Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">//        @Override</span></span><br><span class="line"><span class="comment">//        public Integer call(Integer integer) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println("ThreadName(observeOn): " + Thread.currentThread().getName());</span></span><br><span class="line"><span class="comment">//            return integer;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;)</span></span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ThreadName: <span class="function">main</span><br><span class="line"><span class="title">ThreadName</span><span class="params">(just)</span>: RxNewThreadScheduler-1</span><br><span class="line"><span class="title">ThreadName</span><span class="params">(just)</span>: RxNewThreadScheduler-1</span><br><span class="line"><span class="title">ThreadName</span><span class="params">(observeOn)</span>: RxNewThreadScheduler-1</span><br><span class="line">onNext: 1</span><br><span class="line"><span class="title">ThreadName</span><span class="params">(observeOn)</span>: RxNewThreadScheduler-1</span><br><span class="line">onNext: 2</span><br><span class="line">onCompleted.</span></span><br></pre></td></tr></table></figure>
<p>由运行结果可以看出，相比使用observeOn()方法切换线程，使用subscribeOn()来切换线程的话，会在指定的线程上执行这个Observable，而且会改变创建Observable时所在的线程。</p>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1006/3543.html" target="_blank" rel="external">在正确的线程上使用Observable</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：6_辅助操作之6_subscribe]]></title>
      <url>http://sherlockshi.github.io/2016/10/18/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A6_%E8%BE%85%E5%8A%A9%E6%93%8D%E4%BD%9C%E4%B9%8B6_subscribe/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>操作来自Observable的发射物和通知。</p>
<a id="more"></a>
<p>Subscribe操作符是连接观察者和Observable的胶水。一个观察者要想看到Observable发射的数据项，或者想要从Observable获取错误和完成通知，它首先必须使用这个操作符订阅那个Observable。</p>
<p>Subscribe操作符的一般实现可能会接受一到三个方法（然后由观察者组合它们），或者接受一个实现了包含这三个方法的接口的对象（有时叫做Observer或Subscriber）：</p>
<p><strong>onNext</strong></p>
<p>每当Observable发射了一项数据它就会调用这个方法。这个方法的参数是这个Observable发射的数据项。</p>
<p><strong>onError</strong></p>
<p>Observable调用这个方法表示它无法生成期待的数据或者遇到了其它错误。这将停止Observable，它在这之后不会再调用onNext或onCompleted。onError方法的参数是导致这个错误的原因的一个表示（有时可能是一个Exception或Throwable对象，其它时候也可能是一个简单的字符串，取决于具体的实现）。</p>
<p><strong>onCompleted</strong></p>
<p>如果没有遇到任何错误，Observable在最后一次调用onCompleted之后会调用这个方法。</p>
<p>如果一个Observable直到有一个观察者订阅它才开始发射数据项，就称之为”冷”的Observable；如果一个Observable可能在任何时刻开始发射数据，就称之为”热”的Observable，一个订阅者可能从开始之后的某个时刻开始观察它发射的数据序列，它可能会错过在订阅之前发射的数据。</p>
<p>RxJava中的实现是subscribe方法。</p>
<p>如果你使用无参数的版本，它将触发对Observable的一个订阅，但是将忽略它的发射物和通知。这个操作会激活一个”冷”的Observable。</p>
<p>你也可以传递一到三个函数给它，它们会按下面的方法解释：</p>
<ol>
<li>onNext</li>
<li>onNext和onError</li>
<li>onNext, onError和onCompleted</li>
</ol>
<p>最后，你还可以传递一个Observer或Subscriber接口给它，Observer接口包含这三个以on开头的方法。Subscriber接口也实现了这三个方法，而且还添加了几个额外的方法，用于支持使用反压操作(reactive pull backpressure)，这让Subscriber可以在Observable完成前取消订阅。</p>
<p>subscribe方法返回一个实现了Subscription接口的对象。这个接口包含unsubscribe方法，任何时刻你都可以调用它来断开subscribe方法建立的Observable和观察者之间的订阅关系。</p>
<h1 id="二、示例代码"><a href="#二、示例代码" class="headerlink" title="二、示例代码"></a>二、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="三、运行结果"><a href="#三、运行结果" class="headerlink" title="三、运行结果"></a>三、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：6_辅助操作之5_observeOn]]></title>
      <url>http://sherlockshi.github.io/2016/10/18/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A6_%E8%BE%85%E5%8A%A9%E6%93%8D%E4%BD%9C%E4%B9%8B5_observeOn/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>指定一个观察者在哪个调度器上观察这个Observable。</p>
<a id="more"></a>
<p>很多ReactiveX实现都使用调度器 “Scheduler”来管理多线程环境中Observable的转场。你可以使用ObserveOn操作符指定Observable在一个特定的调度器上发送通知给观察者 (调用观察者的onNext, onCompleted, onError方法)。</p>
<p>注意：当遇到一个异常时ObserveOn会立即向前传递这个onError终止通知，它不会等待慢速消费的Observable接受任何之前它已经收到但还没有发射的数据项。这可能意味着onError通知会跳到（并吞掉）原始Observable发射的数据项前面，正如图例上展示的。</p>
<p>SubscribeOn操作符的作用类似，但它是用于指定Observable本身在特定的调度器上执行，它同样会在那个调度器上给观察者发通知。</p>
<p>RxJava中，要指定Observable应该在哪个调度器上调用观察者的onNext, onCompleted, onError方法，你需要使用observeOn操作符，传递给它一个合适的Scheduler。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-17-f5_observe_on.png" alt="observeOn"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"ThreadName: "</span> + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    .map(<span class="keyword">new</span> Func1&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"ThreadName(just): "</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span> integer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">//    .subscribeOn(Schedulers.newThread())</span></span><br><span class="line"><span class="comment">//    .map(new Func1&lt;Integer, Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">//        @Override</span></span><br><span class="line"><span class="comment">//        public Integer call(Integer integer) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println("ThreadName(subscribeOn): " + Thread.currentThread().getName());</span></span><br><span class="line"><span class="comment">//            return integer;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;)</span></span><br><span class="line">    .observeOn(Schedulers.newThread())</span><br><span class="line">    .map(<span class="keyword">new</span> Func1&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"ThreadName(observeOn): "</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span> integer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ThreadName: <span class="function">main</span><br><span class="line"><span class="title">ThreadName</span><span class="params">(just)</span>: main</span><br><span class="line"><span class="title">ThreadName</span><span class="params">(just)</span>: main</span><br><span class="line"><span class="title">ThreadName</span><span class="params">(observeOn)</span>: RxNewThreadScheduler-3</span><br><span class="line">onNext: 1</span><br><span class="line"><span class="title">ThreadName</span><span class="params">(observeOn)</span>: RxNewThreadScheduler-3</span><br><span class="line">onNext: 2</span><br><span class="line">onCompleted.</span></span><br></pre></td></tr></table></figure>
<p>由运行结果可以看出，使用observeOn()方法切换线程后，观察者会在指定的线程上观察这个Observable，但这个方法并不会改变创建Observable时所在的线程。（后面介绍的subscribeOn方法会改变创建Observable时所在的线程）</p>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1006/3543.html" target="_blank" rel="external">在正确的线程上使用Observable</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：6_辅助操作之4_serialize]]></title>
      <url>http://sherlockshi.github.io/2016/10/17/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A6_%E8%BE%85%E5%8A%A9%E6%93%8D%E4%BD%9C%E4%B9%8B4_serialize/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>强制一个Observable连续调用并保证行为正确。</p>
<a id="more"></a>
<p>一个Observable可以异步调用它的观察者的方法，可能是从不同的线程调用。这可能会让Observable行为不正确，它可能会在某一个onNext调用之前尝试调用onCompleted或onError方法，或者从两个不同的线程同时调用onNext方法。使用Serialize操作符，你可以纠正这个Observable的行为，保证它的行为是正确的且是同步的。</p>
<p>RxJava中的实现是serialize，它默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-17-f4_serialize.png" alt="serialize"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><p>如果你无法确保自定义的操作符符合 Rx 的约定，例如从多个源异步获取数据，则可以使用 serialize 操作函数。 serialize 可以把一个不符合约定的 Observable 转换为一个符合约定的 Observable。</p>
<h2 id="1-首先"><a href="#1-首先" class="headerlink" title="1. 首先"></a>1. 首先</h2><p>创建一个不符合约定的 Observable，并且订阅到该 Observable上：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="number">1</span>);</span><br><span class="line">        subscriber.onNext(<span class="number">2</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">        subscriber.onNext(<span class="number">3</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .doOnUnsubscribe(<span class="keyword">new</span> Action0() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onUnsubscribe."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="2-运行结果"><a href="#2-运行结果" class="headerlink" title="2. 运行结果"></a>2. 运行结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onCompleted.</span><br><span class="line">onUnsubscribe.</span><br></pre></td></tr></table></figure>
<p>先不管上面的 Observable 发射的数据，订阅结束的情况看起来符合 Rx 约定。 这是由于 subscribe 认为当前数据流结束的时候会主动结束这个 Subscription。但这并不意味着总是这样的。 还有一个函数为 unsafeSubscribe ，该函数不会自动取消订阅。</p>
<h2 id="3-其次"><a href="#3-其次" class="headerlink" title="3. 其次"></a>3. 其次</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="number">1</span>);</span><br><span class="line">        subscriber.onNext(<span class="number">2</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">        subscriber.onNext(<span class="number">3</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .doOnUnsubscribe(<span class="keyword">new</span> Action0() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onUnsubscribe."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .unsafeSubscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="4-运行结果"><a href="#4-运行结果" class="headerlink" title="4. 运行结果"></a>4. 运行结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onCompleted.</span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<p>上面的示例最后就没有打印 Unsubscribed 字符串。</p>
<p>unsafeSubscribe 也不能很好的处理错误情况。所以该函数几乎没用。在文档中说：该函数应该仅仅在自定义操作函数中处理嵌套订阅的情况。 为了避免这种操作函数接受到不合法的数据流，我们可以在其上应用 serialize 操作函数。</p>
<h2 id="5-使用serialize"><a href="#5-使用serialize" class="headerlink" title="5. 使用serialize"></a>5. 使用serialize</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="number">1</span>);</span><br><span class="line">        subscriber.onNext(<span class="number">2</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">        subscriber.onNext(<span class="number">3</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .serialize()</span><br><span class="line">    .doOnUnsubscribe(<span class="keyword">new</span> Action0() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onUnsubscribe."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .unsafeSubscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<p>尽管上面的代码中没有调用unsubscribe， 但是数据流事件依然符合约定，最后也收到了完成事件。</p>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<p><a href="http://www.thinksaas.cn/topics/0/592/592871.html" target="_blank" rel="external">RxJava 教程第三部分：驯服数据流之自定义操作函数</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：6_辅助操作之3_timestamp]]></title>
      <url>http://sherlockshi.github.io/2016/10/17/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A6_%E8%BE%85%E5%8A%A9%E6%93%8D%E4%BD%9C%E4%B9%8B3_timestamp/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>给Observable发射的数据项附加一个时间戳。</p>
<a id="more"></a>
<p>RxJava中的实现为timestamp，它将一个发射T类型数据的Observable转换为一个发射类型为Timestamped<t>的数据的Observable，每一项都包含数据的原始发射时间。</t></p>
<p>timestamp默认在immediate调度器上执行，但是可以通过参数指定其它的调度器。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-17-f3_timestamp.png" alt="timestamp"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    .timestamp()</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Timestamped&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Timestamped&lt;Integer&gt; time)</span> </span>&#123;</span><br><span class="line">            String timestamp = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">                    .format(<span class="keyword">new</span> Date(time.getTimestampMillis()));</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + time.getValue() + <span class="string">"("</span> + timestamp + <span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span>(<span class="number">2016</span>-<span class="number">10</span>-<span class="number">17</span> <span class="number">22</span>:<span class="number">05</span>:<span class="number">04</span>)</span><br><span class="line">onNext: <span class="number">2</span>(<span class="number">2016</span>-<span class="number">10</span>-<span class="number">17</span> <span class="number">22</span>:<span class="number">05</span>:<span class="number">04</span>)</span><br><span class="line">onNext: <span class="number">3</span>(<span class="number">2016</span>-<span class="number">10</span>-<span class="number">17</span> <span class="number">22</span>:<span class="number">05</span>:<span class="number">04</span>)</span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>timestamp操作符还有以下变体：</p>
<ul>
<li>timestamp(Scheduler)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：6_辅助操作之2_dematerialize]]></title>
      <url>http://sherlockshi.github.io/2016/10/17/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A6_%E8%BE%85%E5%8A%A9%E6%93%8D%E4%BD%9C%E4%B9%8B2_dematerialize/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>Dematerialize操作符是Materialize的逆向过程，它将Materialize转换的结果还原成它原本的形式。</p>
<a id="more"></a>
<p>dematerialize反转这个过程，将原始Observable发射的Notification对象还原成Observable的通知。</p>
<p>dematerialize默认不在任何特定的调度器 (Scheduler) 上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-17-f2_dematerialize.png" alt="dematerialize"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    .materialize()</span><br><span class="line">    .dematerialize()</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：6_辅助操作之1_materialize]]></title>
      <url>http://sherlockshi.github.io/2016/10/17/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A6_%E8%BE%85%E5%8A%A9%E6%93%8D%E4%BD%9C%E4%B9%8B1_materialize/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>Materialize将数据项和事件通知都当做数据项发射。</p>
<a id="more"></a>
<p>一个合法的有限的Obversable将调用它的观察者的onNext方法零次或多次，然后调用观察者的onCompleted或onError正好一次。Materialize操作符将这一系列调用，包括原来的onNext通知和终止通知onCompleted或onError都转换为一个Observable发射的数据序列。</p>
<p>RxJava的materialize将来自原始Observable的通知转换为Notification对象，然后它返回的Observable会发射这些数据。</p>
<p>materialize默认不在任何特定的调度器 (Scheduler) 上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-17-f1_materialize.png" alt="materialize"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    .materialize()</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Notification&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Notification&lt;Integer&gt; integerNotification)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: Type="</span> + integerNotification.getKind() + <span class="string">", Value="</span> + integerNotification.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onNext: Type=OnNext, Value=<span class="number">1</span></span><br><span class="line">onNext: Type=OnNext, Value=<span class="number">2</span></span><br><span class="line">onNext: Type=OnNext, Value=<span class="number">3</span></span><br><span class="line">onNext: Type=OnNext, Value=<span class="number">4</span></span><br><span class="line">onNext: Type=OnCompleted, Value=<span class="keyword">null</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：5_错误处理之2_retry]]></title>
      <url>http://sherlockshi.github.io/2016/10/17/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A5_%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B9%8B2_retry/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>如果原始Observable遇到错误，重新订阅它期望它能正常终止。</p>
<a id="more"></a>
<p>Retry操作符不会将原始Observable的onError通知传递给观察者，它会订阅这个Observable，再给它一次机会无错误地完成它的数据序列。Retry总是传递onNext通知给观察者，由于重新订阅，可能会造成数据项重复，如上图所示。</p>
<p>RxJava中的实现为retry和retryWhen。</p>
<p>无论收到多少次onError通知，无参数版本的retry都会继续订阅并发射原始Observable。</p>
<p>接受单个count参数的retry会最多重新订阅指定的次数，如果次数超了，它不会尝试再次订阅，它会把最新的一个onError通知传递给它的观察者。</p>
<p>还有一个版本的retry接受一个谓词函数作为参数，这个函数的两个参数是：重试次数和导致发射onError通知的Throwable。这个函数返回一个布尔值，如果返回true，retry应该再次订阅和镜像原始的Observable，如果返回false，retry会将最新的一个onError通知传递给它的观察者。</p>
<p>retry操作符默认在trampoline调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/e2_retry.png" alt="retry"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (subscriber.isUnsubscribed()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line">                subscriber.onError(<span class="keyword">new</span> Exception(<span class="string">"Integer is 4!"</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                subscriber.onNext(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .retry(<span class="number">1</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onError: Integer is <span class="number">4</span>!</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>retry操作符还有以下变体：</p>
<ul>
<li>retry()</li>
<li>retry(long)</li>
<li>retry(Func2)</li>
</ul>
<p>跟retry相关的操作符还有：</p>
<ul>
<li>retryWhen(Func1)</li>
<li>retryWhen(Func1,Scheduler)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：5_错误处理之1_3_onExceptionResumeNext]]></title>
      <url>http://sherlockshi.github.io/2016/10/17/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A5_%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B9%8B1_3_onExceptionResumeNext/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>让Observable在遇到错误时继续发射后面的数据项。</p>
<a id="more"></a>
<p>和onErrorResumeNext类似，onExceptionResumeNext方法返回一个镜像原有Observable行为的新Observable，也使用一个备用的Observable，不同的是，如果onError收到的Throwable不是一个Exception，它会将错误传递给观察者的onError方法，不会使用备用的Observable。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/e1_3_on_exception_resume_next.png" alt="onExceptionResumeNext"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (subscriber.isUnsubscribed()) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line">                        subscriber.onError(<span class="keyword">new</span> Exception(<span class="string">"Integer is 4!"</span>));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        subscriber.onNext(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                subscriber.onCompleted();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .onExceptionResumeNext(Observable.just(<span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>))</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">166</span></span><br><span class="line">onNext: <span class="number">167</span></span><br><span class="line">onNext: <span class="number">168</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<p>将第10行代码改为new Throwable后，会看到输出结果为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onError: Integer is <span class="number">4</span>!</span><br></pre></td></tr></table></figure>
<p>可见上文提到的结论是正确的：<br>如果onError收到的Throwable不是一个Exception，它会将错误传递给观察者的onError方法，不会使用备用的Observable。</p>
<p>关于Error和Exception的区别，大家可以查看Android官方文档，或查看<a href="http://blog.csdn.net/job_hesc/article/details/46612015" target="_blank" rel="external">Android RxJava使用介绍（四） RxJava的操作符</a>。</p>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：5_错误处理之1_2_onErrorResumeNext]]></title>
      <url>http://sherlockshi.github.io/2016/10/17/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A5_%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B9%8B1_2_onErrorResumeNext/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>让Observable在遇到错误时开始发射第二个Observable的数据序列。</p>
<a id="more"></a>
<p>onErrorResumeNext方法返回一个镜像原有Observable行为的新Observable，后者会忽略前者的onError调用，不会将错误传递给观察者，作为替代，它会开始镜像另一个，备用的Observable。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/e1_2_on_error_resume_next.png" alt="onErrorResumeNext"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (subscriber.isUnsubscribed()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line">                subscriber.onError(<span class="keyword">new</span> Exception(<span class="string">"Integer is 4!"</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                subscriber.onNext(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .onErrorResumeNext(<span class="keyword">new</span> Func1&lt;Throwable, Observable&lt;? extends Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Observable&lt;? extends Integer&gt; call(Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.just(<span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">166</span></span><br><span class="line">onNext: <span class="number">167</span></span><br><span class="line">onNext: <span class="number">168</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<p>onErrorResumeNext操作符跟onErrorReturn类似，只不过onErrorReturn只能在错误或异常发生时只返回一个和源Observable相同类型的结果，而onErrorResumeNext操作符是在错误或异常发生时返回一个Observable，也就是说可以返回多个和源Observable相同类型的结果。</p>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：5_错误处理之1_1_onErrorReturn]]></title>
      <url>http://sherlockshi.github.io/2016/10/17/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A5_%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B9%8B1_1_onErrorReturn/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>让Observable遇到错误时发射一个特殊的项并且正常终止。</p>
<a id="more"></a>
<p>onErrorReturn方法返回一个镜像原有Observable行为的新Observable，后者会忽略前者的onError调用，不会将错误传递给观察者，作为替代，它会发发射一个特殊的项并调用观察者的onCompleted方法。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/e1_1_on_error_return.png" alt="onErrorReturn"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (subscriber.isUnsubscribed()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line">                subscriber.onError(<span class="keyword">new</span> Exception(<span class="string">"Integer is 4!"</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                subscriber.onNext(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .onErrorReturn(<span class="keyword">new</span> Func1&lt;Throwable, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">166</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">166</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<p>onErrorReturn操作符是在Observable发生错误或异常的时候（即将回调oError方法时），拦截错误并执行指定的逻辑，返回一个跟源Observable相同类型的结果，最后回调订阅者的onComplete方法。</p>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：4_结合操作之7_switch]]></title>
      <url>http://sherlockshi.github.io/2016/10/16/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A4_%E7%BB%93%E5%90%88%E6%93%8D%E4%BD%9C%E4%B9%8B7_switch/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>将一个发射多个Observables的Observable转换成另一个单独的Observable，后者发射那些Observables最近发射的数据项。</p>
<a id="more"></a>
<p>Switch订阅一个发射多个Observables的Observable。它每次观察那些Observables中的一个，Switch返回的这个Observable取消订阅前一个发射数据的Observable，开始发射最近的Observable发射的数据。注意：当原始Observable发射了一个新的Observable时（不是这个新的Observable发射了一条数据时），它将取消订阅之前的那个Observable。这意味着，在后来那个Observable产生之后到它开始发射数据之前的这段时间里，前一个Observable发射的数据将被丢弃（就像图例上的那个黄色圆圈一样）。</p>
<p>switch操作符在RxJava上的实现为switchOnNext,用来将一个发射多个小Observable的源Observable转化为一个Observable，然后发射这多个小Observable所发射的数据。</p>
<p>需要注意的就是，如果一个小的Observable正在发射数据的时候，源Observable又发射出一个新的小Observable，则前一个Observable发射的数据会被抛弃，直接发射新<br>的小Observable所发射的数据。可以看示意图中的黄色圆圈就被丢弃了。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-16/13716056.jpg" alt="switch"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Observable&lt;String&gt; <span class="title">createObserver</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                subscriber.onNext(index + <span class="string">"-"</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).subscribeOn(Schedulers.newThread());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">runSampleCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable.switchOnNext(Observable.create(</span><br><span class="line">            <span class="keyword">new</span> Observable.OnSubscribe&lt;Observable&lt;String&gt;&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Observable&lt;String&gt;&gt; subscriber)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                        subscriber.onNext(createObserver(i));</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    ))</span><br><span class="line">            .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onNext: "</span> + s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span>-<span class="number">1</span></span><br><span class="line">onNext: <span class="number">1</span>-<span class="number">2</span></span><br><span class="line">onNext: <span class="number">2</span>-<span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span>-<span class="number">2</span></span><br><span class="line">onNext: <span class="number">2</span>-<span class="number">3</span></span><br><span class="line">onNext: <span class="number">2</span>-<span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>可以看到使用siwtch的时候，第一个小Observable只发射出了两个数据，第二个小Observable就被源Observable发射出来了，所以其接下来的两个数据被丢弃。</p>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：4_结合操作之6_join]]></title>
      <url>http://sherlockshi.github.io/2016/10/16/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A4_%E7%BB%93%E5%90%88%E6%93%8D%E4%BD%9C%E4%B9%8B6_join/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>任何时候，只要在另一个Observable发射的数据定义的时间窗口内，这个Observable发射了一条数据，就结合两个Observable发射的数据。</p>
<a id="more"></a>
<p>Join操作符结合两个Observable发射的数据，基于时间窗口（你定义的针对每条数据特定的原则）选择待集合的数据项。你将这些时间窗口实现为一些Observables，它们的生命周期从任何一条Observable发射的每一条数据开始。当这个定义时间窗口的Observable发射了一条数据或者完成时，与这条数据关联的窗口也会关闭。只要这条数据的窗口是打开的，它将继续结合其它Observable发射的任何数据项。你定义一个用于结合数据的函数。</p>
<p>join默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-16/2983237.jpg" alt="join"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">Observable create1 = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            subscriber.onNext(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">600</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                subscriber.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribeOn(Schedulers.newThread());</span><br><span class="line"></span><br><span class="line">Observable create2 = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            subscriber.onNext(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                subscriber.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribeOn(Schedulers.newThread());</span><br><span class="line"></span><br><span class="line">create1.join(create2,</span><br><span class="line">        <span class="keyword">new</span> Func1&lt;Integer, Observable&lt;Long&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Long&gt; <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Observable.timer(<span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">new</span> Func1&lt;Integer, Observable&lt;Long&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Long&gt; <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Observable.timer(<span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">new</span> Func2&lt;Integer, Integer, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Integer integer1, Integer integer2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> integer1 + <span class="string">"-"</span> + integer2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onNext: "</span> + s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span>-<span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span>-<span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span>-<span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span>-<span class="number">1</span></span><br><span class="line">onNext: <span class="number">3</span>-<span class="number">1</span></span><br><span class="line">onNext: <span class="number">3</span>-<span class="number">2</span></span><br><span class="line">onNext: <span class="number">2</span>-<span class="number">2</span></span><br><span class="line">onNext: <span class="number">4</span>-<span class="number">2</span></span><br><span class="line">onNext: <span class="number">4</span>-<span class="number">3</span></span><br><span class="line">onNext: <span class="number">5</span>-<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>注意点：<br>join()方法有4个参数：</p>
<ol>
<li>Observable<tright> right：目标Observable，也可以称为右Observable；与之相对应的是源Observable，也可以称为左Observable。</tright></li>
<li>rx.functions.Func1<t, observable<tleftduration="">&gt; leftDurationSelector：左Observable发射的数据的有效期。</t,></li>
<li>rx.functions.Func1<tright, observable<trightduration="">&gt; rightDurationSelector：右Observable发射的数据的有效期。</tright,></li>
<li>rx.functions.Func2<t, tright,="" r=""> resultSelector)：左Observable和右Observable发射的数据的结合方法。</t,></li>
</ol>
<p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/d6_join2.jpg" alt="join2"></p>
<p>这个方法比较难理解的地方在于中间两个有效期参数，比如上面的例子，左Observable每隔0.6秒发射一个数字，从0-5；右Observable每隔1秒发射一个数字，从0-3；结合上面的例子和示意图，在每一个Observable发射数据的时候：</p>
<ol>
<li>0.0s时：<code>源Observable</code>和<code>目标Observable</code>都发射0，这时结合后的数据为：0-0；</li>
<li>0.6s时：<code>源Observable</code>发射1，这时会去寻找<code>目标Observable</code>有没有在有效期内的数据，发现<code>目标Observable</code>的0在有效期内，所以结合后的数据为：1-0；</li>
<li>1.0s时：<code>目标Observable</code>发射1，这时会去寻找<code>源Observable</code>有没有在有效期内的数据，发现<code>源Observable</code>的1在有效期内，所以结合后的数据为：1-1；</li>
<li>…</li>
</ol>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>跟join相关的操作符还有：</p>
<ul>
<li>groupJoin</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：4_结合操作之5_combineLatest]]></title>
      <url>http://sherlockshi.github.io/2016/10/16/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A4_%E7%BB%93%E5%90%88%E6%93%8D%E4%BD%9C%E4%B9%8B5_combineLatest/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>当两个Observables中的任何一个发射了数据时，使用一个函数结合每个Observable发射的最近数据项，并且基于这个函数的结果发射数据。</p>
<a id="more"></a>
<p>CombineLatest操作符行为类似于zip，但是只有当原始的Observable中的每一个都发射了一条数据时zip才发射数据。CombineLatest则在原始的Observable中任意一个发射了数据时发射一条数据。当原始Observables的任何一个发射了一条数据时，CombineLatest使用一个函数结合它们最近发射的数据，然后发射这个函数的返回值。</p>
<p>RxJava将这个操作符实现为combineLatest，它接受二到九个Observable作为参数，或者单个Observables列表作为参数。它默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-16/66885037.jpg" alt="combineLatest"></p>
<p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-16/41051398.jpg" alt="combineLatest2"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Observable create1 = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            subscriber.onNext(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                subscriber.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribeOn(Schedulers.newThread());</span><br><span class="line"></span><br><span class="line">Observable create2 = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            subscriber.onNext(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">600</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                subscriber.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribeOn(Schedulers.newThread());</span><br><span class="line"></span><br><span class="line">subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext: "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Observable.combineLatest(create1, create2, <span class="keyword">new</span> Func2&lt;Integer, Integer, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Integer integer1, Integer integer2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> integer1 + <span class="string">"-"</span> + integer2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(subscriber);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span>-<span class="number">0</span></span><br><span class="line">onNext: <span class="number">0</span>-<span class="number">1</span></span><br><span class="line">onNext: <span class="number">1</span>-<span class="number">1</span></span><br><span class="line">onNext: <span class="number">1</span>-<span class="number">2</span></span><br><span class="line">onNext: <span class="number">2</span>-<span class="number">2</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<p>注意点：<br>create操作符生成数据，需在新的线程上执行，否则会出现先发射完第一个create的数据，再发射第二个create的数据。</p>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>combineLatest操作符还有以下变体：</p>
<ul>
<li>combineLatest(List,FuncN)</li>
<li>combineLatest(Observable,Observable,Func2)</li>
</ul>
<p>跟combineLatest相关的操作符还有：</p>
<ul>
<li>withLatestFrom</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：4_结合操作之4_andThenWhen]]></title>
      <url>http://sherlockshi.github.io/2016/10/16/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A4_%E7%BB%93%E5%90%88%E6%93%8D%E4%BD%9C%E4%B9%8B4_andThenWhen/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>使用Pattern和Plan作为中介，将两个或多个Observable发射的数据集合并到一起。</p>
<a id="more"></a>
<p>And/Then/When操作符组合的行为类似于zip，但是它们使用一个中间数据结构。接受两个或多个Observable，一次一个将它们的发射物合并到Pattern对象，然后操作那个Pattern对象，变换为一个Plan。随后将这些Plan变换为Observable的发射物。</p>
<p>它们属于rxjava-joins模块，不是核心RxJava包的一部分。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-16/54787690.jpg" alt="and/then/when"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><p>由于start操作符是属于可选的rxjava-joins模块的，所以需要加入下面的依赖：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.reactivex:rxjava-joins:0.22.0'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Observable just1 = Observable.just(<span class="string">"A"</span>, <span class="string">"B"</span>);</span><br><span class="line">Observable just2 = Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Pattern2&lt;String, Integer&gt; pattern = JoinObservable.from(just1).and(just2);</span><br><span class="line">Plan0 plan = pattern.then(<span class="keyword">new</span> Func2&lt;String, Integer, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s, Integer integer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s + integer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">JoinObservable.when(plan)</span><br><span class="line">    .toObservable()</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onNext: A1</span><br><span class="line">onNext: B2</span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<p>and/then/when操作符实现的效果跟zip一样。相较之下，zip会更简单易用，但是如果是一些zip满足不了的场景，一些比较复杂的架构，就需要用and/then/when操作符来实现了。</p>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：4_结合操作之3_zip]]></title>
      <url>http://sherlockshi.github.io/2016/10/16/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A4_%E7%BB%93%E5%90%88%E6%93%8D%E4%BD%9C%E4%B9%8B3_zip/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>通过一个函数将多个Observables的发射物结合到一起，基于这个函数的结果为每个结合体发射单个数据项。</p>
<a id="more"></a>
<p>Zip操作符返回一个Obversable，它使用这个函数按顺序结合两个或多个Observables发射的数据项，然后它发射这个函数返回的结果。它按照严格的顺序应用这个函数。它只发射与发射数据项最少的那个Observable一样多的数据。</p>
<p>RxJava将这个操作符实现为zip和zipWith。</p>
<p>zip的最后一个参数接受每个Observable发射的一项数据，返回被压缩后的数据，它可以接受一到九个参数：一个Observable序列，或者一些发射Observable的Observables。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-16/30827538.jpg" alt="zip"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Observable just11 = Observable.just(<span class="string">"A"</span>, <span class="string">"B"</span>);</span><br><span class="line">Observable just21 = Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Observable.zip(just11, just21, <span class="keyword">new</span> Func2&lt;String, Integer, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String string, Integer integer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> string + integer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onNext: A1</span><br><span class="line">onNext: B2</span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>zip操作符还有以下变体：</p>
<ul>
<li>zip(Iterable,FuncN)</li>
<li>zip(Observable,FuncN)</li>
<li>zip(Observable,Observable,Func2)(最多可以有九个Observables参数)</li>
</ul>
<p>跟zip相关的操作符还有：</p>
<ul>
<li>zipWith(Observable,Func2)</li>
<li>zipWith(Iterable,Func2)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：4_结合操作之2_merge]]></title>
      <url>http://sherlockshi.github.io/2016/10/16/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A4_%E7%BB%93%E5%90%88%E6%93%8D%E4%BD%9C%E4%B9%8B2_merge/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>合并多个Observables的发射物。</p>
<a id="more"></a>
<p>使用Merge操作符你可以将多个Observables的输出合并，就好像它们是一个单个的Observable一样。</p>
<p>Merge可能会让合并的Observables发射的数据交错（有一个类似的操作符Concat不会让数据交错，它会按顺序一个接着一个发射多个Observables的发射物）。</p>
<p>正如图例上展示的，任何一个原始Observable的onError通知会被立即传递给观察者，而且会终止合并后的Observable。</p>
<p>在很多ReactiveX实现中还有一个叫MergeDelayError的操作符，它的行为有一点不同，它会保留onError通知直到合并后的Observable所有的数据发射完成，在那时它才会把onError传递给观察者。</p>
<p>RxJava将它实现为merge, mergeWith和mergeDelayError。</p>
<p>除了传递多个Observable给merge，你还可以传递一个Observable列表List，数组，甚至是一个发射Observable序列的Observable，merge将合并它们的输出作为单个Observable的输出。</p>
<p>如果你传递一个发射Observables序列的Observable，你可以指定merge应该同时订阅的Observable’的最大数量。一旦达到订阅数的限制，它将不再订阅原始Observable发射的任何其它Observable，直到某个已经订阅的Observable发射了onCompleted通知。</p>
<p>merge是静态方法，mergeWith是对象方法，举个例子，Observable.merge(odds,evens)等价于odds.mergeWith(evens)。</p>
<p>如果传递给merge的任何一个的Observable发射了onError通知终止了，merge操作符生成的Observable也会立即以onError通知终止。如果你想让它继续发射数据，在最后才报告错误，可以使用mergeDelayError。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-16/89649838.jpg" alt="merge"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Observable just1 = Observable.just(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">Observable just2 = Observable.just(<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">Observable.merge(just1, just2)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">6</span></span><br><span class="line">onNext: <span class="number">7</span></span><br><span class="line">onNext: <span class="number">8</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>merge操作符还有以下变体：</p>
<ul>
<li>merge(Iterable)</li>
<li>merge(Iterable,int)</li>
<li>merge(Observable[])</li>
<li>merge(Observable,Observable)</li>
<li>merge(Observable)</li>
<li>merge(Observable,int)</li>
</ul>
<p>跟merge相关的操作符还有：</p>
<ul>
<li>mergeDelayError(Observable)</li>
<li>mergeDelayError(Observable,Observable)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：4_结合操作之1_startWith]]></title>
      <url>http://sherlockshi.github.io/2016/10/16/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A4_%E7%BB%93%E5%90%88%E6%93%8D%E4%BD%9C%E4%B9%8B1_startWith/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>在数据序列的开头插入一条指定的项。</p>
<a id="more"></a>
<p>如果你想要一个Observable在发射数据之前先发射一个指定的数据序列，可以使用StartWith操作符。（如果你想一个Observable发射的数据末尾追加一个数据序列可以使用Concat操作符。）</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-16/43608671.jpg" alt="startWith"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    .startWith(<span class="number">9</span>, <span class="number">8</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError:"</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext:"</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">9</span></span><br><span class="line">onNext: <span class="number">8</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：3_过滤操作之12_ignoreElements]]></title>
      <url>http://sherlockshi.github.io/2016/10/16/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A3_%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E4%B9%8B12_ignoreElements/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>不发射任何数据，只发射Observable的终止通知。</p>
<a id="more"></a>
<p>IgnoreElements操作符抑制原始Observable发射的所有数据，只允许它的终止通知（onError或onCompleted）通过。</p>
<p>如果你不关心一个Observable发射的数据，但是希望在它完成时或遇到错误终止时收到通知，你可以对Observable使用ignoreElements操作符，它会确保永远不会调用观察者的onNext()方法。</p>
<p>ignoreElements默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-14/28362389.jpg" alt="ignoreElements"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    .ignoreElements()</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError:"</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext:"</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：3_过滤操作之11_distinct]]></title>
      <url>http://sherlockshi.github.io/2016/10/16/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A3_%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E4%B9%8B11_distinct/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>抑制（过滤掉）重复的数据项。</p>
<a id="more"></a>
<p>Distinct的过滤规则是：只允许还没有发射过的数据项通过。</p>
<p>在某些实现中，有一些变体允许你调整判定两个数据不同(distinct)的标准。还有一些实现只比较一项数据和它的直接前驱，因此只会从序列中过滤掉连续重复的数据。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-14/75124817.jpg" alt="distinct"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    .distinct()</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError:"</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext:"</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>distinct操作符还有以下变体：</p>
<ul>
<li>distinct(Func1)</li>
</ul>
<p>跟distinct相关的操作符还有：</p>
<ul>
<li>distinctUntilChanged</li>
<li>distinctUntilChanged(Func1)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：3_过滤操作之10_debounce]]></title>
      <url>http://sherlockshi.github.io/2016/10/16/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A3_%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E4%B9%8B10_debounce/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>仅在过了一段指定的时间还没发射数据时才发射一个数据。</p>
<a id="more"></a>
<p>Debounce操作符会过滤掉发射速率过快的数据项。</p>
<p>RxJava将这个操作符实现为throttleWithTimeout和debounce。</p>
<p>注意：这个操作符会会接着最后一项数据发射原始Observable的onCompleted通知，即使这个通知发生在你指定的时间窗口内（从最后一项数据的发射算起）。也就是说，onCompleted通知不会触发限流。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-14/68156611.jpg" alt="debounce"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(subscriber.isUnsubscribed()) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//产生结果的间隔时间分别为100、200、300...900毫秒</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                subscriber.onNext(i);</span><br><span class="line">                Thread.sleep(i * <span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            subscriber.onCompleted();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            subscriber.onError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .subscribeOn(Schedulers.newThread())</span><br><span class="line">    .debounce(<span class="number">400</span>, TimeUnit.MILLISECONDS)  <span class="comment">//超时时间为400毫秒</span></span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError:"</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext:"</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>由于1-4这四个数值，间隔时间（分别为100ms，200ms，300ms，400ms）均不大于debounce限制的值（400ms），所以均被过滤掉，只有后面发射的时间间隔大于400ms的（分别为500ms-900ms），才会正常发射。</p>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">5</span></span><br><span class="line">onNext: <span class="number">6</span></span><br><span class="line">onNext: <span class="number">7</span></span><br><span class="line">onNext: <span class="number">8</span></span><br><span class="line">onNext: <span class="number">9</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>跟debounce相关的操作符还有：</p>
<ul>
<li>throttleWithTimeout(long,TimeUnit) 和 debounce(long,TimeUnit)</li>
<li>throttleWithTimeout(long,TimeUnit,Scheduler) 和 debounce(long,TimeUnit,Scheduler)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：3_过滤操作之9_sample]]></title>
      <url>http://sherlockshi.github.io/2016/10/15/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A3_%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E4%B9%8B9_sample/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>定期发射Observable最近发射的数据项。</p>
<a id="more"></a>
<p>Sample操作符定时查看一个Observable，然后发射自上次采样以来它最近发射的数据。</p>
<p>在某些实现中，有一个ThrottleFirst操作符的功能类似，但不是发射采样期间的最近的数据，而是发射在那段时间内的第一项数据。</p>
<p>RxJava将这个操作符实现为sample和throttleLast。</p>
<p>注意：如果自上次采样以来，原始Observable没有发射任何数据，这个操作返回的Observable在那段时间内也不会发射任何数据。</p>
<p>sample(别名throttleLast)的一个变体按照你参数中指定的时间间隔定时采样（TimeUnit指定时间单位）。</p>
<p>sample的这个变体默认在computation调度器上执行，但是你可以使用第三个参数指定其它的调度器。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-14/30062747.jpg" alt="sample"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">runSampleCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable observable = Observable.interval(<span class="number">1000</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">            .sample(<span class="number">2200</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    subscriber = <span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onNext: "</span> + aLong);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">    observable.subscribe(subscriber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (subscriber != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; !subscriber.isUnsubscribed()) &#123;</span><br><span class="line">        subscriber.unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">5</span></span><br><span class="line">onNext: <span class="number">7</span></span><br><span class="line">onNext: <span class="number">9</span></span><br><span class="line">onNext: <span class="number">12</span></span><br><span class="line">(...)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>sample操作符还有以下变体：</p>
<ul>
<li>sample(long,TimeUnit) 和 throttleLast(long,TimeUnit)</li>
<li>sample(long,TimeUnit,Scheduler) 和 throttleLast(long,TimeUnit,Scheduler)</li>
<li>sample(Observable)</li>
</ul>
<p>跟sample相关的操作符还有：</p>
<ul>
<li>throttleFirst(long,TimeUnit)</li>
<li>throttleFirst(long,TimeUnit,Scheduler)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：3_过滤操作之8_elementAt]]></title>
      <url>http://sherlockshi.github.io/2016/10/15/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A3_%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E4%B9%8B8_elementAt/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>只发射第N项数据。</p>
<a id="more"></a>
<p>ElementAt操作符获取原始Observable发射的数据序列指定索引位置的数据项，然后当做自己的唯一数据发射。</p>
<p>RxJava将这个操作符实现为elementAt，给它传递一个基于0的索引值，它会发射原始Observable数据序列对应索引位置的值，如果你传递给elementAt的值为5，那么它会发射第六项的数据。</p>
<p>如果你传递的是一个负数，或者原始Observable的数据项数小于index+1，将会抛出一个IndexOutOfBoundsException异常。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-14/16205063.jpg" alt="elementAt"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    .elementAt(<span class="number">3</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>跟elementAt相关的操作符还有：</p>
<ul>
<li>elementAtOrDefault(int,T)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：3_过滤操作之7_first]]></title>
      <url>http://sherlockshi.github.io/2016/10/15/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A3_%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E4%B9%8B7_first/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>只发射第一项（或者满足某个条件的第一项）数据。</p>
<a id="more"></a>
<p>如果你只对Observable发射的第一项数据，或者满足某个条件的第一项数据感兴趣，你可以使用First操作符。</p>
<p>在某些实现中，First没有实现为一个返回Observable的过滤操作符，而是实现为一个在当时就发射原始Observable指定数据项的阻塞函数。在这些实现中，如果你想要的是一个过滤操作符，最好使用Take(1)或者ElementAt(0)。</p>
<p>在一些实现中还有一个Single操作符。它的行为与First类似，但为了确保只发射单个值，它会等待原始Observable终止（否则，不是发射那个值，而是以一个错误通知终止）。你可以使用它从原始Observable获取第一项数据，而且也确保只发射一项数据。</p>
<p>在RxJava中，这个操作符被实现为first，firstOrDefault和takeFirst。</p>
<p>可能容易混淆，BlockingObservable也有名叫first和firstOrDefault的操作符，它们会阻塞并返回值，不是立即返回一个Observable。</p>
<p>还有几个其它的操作符执行类似的功能。</p>
<p>只发射第一个数据，使用没有参数的first操作符。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-14/24965980.jpg" alt="first"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    .first()</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>first操作符还有以下变体：</p>
<ul>
<li>first(Func1)</li>
</ul>
<p>跟first相关的操作符还有：</p>
<ul>
<li>firstOrDefault(T)</li>
<li>firstOrDefault(T, Func1)</li>
<li>takeFirst(Func1)</li>
<li>single()</li>
<li>single(Func1)</li>
<li>singleOrDefault(T)</li>
<li>singleOrDefault(Func1,T)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：3_过滤操作之6_take]]></title>
      <url>http://sherlockshi.github.io/2016/10/15/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A3_%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E4%B9%8B6_take/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>只发射前面的N项数据。</p>
<a id="more"></a>
<p>使用Take操作符让你可以修改Observable的行为，只返回前面的N项数据，然后发射完成通知，忽略剩余的数据。</p>
<p>如果你对一个Observable使用take(n)（或它的同义词limit(n)）操作符，而那个Observable发射的数据少于N项，那么take操作生成的Observable不会抛异常或发射onError通知，在完成前它只会发射相同的少量数据。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-14/37254316.jpg" alt="take"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    .take(<span class="number">3</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>take操作符还有以下变体：</p>
<ul>
<li>take(long,TimeUnit)</li>
<li>take(long,TimeUnit,Scheduler)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：3_过滤操作之5_skipLast]]></title>
      <url>http://sherlockshi.github.io/2016/10/15/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A3_%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E4%B9%8B5_skipLast/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>抑制Observable发射的后N项数据。</p>
<a id="more"></a>
<p>使用SkipLast操作符修改原始Observable，你可以忽略Observable发射的后N项数据，只保留前面的数据。</p>
<p>使用SkipLast操作符，你可以忽略原始Observable发射的后N项数据，只保留之前的数据。注意：这个机制是这样实现的：延迟原始Observable发射的任何数据项，直到它发射了N项数据。</p>
<p>skipLast的这个变体默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-14/35247845.jpg" alt="skipLast"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    .skipLast(<span class="number">3</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>skipLast操作符还有以下变体：</p>
<ul>
<li>skipLast(long,TimeUnit)</li>
<li>skipLast(long,TimeUnit,Scheduler)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：3_过滤操作之4_skip]]></title>
      <url>http://sherlockshi.github.io/2016/10/15/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A3_%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E4%B9%8B4_skip/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>抑制Observable发射的前N项数据。</p>
<a id="more"></a>
<p>使用Skip操作符，你可以忽略Observable发射的前N项数据，只保留之后的数据。</p>
<p>skip的这个变体默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-14/68766067.jpg" alt="skip"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    .skip(<span class="number">3</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onNext: <span class="number">5</span></span><br><span class="line">onNext: <span class="number">6</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>skip操作符还有以下变体：</p>
<ul>
<li>skip(long,TimeUnit)</li>
<li>skip(long,TimeUnit,Scheduler)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：3_过滤操作之3_last]]></title>
      <url>http://sherlockshi.github.io/2016/10/15/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A3_%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E4%B9%8B3_last/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>只发射最后一项（或者满足某个条件的最后一项）数据。</p>
<a id="more"></a>
<p>如果你只对Observable发射的最后一项数据，或者满足某个条件的最后一项数据感兴趣，你可以使用Last操作符。</p>
<p>在某些实现中，Last没有实现为一个返回Observable的过滤操作符，而是实现为一个在当时就发射原始Observable指定数据项的阻塞函数。在这些实现中，如果你想要的是一个过滤操作符，最好使用TakeLast(1)。</p>
<p>在RxJava中的实现是last和lastOrDefault。</p>
<p>可能容易混淆，BlockingObservable也有名叫last和lastOrDefault的操作符，它们会阻塞并返回值，不是立即返回一个Observable。</p>
<p>只发射最后一项数据，使用没有参数的last操作符。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-14/82142807.jpg" alt="last"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    .last()</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">6</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>last操作符还有以下变体：</p>
<ul>
<li>last(Func1)</li>
</ul>
<p>跟last相关的操作符还有：</p>
<ul>
<li>lastOrDefault(T)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：3_过滤操作之2_takeLast]]></title>
      <url>http://sherlockshi.github.io/2016/10/15/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A3_%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E4%B9%8B2_takeLast/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>发射Observable发射的最后N项数据。</p>
<a id="more"></a>
<p>使用TakeLast操作符修改原始Observable，你可以只发射Observable发射的后N项数据，忽略前面的数据。</p>
<p>使用takeLast操作符，你可以只发射原始Observable发射的后N项数据，忽略之前的数据。注意：这会延迟原始Observable发射的任何数据项，直到它全部完成。</p>
<p>takeLast的这个变体默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-14/25298869.jpg" alt="takeLast"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    .takeLast(<span class="number">3</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onNext: <span class="number">5</span></span><br><span class="line">onNext: <span class="number">6</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>本操作符还有以下变体：</p>
<ul>
<li>takeLast(int, long, TimeUnit)</li>
</ul>
<p>相关的操作符还有：</p>
<ul>
<li>takeLastBuffer</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：3_过滤操作之1_filter]]></title>
      <url>http://sherlockshi.github.io/2016/10/14/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A3_%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E4%B9%8B1_filter/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>只发射通过了谓词测试的数据项。</p>
<a id="more"></a>
<p>Filter操作符使用你指定的一个谓词函数测试数据项，只有通过测试的数据才会被发射。</p>
<p>filter默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-14/74081725.jpg" alt="filter"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    .filter(<span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> integer &lt; <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>跟filter相关的操作符还有：</p>
<ul>
<li>ofType</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：2_变换操作之6_window]]></title>
      <url>http://sherlockshi.github.io/2016/10/14/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A2_%E5%8F%98%E6%8D%A2%E6%93%8D%E4%BD%9C%E4%B9%8B6_window/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>定期将来自原始Observable的数据分解为一个Observable窗口，发射这些窗口，而不是每次发射一项数据。</p>
<a id="more"></a>
<p>Window和Buffer类似，但不是发射来自原始Observable的数据包，它发射的是Observables，这些Observables中的每一个都发射原始Observable数据的一个子集，最后发射一个onCompleted通知。</p>
<p>和Buffer一样，Window有很多变体，每一种都以自己的方式将原始Observable分解为多个作为结果的Observable，每一个都包含一个映射原始数据的window。用Window操作符的术语描述就是，当一个窗口打开(when a window “opens”)意味着一个新的Observable已经发射（产生）了，而且这个Observable开始发射来自原始Observable的数据；当一个窗口关闭(when a window “closes”)意味着发射(产生)的Observable停止发射原始Observable的数据，并且发射终止通知onCompleted给它的观察者们。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-13/17024314.jpg" alt="window"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><p>window操作符与buffer操作符类似，区别在于buffer操作符产生的结果是一个List缓存，而window操作符产生的结果是一个Observable,订阅者可以对这个结果Observable重新进行订阅处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整流程版</span></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line">    .window(<span class="number">3</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Observable&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Observable&lt;Integer&gt; integerObservable)</span> </span>&#123;</span><br><span class="line">            integerObservable.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onCompleted(inner)."</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onError(inner): "</span> + e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化版</span></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line">    .window(<span class="number">3</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Observable&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Observable&lt;Integer&gt; integerObservable)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"start"</span>);</span><br><span class="line"></span><br><span class="line">            integerObservable.subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(完整流程版)</span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onCompleted(inner).</span><br><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onNext: <span class="number">5</span></span><br><span class="line">onNext: <span class="number">6</span></span><br><span class="line">onCompleted(inner).</span><br><span class="line">onNext: <span class="number">7</span></span><br><span class="line">onNext: <span class="number">8</span></span><br><span class="line">onCompleted(inner).</span><br><span class="line">onCompleted.</span><br><span class="line"></span><br><span class="line">(简化版)</span><br><span class="line">start</span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">start</span><br><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onNext: <span class="number">5</span></span><br><span class="line">onNext: <span class="number">6</span></span><br><span class="line">start</span><br><span class="line">onNext: <span class="number">7</span></span><br><span class="line">onNext: <span class="number">8</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>在RxJava中有许多window的变体：</p>
<ul>
<li>window(closingSelector)</li>
<li>window(windowOpenings, closingSelector)</li>
<li>window(count)</li>
<li>window(count, skip)</li>
<li>window(timespan, unit[, scheduler])</li>
<li>window(timespan, unit, count[, scheduler])</li>
<li>window(timespan, timeshift, unit[, scheduler])</li>
<li>window-backpressure</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：2_变换操作之5_buffer]]></title>
      <url>http://sherlockshi.github.io/2016/10/14/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A2_%E5%8F%98%E6%8D%A2%E6%93%8D%E4%BD%9C%E4%B9%8B5_buffer/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>定期收集Observable的数据放进一个数据包裹，然后发射这些数据包裹，而不是一次发射一个值。</p>
<a id="more"></a>
<p>Buffer操作符将一个Observable变换为另一个，原来的Observable正常发射数据，变换产生的Observable发射这些数据的缓存集合。Buffer操作符在很多语言特定的实现中有很多种变体，它们在如何缓存这个问题上存在区别。</p>
<p>注意：如果原来的Observable发射了一个onError通知，Buffer会立即传递这个通知，而不是首先发射缓存的数据，即使在这之前缓存中包含了原始Observable发射的数据。</p>
<p>Window操作符与Buffer类似，但是它在发射之前把收集到的数据放进单独的Observable，而不是放进一个数据结构。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-13/51651625.jpg" alt="buffer"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><p>buffer操作符有两个参数，分别为count和skip，count参数指定buffer操作符的大小，skip参数用来指定每次发射一个集合需要跳过几个数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line">    .buffer(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;Integer&gt; integers)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onNext: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">onNext: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">onNext: [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">onNext: [<span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>在RxJava中有许多Buffer的变体：</p>
<ul>
<li>buffer(count)</li>
<li>buffer(count, skip)</li>
<li>buffer(bufferClosingSelector)</li>
<li>buffer(boundary)</li>
<li>buffer(bufferOpenings, bufferClosingSelector)</li>
<li>buffer(timespan, unit[, scheduler])</li>
<li>buffer(timespan, unit, count[, scheduler])</li>
<li>buffer(timespan, timeshift, unit[, scheduler])</li>
<li>buffer-backpressure</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<p><a href="http://www.jianshu.com/p/8b9e987e6789" target="_blank" rel="external">http://www.jianshu.com/p/8b9e987e6789</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：2_变换操作之4_groupBy]]></title>
      <url>http://sherlockshi.github.io/2016/10/14/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A2_%E5%8F%98%E6%8D%A2%E6%93%8D%E4%BD%9C%E4%B9%8B4_groupBy/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>将一个Observable分拆为一些Observables集合，它们中的每一个发射原始Observable的一个子序列。</p>
<a id="more"></a>
<p>GroupBy操作符将原始Observable分拆为一些Observables集合，它们中的每一个发射原始Observable数据序列的一个子序列。哪个数据项由哪一个Observable发射是由一个函数判定的，这个函数给每一项指定一个Key，Key相同的数据会被同一个Observable发射。</p>
<p>RxJava实现了groupBy操作符。它返回Observable的一个特殊子类GroupedObservable，实现了GroupedObservable接口的对象有一个额外的方法getKey，这个Key用于将数据分组到指定的Observable。</p>
<p>有一个版本的groupBy允许你传递一个变换函数，这样它可以在发射结果GroupedObservable之前改变数据项。</p>
<p>注意：groupBy将原始Observable分解为一个发射多个GroupedObservable的Observable，一旦有订阅，每个GroupedObservable就开始缓存数据。因此，如果你忽略这些GroupedObservable中的任何一个，这个缓存可能形成一个潜在的内存泄露。因此，如果你不想观察，也不要忽略GroupedObservable。你应该使用像take(0)这样会丢弃自己的缓存的操作符。</p>
<p>如果你取消订阅一个GroupedObservable，那个Observable将会终止。如果之后原始的Observable又发射了一个与这个Observable的Key匹配的数据，groupBy将会为这个Key创建一个新的GroupedObservable。</p>
<p>groupBy默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-13/48350963.jpg" alt="groupBy"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整流程版</span></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    .groupBy(<span class="keyword">new</span> Func1&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> integer % <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;GroupedObservable&lt;Integer, Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(<span class="keyword">final</span> GroupedObservable&lt;Integer, Integer&gt; result)</span> </span>&#123;</span><br><span class="line">            result.subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onCompleted(inner)."</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onError(inner): "</span> + e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"onNext: Key="</span> + result.getKey() + <span class="string">", Value="</span> + integer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化版</span></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    .groupBy(<span class="keyword">new</span> Func1&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> integer % <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;GroupedObservable&lt;Integer, Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(<span class="keyword">final</span> GroupedObservable&lt;Integer, Integer&gt; result)</span> </span>&#123;</span><br><span class="line">            result.subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"Key="</span> + result.getKey() + <span class="string">", Value="</span> + integer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(完整流程版)</span><br><span class="line">onNext: Key=<span class="number">1</span>, Value=<span class="number">1</span></span><br><span class="line">onNext: Key=<span class="number">2</span>, Value=<span class="number">2</span></span><br><span class="line">onNext: Key=<span class="number">0</span>, Value=<span class="number">3</span></span><br><span class="line">onNext: Key=<span class="number">1</span>, Value=<span class="number">4</span></span><br><span class="line">onNext: Key=<span class="number">2</span>, Value=<span class="number">5</span></span><br><span class="line">onCompleted(inner).</span><br><span class="line">onCompleted(inner).</span><br><span class="line">onCompleted(inner).</span><br><span class="line">onCompleted.</span><br><span class="line"></span><br><span class="line">(简化版)</span><br><span class="line">Key=<span class="number">1</span>, Value=<span class="number">1</span></span><br><span class="line">Key=<span class="number">2</span>, Value=<span class="number">2</span></span><br><span class="line">Key=<span class="number">0</span>, Value=<span class="number">3</span></span><br><span class="line">Key=<span class="number">1</span>, Value=<span class="number">4</span></span><br><span class="line">Key=<span class="number">2</span>, Value=<span class="number">5</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>groupBy操作符共有以下几个变体：</p>
<ul>
<li>groupBy(Func1)</li>
<li>groupBy(Func1,Func1)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：2_变换操作之3_scan]]></title>
      <url>http://sherlockshi.github.io/2016/10/14/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A2_%E5%8F%98%E6%8D%A2%E6%93%8D%E4%BD%9C%E4%B9%8B3_scan/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>连续地对数据序列的每一项应用一个函数，然后连续发射结果。</p>
<a id="more"></a>
<p>Scan操作符对原始Observable发射的第一项数据应用一个函数，然后将那个函数的结果作为自己的第一项数据发射。它将函数的结果同第二项数据一起填充给这个函数来产生它自己的第二项数据。它持续进行这个过程来产生剩余的数据序列。这个操作符在某些情况下被叫做accumulator。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-13/70639564.jpg" alt="scan"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    .scan(<span class="keyword">new</span> Func2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer sum, Integer item)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sum + item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">6</span></span><br><span class="line">onNext: <span class="number">10</span></span><br><span class="line">onNext: <span class="number">15</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>scan操作符共有以下几个变体：</p>
<ul>
<li>scan(Func2)</li>
<li>scan(R,Func2)</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：2_变换操作之2_flatMap]]></title>
      <url>http://sherlockshi.github.io/2016/10/14/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A2_%E5%8F%98%E6%8D%A2%E6%93%8D%E4%BD%9C%E4%B9%8B2_flatMap/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>FlatMap将一个发射数据的Observable变换为多个Observables，然后将它们发射的数据合并后放进一个单独的Observable。</p>
<a id="more"></a>
<p>FlatMap操作符使用一个指定的函数对原始Observable发射的每一项数据执行变换操作，这个函数返回一个本身也发射数据的Observable，然后FlatMap合并这些Observables发射的数据，最后将合并后的结果当做它自己的数据序列发射。</p>
<p>这个方法是很有用的，例如，当你有一个这样的Observable：它发射一个数据序列，这些数据本身包含Observable成员或者可以变换为Observable，因此你可以创建一个新的Observable发射这些次级Observable发射的数据的完整集合。</p>
<p>注意：FlatMap对这些Observables发射的数据做的是合并(merge)操作，因此它们可能是交错的。</p>
<p>在许多语言特定的实现中，还有一个操作符不会让变换后的Observables发射的数据交错，它按照严格的顺序发射这些数据，这个操作符通常被叫作ConcatMap或者类似的名字。</p>
<p>注意：如果任何一个通过这个flatMap操作产生的单独的Observable调用onError异常终止了，这个Observable自身会立即调用onError并终止。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-13/18883973.jpg" alt="flatMap"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; courses;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(List&lt;Course&gt; courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Course&gt; <span class="title">getCourses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> courses;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Student1 */</span></span><br><span class="line">Course course11 = <span class="keyword">new</span> Course(<span class="string">"C#"</span>);</span><br><span class="line">Course course12 = <span class="keyword">new</span> Course(<span class="string">"Java"</span>);</span><br><span class="line">Course course13 = <span class="keyword">new</span> Course(<span class="string">"Python"</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Course&gt; courses1 = <span class="keyword">new</span> ArrayList&lt;Course&gt;();</span><br><span class="line">courses1.add(course11);</span><br><span class="line">courses1.add(course12);</span><br><span class="line">courses1.add(course13);</span><br><span class="line"></span><br><span class="line">Student student1 = <span class="keyword">new</span> Student(courses1);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Student2 */</span></span><br><span class="line">Course course21 = <span class="keyword">new</span> Course(<span class="string">"OC"</span>);</span><br><span class="line">Course course22 = <span class="keyword">new</span> Course(<span class="string">"Ruby"</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Course&gt; courses2 = <span class="keyword">new</span> ArrayList&lt;Course&gt;();</span><br><span class="line">courses2.add(course21);</span><br><span class="line">courses2.add(course22);</span><br><span class="line"></span><br><span class="line">Student student2 = <span class="keyword">new</span> Student(courses2);</span><br><span class="line"></span><br><span class="line">Observable.just(student1, student2)</span><br><span class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;Student, Observable&lt;Course&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;Course&gt; <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.from(student.getCourses());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Course&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Course course)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + course.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onNext: C#</span><br><span class="line">onNext: Java</span><br><span class="line">onNext: Python</span><br><span class="line">onNext: OC</span><br><span class="line">onNext: Ruby</span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>flatMap操作符共有以下几个变体：</p>
<ul>
<li>flatMap(Func1)</li>
<li>flatMap(Func1,int)</li>
<li>flatMap(Func1,Func1,Func0)</li>
<li>flatMap(Func1,Func1,Func0,int)</li>
<li>flatMap(Func1,Func2)</li>
<li>flatMap(Func1,Func2,int)</li>
</ul>
<p>跟flatMap相关的操作符还有：</p>
<ul>
<li>flatMapIterable</li>
<li>concatMap</li>
<li>switchMap</li>
<li>split</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：2_变换操作之1_map]]></title>
      <url>http://sherlockshi.github.io/2016/10/14/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A2_%E5%8F%98%E6%8D%A2%E6%93%8D%E4%BD%9C%E4%B9%8B1_map/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>对Observable发射的每一项数据应用一个函数，执行变换操作。</p>
<a id="more"></a>
<p>Map操作符对原始Observable发射的每一项数据应用一个你选择的函数，然后返回一个发射这些结果的Observable。</p>
<p>这个操作符默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-13/15294980.jpg" alt="map"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student student1 = <span class="keyword">new</span> Student(<span class="string">"ZhangSan"</span>);</span><br><span class="line">Student student2 = <span class="keyword">new</span> Student(<span class="string">"LiSi"</span>);</span><br><span class="line">Student student3 = <span class="keyword">new</span> Student(<span class="string">"WangWu"</span>);</span><br><span class="line"></span><br><span class="line">Observable.just(student1, student2, student3)</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Student, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> student.getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onNext: "</span> + s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onNext: ZhangSan</span><br><span class="line">onNext: LiSi</span><br><span class="line">onNext: WangWu</span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>跟map相关的操作符还有：</p>
<ul>
<li>cast</li>
<li>encode</li>
<li>byLine</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：1_创建操作之10_timer]]></title>
      <url>http://sherlockshi.github.io/2016/10/13/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A1_%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E4%B9%8B10_timer/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>创建一个Observable，它在一个给定的延迟后发射一个特殊的值。</p>
<a id="more"></a>
<p>Timer操作符创建一个在给定的时间段之后返回一个特殊值的Observable。</p>
<p>timer返回一个Observable，它在延迟一段给定的时间后发射一个简单的数字0。</p>
<p>timer操作符默认在computation调度器上执行。有一个变体可以通过可选参数指定Scheduler。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-12/21634951.jpg" alt="timer"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.timer(<span class="number">3</span>, TimeUnit.SECONDS)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + aLong);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><p>延时3秒后，打印出如下信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：1_创建操作之9_start]]></title>
      <url>http://sherlockshi.github.io/2016/10/13/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A1_%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E4%B9%8B9_start/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>返回一个Observable，它发射一个类似于函数声明的值。</p>
<a id="more"></a>
<p>编程语言有很多种方法可以从运算结果中获取值，它们的名字一般叫functions, futures, actions, callables, runnables等等。在Start目录下的这组操作符可以让它们表现得像Observable，因此它们可以在Observables调用链中与其它Observable搭配使用。</p>
<p>Start操作符的多种RxJava实现都属于可选的rxjava-async模块。</p>
<p>rxjava-async模块包含start操作符，它接受一个函数作为参数，调用这个函数获取一个值，然后返回一个会发射这个值给后续观察者的Observable。</p>
<p>注意：这个函数只会被执行一次，即使多个观察者订阅这个返回的Observable。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-12/11392141.jpg" alt="start"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><p>由于start操作符是属于可选的rxjava-async模块的，所以需要加入下面的依赖：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.reactivex:rxjava-async-util:0.21.0'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Async.start(<span class="keyword">new</span> Func0&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><p>延时5秒后，打印出如下信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">16</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>跟start相关的操作符还有：</p>
<ul>
<li>toAsync</li>
<li>startFuture</li>
<li>deferFuture</li>
<li>fromAction</li>
<li>fromCallable</li>
<li>fromRunnable</li>
<li>forEachFuture</li>
<li>runAsync</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：1_创建操作之8_repeat]]></title>
      <url>http://sherlockshi.github.io/2016/10/13/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A1_%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E4%B9%8B8_repeat/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>创建一个发射特定数据重复多次的Observable。</p>
<a id="more"></a>
<p>Repeat重复地发射数据。某些实现允许你重复的发射某个数据序列，还有一些允许你限制重复的次数。</p>
<p>RxJava将这个操作符实现为repeat方法。它不是创建一个Observable，而是重复发射原始Observable的数据序列，这个序列或者是无限的，或者通过repeat(n)指定重复次数。</p>
<p>repeat操作符默认在trampoline调度器上执行。有一个变体可以通过可选参数指定Scheduler。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-12/76909017.jpg" alt="repeat"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.range(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    .repeat(<span class="number">2</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>跟repeat相关的操作符还有：</p>
<ul>
<li>repeatWhen</li>
<li>doWhile</li>
<li>whileDo</li>
</ul>
<p>详情可查阅下面的参考资料。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：1_创建操作之7_range]]></title>
      <url>http://sherlockshi.github.io/2016/10/13/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A1_%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E4%B9%8B7_range/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>创建一个发射特定整数序列的Observable。</p>
<a id="more"></a>
<p>Range操作符发射一个范围内的有序整数序列，你可以指定范围的起始和长度。</p>
<p>RxJava将这个操作符实现为range函数，它接受两个参数，一个是范围的起始值，一个是范围的数据的数目。如果你将第二个参数设为0，将导致Observable不发射任何数据（如果设置为负数，会抛异常）。</p>
<p>range默认不在任何特定的调度器上执行。有一个变体可以通过可选参数指定Scheduler。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-12/89042002.jpg" alt="range"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.range(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onNext: <span class="number">5</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：1_创建操作之6_just]]></title>
      <url>http://sherlockshi.github.io/2016/10/13/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A1_%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E4%B9%8B6_just/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>创建一个发射指定值的Observable。</p>
<a id="more"></a>
<p>Just将单个数据转换为发射那个数据的Observable。</p>
<p>Just类似于From，但是From会将数组或Iterable的数据取出然后逐个发射，而Just只是简单的原样发射，将数组或Iterable当做单个数据。</p>
<p>注意：如果你传递null给Just，它会返回一个发射null值的Observable。不要误认为它会返回一个空Observable（完全不发射任何数据的Observable），如果需要空Observable你应该使用Empty操作符。</p>
<p>RxJava将这个操作符实现为just函数，它接受一至九个参数，返回一个按参数列表顺序发射这些数据的Observable。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-12/34976641.jpg" alt="just"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：1_创建操作之5_interval]]></title>
      <url>http://sherlockshi.github.io/2016/10/13/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A1_%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E4%B9%8B5_interval/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>创建一个按固定时间间隔发射整数序列的Observable。</p>
<a id="more"></a>
<p>Interval操作符返回一个Observable，它按固定的时间间隔发射一个无限递增的整数序列。</p>
<p>还有一个版本的interval返回一个Observable，它在指定延迟之后先发射一个零值，然后再按照指定的时间间隔发射递增的数字。这个版本的interval在RxJava 1.0.0中叫做timer，但是那个方法已经不建议使用了，因为一个名叫interval的操作符有同样的功能。</p>
<p>interval默认在computation调度器上执行。你也可以传递一个可选的Scheduler参数来指定调度器。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-12/83117869.jpg" alt="interval"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">runSampleCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable observable = Observable.interval(<span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    subscriber = <span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + aLong);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    observable.subscribe(subscriber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (subscriber!= <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; !subscriber.isUnsubscribed()) &#123;</span><br><span class="line">        subscriber.unsubscribe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onNext: <span class="number">5</span></span><br><span class="line">(...)</span><br></pre></td></tr></table></figure>
<p>注意点：</p>
<ul>
<li>这个对象是运行在computation Scheduler，所以如果需要在view中显示结果，要在主线程中订阅。</li>
<li>由于这个操作会无限进行下去，所以需要手动取消掉这个subscription。</li>
</ul>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：1_创建操作之4_from]]></title>
      <url>http://sherlockshi.github.io/2016/10/12/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A1_%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E4%B9%8B4_from/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>将其它种类的对象和数据类型转换为Observable。</p>
<a id="more"></a>
<p>当你使用Observable时，如果你要处理的数据都可以转换成展现为Observables，而不是需要混合使用Observables和其它类型的数据，会非常方便。这让你在数据流的整个生命周期中，可以使用一组统一的操作符来管理它们。</p>
<p>例如，Iterable可以看成是同步的Observable；Future，可以看成是总是只发射单个数据的Observable。通过显式地将那些数据转换为Observables，你可以像使用Observable一样与它们交互。</p>
<p>因此，大部分ReactiveX实现都提供了将语言特定的对象和数据结构转换为Observables的方法。</p>
<p>在RxJava中，from操作符可以转换Future、Iterable和数组。对于Iterable和数组，产生的Observable会发射Iterable或数组的每一项数据。</p>
<p>对于Future，它会发射Future.get()方法返回的单个数据。from方法有一个可接受两个可选参数的版本，分别指定超时时长和时间单位。如果过了指定的时长Future还没有返回一个值，这个Observable会发射错误通知并终止。</p>
<p>from默认不在任何特定的调度器上执行。然而你可以将Scheduler作为可选的第二个参数传递给Observable，它会在那个调度器上管理这个Future。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-12/93341657.jpg" alt="from"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Integer[] items = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">Observable.from(items)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onNext: <span class="number">4</span></span><br><span class="line">onNext: <span class="number">5</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、更多"><a href="#五、更多" class="headerlink" title="五、更多"></a>五、更多</h1><p>from操作符共有以下几个变体：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from(array)</span><br><span class="line">from(Iterable)</span><br><span class="line">from(Future)</span><br><span class="line">from(Future,Scheduler)</span><br><span class="line">from(Future,timout,timeUnit)</span><br></pre></td></tr></table></figure>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：1_创建操作之3.3_throw]]></title>
      <url>http://sherlockshi.github.io/2016/10/12/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A1_%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E4%B9%8B3_3_throw/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>创建一个不发射数据以一个错误终止的Observable。</p>
<a id="more"></a>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-12/82685487.jpg" alt="throw"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.error(<span class="keyword">new</span> Throwable(<span class="string">"something must be wrong!"</span>))</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onError: something must be wrong!</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：1_创建操作之3.2_never]]></title>
      <url>http://sherlockshi.github.io/2016/10/12/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A1_%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E4%B9%8B3_2_never/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>创建一个不发射数据也不终止的Observable。</p>
<a id="more"></a>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-12/12168644.jpg" alt="never"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.never()</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><pre><code class="java">
</code></pre>
<p>(什么结果也没有！)</p>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：1_创建操作之3.1_empty]]></title>
      <url>http://sherlockshi.github.io/2016/10/12/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A1_%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E4%B9%8B3_1_empty/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>创建一个不发射任何数据但是正常终止的Observable。</p>
<p>empty操作符一般会跟其它操作符配合使用。</p>
<a id="more"></a>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-12/46970915.jpg" alt="empty"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.empty()</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Subscriber&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"onNext: "</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：1_创建操作之2_defer]]></title>
      <url>http://sherlockshi.github.io/2016/10/12/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A1_%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E4%B9%8B2_defer/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>Defer操作符会一直等待直到有观察者订阅它，然后它使用Observable工厂方法生成一个Observable。它对每个观察者都这样做，因此尽管每个订阅者都以为自己订阅的是同一个Observable，事实上每个订阅者获取的是它们自己的单独的数据序列。</p>
<a id="more"></a>
<p>在某些情况下，等待直到最后一分钟（就是知道订阅发生时）才生成Observable可以确保Observable包含最新的数据。</p>
<p>RxJava将这个操作符实现为 defer 方法。这个操作符接受一个你选择的Observable工厂函数作为单个参数。这个函数没有参数，返回一个Observable。</p>
<p><code>defer</code>方法默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-12/55485122.jpg" alt="defer"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">1</span>;</span><br><span class="line">Observable justObservable = Observable.just(number);</span><br><span class="line"></span><br><span class="line">number = <span class="number">2</span>;</span><br><span class="line">Observable deferObservable = Observable.defer(<span class="keyword">new</span> Func0&lt;Observable&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;Integer&gt; <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.just(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">number = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">justObservable.subscribe(<span class="keyword">new</span> Action1() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"just result: "</span> + o.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">deferObservable.subscribe(<span class="keyword">new</span> Action1() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"defer1 result: "</span> + o.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">number = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">deferObservable.subscribe(<span class="keyword">new</span> Action1() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"defer2 result: "</span> + o.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">just result: <span class="number">1</span></span><br><span class="line">defer1 result: <span class="number">3</span></span><br><span class="line">defer2 result: <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>由运行结果可以看出：</p>
<p>just操作符是在创建Observable就进行了赋值操作，而defer是在订阅者订阅时才创建Observable，此时才进行真正的赋值操作，保证Observable的状态是最新的。</p>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava操作符实践：1_创建操作之1_create]]></title>
      <url>http://sherlockshi.github.io/2016/10/12/15_Android/1560_RxJava/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AE%9E%E8%B7%B5%EF%BC%9A1_%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E4%B9%8B1_create/</url>
      <content type="html"><![CDATA[<h1 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h1><p>你可以使用 Create 操作符从头开始创建一个Observable，给这个操作符传递一个接受观察者作为参数的函数，编写这个函数让它的行为表现为一个Observable–恰当的调用观察者的onNext，onError和onCompleted方法。</p>
<a id="more"></a>
<p>一个形式正确的有限Observable必须尝试调用观察者的onCompleted正好一次或者它的onError正好一次，而且此后不能再调用观察者的任何其它方法。</p>
<p>RxJava将这个操作符实现为<code>create</code>方法。</p>
<p>建议你在传递给create方法的函数中检查观察者的isUnsubscribed状态，以便在没有观察者的时候，让你的Observable停止发射数据或者做昂贵的运算。</p>
<p><code>create</code>方法默认不在任何特定的调度器上执行。</p>
<h1 id="二、示意图"><a href="#二、示意图" class="headerlink" title="二、示意图"></a>二、示意图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-12/83814251.jpg" alt="create"></p>
<h1 id="三、示例代码"><a href="#三、示例代码" class="headerlink" title="三、示例代码"></a>三、示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!observer.isUnsubscribed()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                    observer.onNext(i);</span><br><span class="line">                &#125;</span><br><span class="line">                observer.onCompleted();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            observer.onError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCompleted."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onError: "</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onNext: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onNext: <span class="number">0</span></span><br><span class="line">onNext: <span class="number">1</span></span><br><span class="line">onNext: <span class="number">2</span></span><br><span class="line">onNext: <span class="number">3</span></span><br><span class="line">onCompleted.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目代码已上传到Github：<a href="https://github.com/SherlockShi/RxJavaBestPractise" target="_blank" rel="external">https://github.com/SherlockShi/RxJavaBestPractise</a></p>
</blockquote>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="http://reactivex.io/documentation/observable.html" target="_blank" rel="external">ReactiveX官方文档</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">ReactiveX文档中文翻译</a></p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android WebView图片适配解决方案]]></title>
      <url>http://sherlockshi.github.io/2016/10/12/15_Android/1525_%E7%BD%91%E7%BB%9C/AndroidWebView%E5%9B%BE%E7%89%87%E9%80%82%E9%85%8D%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>WebView的各种坑，今天又让我发现一个。</p>
<a id="more"></a>
<h1 id="一、懵逼"><a href="#一、懵逼" class="headerlink" title="一、懵逼"></a>一、懵逼</h1><p>最近公司项目中新闻模块需要用WebView来加载，而且服务端返回的是<code>String</code>类型的html代码，包含各种标签，各种转义符，一开始直接用loadDataWithBaseURL()加载的时候，出现各种<code>&amp;lt;</code>、<code>&amp;gt;</code>，直接懵逼了，后面一查，只是因为转义符的关系，那直接用String类的replace()方法替换成对应的<code>&lt;</code>、<code>&gt;</code>，就搞定了。</p>
<p>但是当新闻里面的图片大于屏幕宽度时，会出现横向滚动条，图片也只显示部分，向右滚动屏幕才能看到剩余的图片内容，这样极不方便，也不美观。</p>
<p>网上搜索了一番，有种解决方案是直接把整个WebView的绽放比例变小，适配屏幕，这样出来的图片是适配屏幕了，但是文字就变得非常小，完全就是把PC端网页塞进手机的感觉了。</p>
<h1 id="二、转机"><a href="#二、转机" class="headerlink" title="二、转机"></a>二、转机</h1><p>突然看到泡在网上的日子大哥的一篇文章<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0208/2438.html" target="_blank" rel="external">WebView加载图片超过屏幕大小的问题</a>，说的是让PC端在img标签里面配置一下最大宽度就可以解决了：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span><br><span class="line"> </span><br><span class="line">img&#123;</span><br><span class="line"> max-width:80%;</span><br><span class="line"> height:auto;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="三、再次懵逼"><a href="#三、再次懵逼" class="headerlink" title="三、再次懵逼"></a>三、再次懵逼</h1><p>赶紧联系服务端人员，结果被告知，这是使用某个框架做出来的效果，没办法修改里面的样式，这不又再次懵逼了吗…</p>
<h1 id="四、柳暗花明又一村"><a href="#四、柳暗花明又一村" class="headerlink" title="四、柳暗花明又一村"></a>四、柳暗花明又一村</h1><p>程序员都是打不死的蟑螂，只要有一线希望，就要努力去实现自己的价值，不，保住自己的饭碗。</p>
<p>上面泡网大哥的方法，其实就是给img设置样式。那服务端搞不定，就只能我们客户端这边来做了，能不能我们直接给每个img标签都加上最大宽度的限制呢？既然我们能把转义符替换掉，那是不是也能用同样的方法来加样式呢？</p>
<h1 id="五、解决方案"><a href="#五、解决方案" class="headerlink" title="五、解决方案"></a>五、解决方案</h1><p>答案是肯定的，在我们获取到的String类型的html代码里面，我们已经把转义符replace成我们实际需要的字符，这时候我们就能取到img的标签了(<code>&lt;img&gt;</code>)，那只要加上如下的代码，就可以了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htmlData = htmlData.replace(<span class="string">"&lt;img"</span>, <span class="string">"&lt;img style='max-width:90%;height:auto;'"</span>);</span><br></pre></td></tr></table></figure>
<p>原理就是上面分析的，在每个img标签里面，加上最大宽度和高度的控制，最大宽度比例可以根据需要自由设置。经过测试，暂时没发现问题，如果大家有发现问题，或者有其它的解决方案，欢迎随时给我留言。</p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Material Animations 4：Circular Reveal Animations]]></title>
      <url>http://sherlockshi.github.io/2016/10/11/15_Android/1545_%E5%8A%A8%E7%94%BB/MaterialAnimations4_CircularRevealAnimations/</url>
      <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>Circular Reveal Animations，官方称之为循环揭露动画效果，是一种用来显示/隐藏一组UI界面元素的动画效果，它是在API 21引入的，对应的类是<code>ViewAnimationUtils</code>。</p>
<a id="more"></a>
<p>循环揭露动画效果可以和共享元素变换动画组合，用来创造一些有意义的动画效果，自然地告诉用户这个app有些什么东西，将会产生怎样的效果。</p>
<h1 id="二、效果图"><a href="#二、效果图" class="headerlink" title="二、效果图"></a>二、效果图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-11/47268448.jpg" alt=""></p>
<h1 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h1><p>在上面的例子中，依次发生了：  </p>
<ul>
<li>橘色的圆是一个共享元素，从<code>MainActivity</code>变换到<code>CircularRevealActivity</code>；  </li>
<li>在<code>CircularRevealActivity</code>中有一个监听器(listener)，用来监听共享元素转换动画的结束，当动画结束时，做了这么两件事：<ul>
<li>为Toolbar执行了一个循环揭露动画</li>
<li>为<code>CircularRevealActivity</code>中的视图(Views)执行了一个放大动画，使用的是以前的<code>ViewPropertyAnimator</code>类</li>
</ul>
</li>
</ul>
<blockquote>
<p>监听共享元素进入动画的结束</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Transition transition = TransitionInflater.from(<span class="keyword">this</span>).inflateTransition(R.transition.changebounds_with_arcmotion);</span><br><span class="line">getWindow().setSharedElementEnterTransition(transition);</span><br><span class="line">transition.addListener(<span class="keyword">new</span> Transition.TransitionListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTransitionEnd</span><span class="params">(Transition transition)</span> </span>&#123;</span><br><span class="line">        animateRevealShow(mToolbar);</span><br><span class="line">        animateButtonsIn();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>animateRevealShow(mToolbar)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">animateRevealShow</span><span class="params">(View viewRoot)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> centerX = (viewRoot.getLeft() + viewRoot.getRight()) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> centerY = (viewRoot.getTop() + viewRoot.getBottom()) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> endRadius = Math.max(viewRoot.getWidth(), viewRoot.getHeight());</span><br><span class="line">		</span><br><span class="line">	Animator animator = ViewAnimationUtils.createCircularReveal(viewRoot, centerX, centerY, <span class="number">0</span>, endRadius);</span><br><span class="line">	viewRoot.setVisibility(View.VISIBLE);</span><br><span class="line">	animator.setDuration(<span class="number">1000</span>);</span><br><span class="line">	animator.setInterpolator(<span class="keyword">new</span> AccelerateInterpolator());</span><br><span class="line">	animator.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述方法的重点是<code>createCircularReveal (View view, int centerX, int centerY, float startRadius, float endRadius)</code>：<br><code>view</code>：要执行循环揭露动画的View<br><code>centerX</code>：循环揭露动画中心位置的X坐标<br><code>centerY</code>：循环揭露动画中心位置的Y坐标<br><code>startRadius</code>：循环揭露动画的起始半径<br><code>endRadius</code>：循环揭露动画的结束半径  </p>
<blockquote>
<p>animateButtonsIn()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">animateButtonsIn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bgViewGroup.getChildCount(); i++) &#123;</span><br><span class="line">        View child = bgViewGroup.getChildAt(i);</span><br><span class="line">        child.animate()</span><br><span class="line">                .setStartDelay(<span class="number">100</span> + i*DELAY)</span><br><span class="line">                .setInterpolator(interpolator)</span><br><span class="line">                .alpha(<span class="number">1</span>)</span><br><span class="line">                .scaleX(<span class="number">1</span>)</span><br><span class="line">                .scaleY(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述方法为底部的4个圆执行了一个放大动画，使用<code>ViewPropertyAnimator</code>类。</p>
<h1 id="四、更多"><a href="#四、更多" class="headerlink" title="四、更多"></a>四、更多</h1><p>还有一些不同的方式来创建循环揭露动画，关键是使用动画效果让用户更好地理解这个app有些什么东西，将会产生怎样的效果。</p>
<h2 id="1-从目标视图的中心创建循环揭露动画"><a href="#1-从目标视图的中心创建循环揭露动画" class="headerlink" title="1. 从目标视图的中心创建循环揭露动画"></a>1. 从目标视图的中心创建循环揭露动画</h2><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-11/88853303.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revealGreenAtMiddle</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> centerX = (bgViewGroup.getLeft() + bgViewGroup.getRight()) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> centerY = (bgViewGroup.getTop() + bgViewGroup.getBottom()) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> endRadius = (<span class="keyword">int</span>) Math.hypot(bgViewGroup.getWidth()/<span class="number">2</span>, bgViewGroup.getHeight()/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    Animator animator = ViewAnimationUtils.createCircularReveal(bgViewGroup, centerX, centerY, <span class="number">0</span>, endRadius);</span><br><span class="line">    bgViewGroup.setBackgroundResource(R.color.green);</span><br><span class="line">    animator.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));</span><br><span class="line">    animator.setInterpolator(<span class="keyword">new</span> AccelerateDecelerateInterpolator());</span><br><span class="line">    animator.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-从目标视图的顶部创建循环揭露动画-底部按钮动画"><a href="#2-从目标视图的顶部创建循环揭露动画-底部按钮动画" class="headerlink" title="2. 从目标视图的顶部创建循环揭露动画+底部按钮动画"></a>2. 从目标视图的顶部创建循环揭露动画+底部按钮动画</h2><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-11/73547093.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revealBlueAtTop</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    animateButtonsOut();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> centerX = (bgViewGroup.getLeft() + bgViewGroup.getRight()) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> centerY = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> endRadius = (<span class="keyword">int</span>) Math.hypot(bgViewGroup.getWidth()/<span class="number">2</span>, bgViewGroup.getHeight());</span><br><span class="line"></span><br><span class="line">    Animator animator = ViewAnimationUtils.createCircularReveal(bgViewGroup, centerX, centerY, <span class="number">0</span>, endRadius);</span><br><span class="line">    bgViewGroup.setBackgroundResource(R.color.blue);</span><br><span class="line">    animator.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">            animateButtonsIn();</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;);</span><br><span class="line">    animator.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));</span><br><span class="line">    animator.setInterpolator(<span class="keyword">new</span> AccelerateDecelerateInterpolator());</span><br><span class="line">    animator.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处动画效果经历了以下3个步骤：</p>
<ul>
<li>隐藏底部按钮（通过控制按钮的透明度、缩放比例）</li>
<li>从顶部执行循环揭露动画</li>
<li>监听器监听到揭露动画执行完后，显示底部按钮（还是通过控制按钮的透明度、缩放比例）</li>
</ul>
<h2 id="3-在点击位置创建循环揭露动画"><a href="#3-在点击位置创建循环揭露动画" class="headerlink" title="3. 在点击位置创建循环揭露动画"></a>3. 在点击位置创建循环揭露动画</h2><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-11/8425706.jpg" alt=""></p>
<p>首先，给橘色圆添加触摸监听事件，获取点击到的橘色圆的位置坐标：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">findViewById(R.id.iv_square_orange).setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v.getId() == R.id.iv_square_orange) &#123;</span><br><span class="line">            revealOrangeAtPoint(event.getRawX(), event.getRawY());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>接着，就跟前面一样了，根据获取到的坐标位置创建循环揭露动画：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">revealOrangeAtPoint</span><span class="params">(<span class="keyword">float</span> rawX, <span class="keyword">float</span> rawY)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> centerX = (<span class="keyword">int</span>) rawX;</span><br><span class="line">    <span class="keyword">int</span> centerY = (<span class="keyword">int</span>) rawY;</span><br><span class="line">    <span class="keyword">int</span> endRadius = (<span class="keyword">int</span>) Math.hypot(bgViewGroup.getWidth(), bgViewGroup.getHeight());</span><br><span class="line"></span><br><span class="line">    Animator animator = ViewAnimationUtils.createCircularReveal(bgViewGroup, centerX, centerY, <span class="number">0</span>, endRadius);</span><br><span class="line">    bgViewGroup.setBackgroundResource(R.color.orange);</span><br><span class="line">    animator.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));</span><br><span class="line">    animator.setInterpolator(<span class="keyword">new</span> AccelerateDecelerateInterpolator());</span><br><span class="line">    animator.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-属性变化动画-循环揭露动画"><a href="#4-属性变化动画-循环揭露动画" class="headerlink" title="4. 属性变化动画+循环揭露动画"></a>4. 属性变化动画+循环揭露动画</h2><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-11/93161889.jpg" alt=""></p>
<p>这个会难那么一丢丢，毕竟是两个动画效果的组合技，但是只要抓住<a href="http://sherlockshi.github.io/2016/10/07/15_Android/1545_%E5%8A%A8%E7%94%BB/MaterialAnimations3_ViewAnimations/">上一篇</a>讲的<code>属性变化</code>动画和上面讲的<code>循环揭露</code>动画这两个点，就不难理解了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">revealRedAtCenter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">final</span> ViewGroup.LayoutParams originalParams = ivSquareRed.getLayoutParams();</span><br><span class="line">	</span><br><span class="line">	Transition transition = TransitionInflater.from(<span class="keyword">this</span>).inflateTransition(R.transition.changebounds_with_arcmotion);</span><br><span class="line">	transition.addListener(<span class="keyword">new</span> Transition.TransitionListener() &#123;</span><br><span class="line">	    <span class="meta">@Override</span></span><br><span class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTransitionEnd</span><span class="params">(Transition transition)</span> </span>&#123;</span><br><span class="line">	        <span class="keyword">int</span> centerX = (bgViewGroup.getLeft() + bgViewGroup.getRight()) / <span class="number">2</span>;</span><br><span class="line">	        <span class="keyword">int</span> centerY = (bgViewGroup.getTop() + bgViewGroup.getBottom()) / <span class="number">2</span>;</span><br><span class="line">	        <span class="keyword">int</span> endRadius = (<span class="keyword">int</span>) Math.hypot(bgViewGroup.getWidth(), bgViewGroup.getHeight());</span><br><span class="line">	</span><br><span class="line">	        Animator animator = ViewAnimationUtils.createCircularReveal(bgViewGroup, centerX, centerY, <span class="number">0</span>, endRadius);</span><br><span class="line">	        bgViewGroup.setBackgroundResource(R.color.red);</span><br><span class="line">	        animator.setDuration(getResources().getInteger(android.R.integer.config_longAnimTime));</span><br><span class="line">	        animator.setInterpolator(<span class="keyword">new</span> AccelerateDecelerateInterpolator());</span><br><span class="line">	        animator.start();</span><br><span class="line">	</span><br><span class="line">	        ivSquareRed.setLayoutParams(originalParams);</span><br><span class="line">	    &#125;</span><br><span class="line">		...</span><br><span class="line">	&#125;);</span><br><span class="line">	</span><br><span class="line">	TransitionManager.beginDelayedTransition(bgViewGroup, transition);</span><br><span class="line">	RelativeLayout.LayoutParams params = <span class="keyword">new</span> RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);</span><br><span class="line">	params.addRule(RelativeLayout.CENTER_IN_PARENT);</span><br><span class="line">	ivSquareRed.setLayoutParams(params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>本篇的重点就1个内容：<br><code>createCircularReveal (View view, int centerX, int centerY, float startRadius, float endRadius)</code></p>
<p>只要抓住这两条主线，其它的内容都可以按主线来抽丝拨茧，一切难题都可以迎刃而解。</p>
<blockquote>
<p>项目代码已分享到Github：<a href="https://github.com/SherlockShi/AndroidMaterialAnimationPractise" target="_blank" rel="external">https://github.com/SherlockShi/AndroidMaterialAnimationPractise</a></p>
</blockquote>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="external">Material Animations</a>  </p>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Material Animations 3：View Animations]]></title>
      <url>http://sherlockshi.github.io/2016/10/07/15_Android/1545_%E5%8A%A8%E7%94%BB/MaterialAnimations3_ViewAnimations/</url>
      <content type="html"><![CDATA[<blockquote>
<p>项目地址：<a href="https://github.com/SherlockShi/AndroidMaterialAnimationPractise" target="_blank" rel="external">https://github.com/SherlockShi/AndroidMaterialAnimationPractise</a></p>
</blockquote>
<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><ul>
<li>Transition框架可以用来给一个<code>View</code>的布局<code>属性变化</code>增加动画效果。你要做的事，就是改变你想改变的属性，然后Transition框架就会自动为你展示必要的动画效果。</li>
</ul>
<a id="more"></a>
<ul>
<li>Transition框架也可以用来给当前界面布局(current activity layout)里面的<code>元素变化</code>增加动画效果。Transition发生在各个场景(Scenes)中，一个场景只是我们UI布局中的一个常见的静态布局而已。只要从一个场景切换到另一个，Transition框架就会自动为场景的切换增加动画效果。</li>
</ul>
<p><code>属性变化</code>指的是某一个View，比如一个ImageView，它的宽度、高度、位置等参数的变化；<br><code>元素变化</code>指的是整个布局、场景里面的元素位置等参数的变化。它们的区别主要在于面向的对象不同，一个是针对View，一个是针对Layout。</p>
<h1 id="二、效果图"><a href="#二、效果图" class="headerlink" title="二、效果图"></a>二、效果图</h1><table>
<thead>
<tr>
<th>属性变化</th>
<th>元素变化</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-7/9496996.jpg" alt=""></td>
<td><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-7/17219880.jpg" alt=""></td>
</tr>
</tbody>
</table>
<h1 id="三、属性变化"><a href="#三、属性变化" class="headerlink" title="三、属性变化"></a>三、属性变化</h1><h2 id="1-调用beginDelayedTransition-方法"><a href="#1-调用beginDelayedTransition-方法" class="headerlink" title="1. 调用beginDelayedTransition()方法"></a>1. 调用<code>beginDelayedTransition()</code>方法</h2><p>调用这行代码，就相当我们告诉Transition框架，“大哥，界面要变化了，你准备下，帮忙给点动效撒～”</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TransitionManager.beginDelayedTransition(llytRoot);</span><br></pre></td></tr></table></figure>
<h2 id="2-改变View的属性"><a href="#2-改变View的属性" class="headerlink" title="2. 改变View的属性"></a>2. 改变View的属性</h2><p>然后只要改变View的某一个或多个属性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ViewGroup.LayoutParams params = ivSquareGreen.getLayoutParams();</span><br><span class="line">params.width = <span class="number">200</span>;</span><br><span class="line">ivSquareGreen.setLayoutParams(params);</span><br></pre></td></tr></table></figure>
<p>改变View的宽度属性，会触发layoutMeasure，Transition框架就会记录下起始值和结束值，然后展示从起始值到结束值的动画效果。</p>
<h1 id="四、元素变化"><a href="#四、元素变化" class="headerlink" title="四、元素变化"></a>四、元素变化</h1><h2 id="1-调用getSceneForLayout-方法"><a href="#1-调用getSceneForLayout-方法" class="headerlink" title="1. 调用getSceneForLayout()方法"></a>1. 调用<code>getSceneForLayout()</code>方法</h2><p>这个方法会根据每一个布局文件，创建出一个个的场景(Scene)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scene1 = Scene.getSceneForLayout(flytRoot, R.layout.activity_animations_scene1, <span class="keyword">this</span>);</span><br><span class="line">scene2 = Scene.getSceneForLayout(flytRoot, R.layout.activity_animations_scene2, <span class="keyword">this</span>);</span><br><span class="line">scene3 = Scene.getSceneForLayout(flytRoot, R.layout.activity_animations_scene3, <span class="keyword">this</span>);</span><br><span class="line">scene4 = Scene.getSceneForLayout(flytRoot, R.layout.activity_animations_scene4, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<h2 id="2-调用go-方法"><a href="#2-调用go-方法" class="headerlink" title="2. 调用go()方法"></a>2. 调用<code>go()</code>方法</h2><p>调用这个方法，会跳转到下一个场景，并基于当前场景和目标场景展示指定的动画效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TransitionManager.go(scene1, <span class="keyword">new</span> ChangeBounds());</span><br></pre></td></tr></table></figure>
<h1 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h1><p><a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="external">Material Animations</a>  </p>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Material Design风格常用控件的使用与定制]]></title>
      <url>http://sherlockshi.github.io/2016/10/06/15_Android/1545_%E5%8A%A8%E7%94%BB/Material%20Design%E9%A3%8E%E6%A0%BC%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%AE%9A%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/SherlockShi/MaterialWidgetPractise" target="_blank" rel="external">https://github.com/SherlockShi/MaterialWidgetPractise</a></p>
<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>你是否还在使用selector来定制Button普通状态、按下状态的变化呢？</p>
<p>你是否也想自己的Button有Material Design的阴影效果呢？</p>
<p>你是否也想让各种控件轻松变换各种颜色风格呢？</p>
<a id="more"></a>
<p>那么看完这篇分享，你就会有答案了。</p>
<h1 id="二、4种风格的Button"><a href="#二、4种风格的Button" class="headerlink" title="二、4种风格的Button"></a>二、4种风格的Button</h1><p>系统默认有4种风格的Button效果，分别是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Widget.AppCompat.Button</span><br><span class="line"></span><br><span class="line">Widget.AppCompat.Button.Colored</span><br><span class="line"></span><br><span class="line">Widget.AppCompat.Button.Borderless</span><br><span class="line"></span><br><span class="line">Widget.AppCompat.Button.Borderless.Colored</span><br></pre></td></tr></table></figure>
<p>效果如下（1-4）：</p>
<p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-7/48325829.jpg" width="250" height="410" alt="4种风格的Button"></p>
<p>按命名、并结合效果图可以看出，这4种风格对应两个属性：<code>字体颜色</code>、<code>边框颜色</code>（或称背景颜色）;</p>
<p>4种风格可完整描述为<code>默认边框默认字体</code>、<code>彩色边框默认字体</code>、<code>无边框默认字体</code>、<code>无边框彩色字体</code>，使用方法也很简单，只需在普通Button的xml布局文件中，加上style属性即可：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span><br><span class="line">    <span class="attr">...</span></span><br><span class="line">    <span class="attr">style</span>=<span class="string">"@style/Widget.AppCompat.Button"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span><br><span class="line">    <span class="attr">...</span></span><br><span class="line">    <span class="attr">style</span>=<span class="string">"@style/Widget.AppCompat.Button.Colored"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span><br><span class="line">    <span class="attr">...</span></span><br><span class="line">    <span class="attr">style</span>=<span class="string">"@style/Widget.AppCompat.Button.Borderless"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span><br><span class="line">    <span class="attr">...</span></span><br><span class="line">    <span class="attr">style</span>=<span class="string">"@style/Widget.AppCompat.Button.Borderless.Colored"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>从上图也可以看到，不加style属性的话，默认是使用<code>Widget.AppCompat.Button</code>风格的。</p>
<p>后面两种无边框Button，只需要改变<code>textColor</code>属性来设置效果，没什么好说的；主要是前面两种，其实就是同一种效果：有边框颜色的Button，如何定制请看下一节内容。</p>
<h1 id="三、各种颜色的Button"><a href="#三、各种颜色的Button" class="headerlink" title="三、各种颜色的Button"></a>三、各种颜色的Button</h1><p>你是否还在用selector文件来定制各种颜色、各种不同状态下的Button呢？如果一个应用中需要10个不同的Button，你是否需要定义10*4个xml文件呢？(normal状态+pressed状态+disabled状态+selector选择器)</p>
<p>其实使用系统的Button控件就可以轻松实现，只需要配置一定的属性。</p>
<h2 id="首先，确保主题使用Material风格"><a href="#首先，确保主题使用Material风格" class="headerlink" title="首先，确保主题使用Material风格"></a>首先，确保主题使用Material风格</h2><p>主题需要使用<code>Theme.AppCompat</code>或<code>Theme.Design</code>类的子主题（建议使用<code>Theme.AppCompat</code>子类主题，兼容Android 5.0以下版本），如<code>Theme.AppCompat.Light</code>。</p>
<h2 id="其次，在style文件中设置Button颜色"><a href="#其次，在style文件中设置Button颜色" class="headerlink" title="其次，在style文件中设置Button颜色"></a>其次，在style文件中设置Button颜色</h2><p>在<code>styles.xml</code>文件中设置<code>colorButtonNormal</code>属性：</p>
<blockquote>
<p>values/styles.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"RedButton"</span>&gt;</span><span class="xml"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorButtonNormal"</span>&gt;</span>#F44336<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="好了，一起来见证奇迹"><a href="#好了，一起来见证奇迹" class="headerlink" title="好了，一起来见证奇迹"></a>好了，一起来见证奇迹</h2><p>在布局文件中定义Button，增加theme属性(注意，是<code>theme</code>，不是<code>style</code>)：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span><br><span class="line">    <span class="attr">...</span></span><br><span class="line">    <span class="attr">android:theme</span>=<span class="string">"@style/RedButton"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-7/17052588.jpg" width="250" height="410" alt="各种颜色的Button"></p>
<p>现在，就可以看到Button变成了你想要的颜色，而且点击后Button颜色也加深了，完全跟使用selector定制出来的一模一样。并且如果使用Android 5.0以上的手机，还会默认带有<code>水纹波</code>和<code>阴影</code>的炫酷效果。</p>
<h1 id="四、其它各种常用控件"><a href="#四、其它各种常用控件" class="headerlink" title="四、其它各种常用控件"></a>四、其它各种常用控件</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-7/19973210.jpg" width="250" height="410" alt="CheckBox"><br><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-7/34090737.jpg" width="250" height="410" alt="RadioButton"><br><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-7/21581059.jpg" width="250" height="410" alt="Switch"></p>
<p>其余控件像<code>CheckBox</code>、<code>RadioButton</code>，可以用<code>colorControlNormal</code>、<code>colorControlActivated</code>（或<code>colorAccent</code>）来控制正常状态和按下状态的背景颜色；</p>
<p>而像<code>Switch</code>、<code>EditText</code>等控件，可以用<code>colorControlActivated</code>（或<code>colorAccent</code>）来控制背景颜色。</p>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>其实本篇主要只有两部分内容：</p>
<ul>
<li>4种Button风格：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Widget.AppCompat.Button</span><br><span class="line">Widget.AppCompat.Button.Colored</span><br><span class="line">Widget.AppCompat.Button.Borderless</span><br><span class="line">Widget.AppCompat.Button.Borderless.Colored</span><br></pre></td></tr></table></figure>
<ul>
<li>4个控件属性</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">colorButtonNormal: Button正常状态颜色</span><br><span class="line">colorControlNormal: 控件正常状态颜色</span><br><span class="line">colorControlActivated: 选中或者点击获得焦点后的颜色</span><br><span class="line">colorAccent: 选中或者点击获得焦点后的颜色</span><br></pre></td></tr></table></figure>
<p>现在，你是否对本篇开头的几个问题有了答案了呢？</p>
<blockquote>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为CardView添加点击后的抬升效果]]></title>
      <url>http://sherlockshi.github.io/2016/10/05/15_Android/1545_%E5%8A%A8%E7%94%BB/%E4%B8%BACardView%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E5%90%8E%E7%9A%84%E6%8A%AC%E5%8D%87%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<h1 id="一、效果图"><a href="#一、效果图" class="headerlink" title="一、效果图"></a>一、效果图</h1><p>在真机上阴影效果很好，录屏效果差一点。</p>
<a id="more"></a>
<p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-5/13322114.jpg" alt=""></p>
<h1 id="二、实现方法"><a href="#二、实现方法" class="headerlink" title="二、实现方法"></a>二、实现方法</h1><h2 id="1-创建一个TranslationZ的变换动画"><a href="#1-创建一个TranslationZ的变换动画" class="headerlink" title="1. 创建一个TranslationZ的变换动画"></a>1. 创建一个<code>TranslationZ</code>的变换动画</h2><blockquote>
<p>res/animator/touch_raise.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span><br><span class="line">        <span class="attr">android:state_enabled</span>=<span class="string">"true"</span></span><br><span class="line">        <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">objectAnimator</span></span><br><span class="line">            <span class="attr">android:duration</span>=<span class="string">"@android:integer/config_shortAnimTime"</span></span><br><span class="line">            <span class="attr">android:propertyName</span>=<span class="string">"translationZ"</span></span><br><span class="line">            <span class="attr">android:valueTo</span>=<span class="string">"8dp"</span></span><br><span class="line">            <span class="attr">android:valueType</span>=<span class="string">"floatType"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">objectAnimator</span></span><br><span class="line">            <span class="attr">android:duration</span>=<span class="string">"@android:integer/config_shortAnimTime"</span></span><br><span class="line">            <span class="attr">android:propertyName</span>=<span class="string">"translationZ"</span></span><br><span class="line">            <span class="attr">android:valueTo</span>=<span class="string">"0dp"</span></span><br><span class="line">            <span class="attr">android:valueType</span>=<span class="string">"floatType"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-为CardView加上属性"><a href="#2-为CardView加上属性" class="headerlink" title="2. 为CardView加上属性"></a>2. 为CardView加上属性</h2><p>CardView布局中加入属性<code>android:stateListAnimator=&quot;@animator/touch_raise&quot;</code>。</p>
<p>这样，你的卡片按住时就会有浮起的效果了（或称抬升、阴影加深）。</p>
<h1 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h1><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1025/3621.html" target="_blank" rel="external">关于使用 CardView 开发过程中要注意的细节-泡在网上的日子</a></p>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Material Animations 2：Shared Element Transition]]></title>
      <url>http://sherlockshi.github.io/2016/10/04/15_Android/1545_%E5%8A%A8%E7%94%BB/MaterialAnimations2_SharedElements/</url>
      <content type="html"><![CDATA[<blockquote>
<p>项目地址：<a href="https://github.com/SherlockShi/AndroidMaterialAnimationPractise" target="_blank" rel="external">https://github.com/SherlockShi/AndroidMaterialAnimationPractise</a></p>
</blockquote>
<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>元素共享变换（shared element transition）决定了共享的view元素从一个Activity/Fragment 到另一个Activity/Fragment的切换中是如何动画变化的。  </p>
<a id="more"></a>
<p><strong>请记住</strong>，共享元素变换并不是真正实现了两个Activity或者Fragment之间元素的共享，界面还是两个不同界面，只不过Framework采用了不同的方法来达到相同的视觉效果。</p>
<h1 id="二、效果图"><a href="#二、效果图" class="headerlink" title="二、效果图"></a>二、效果图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-5/5566926.jpg" alt=""></p>
<h1 id="三、实现方法"><a href="#三、实现方法" class="headerlink" title="三、实现方法"></a>三、实现方法</h1><h2 id="1-在主题中启用窗口内容转换"><a href="#1-在主题中启用窗口内容转换" class="headerlink" title="1. 在主题中启用窗口内容转换"></a>1. 在主题中启用窗口内容转换</h2><blockquote>
<p>values-v21/styles.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span><br><span class="line">    ...  </span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowContentTransitions"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-在styles-xml文件中指定一个共享元素转换"><a href="#2-在styles-xml文件中指定一个共享元素转换" class="headerlink" title="2. 在styles.xml文件中指定一个共享元素转换"></a>2. 在styles.xml文件中指定一个共享元素转换</h2><blockquote>
<p>values-v21/styles.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span><br><span class="line">    ...</span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSharedElementExitTransition"</span>&gt;</span>@transition/def_transition<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSharedElementReenterTransition"</span>&gt;</span>@transition/def_transition<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSharedElementEnterTransition"</span>&gt;</span>@transition/def_transition<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSharedElementReturnTransition"</span>&gt;</span>@transition/def_transition<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>此处也可以直接使用系统默认自带的转换效果，如果这么做，则下一步<code>将转换效果定义为XML资源</code>可省略</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span><br><span class="line">    ...</span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSharedElementExitTransition"</span>&gt;</span>@android:transition/move<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSharedElementReenterTransition"</span>&gt;</span>@android:transition/move<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSharedElementEnterTransition"</span>&gt;</span>@android:transition/move<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSharedElementReturnTransition"</span>&gt;</span>@android:transition/move<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-将转换效果定义为XML资源（可选）"><a href="#3-将转换效果定义为XML资源（可选）" class="headerlink" title="3. 将转换效果定义为XML资源（可选）"></a>3. 将转换效果定义为XML资源（可选）</h2><blockquote>
<p>transition-v21/def_transition.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">transitionSet</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">changeBounds</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">changeTransform</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">changeClipBounds</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">changeImageTransform</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transitionSet</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>changeBounds</code> - 为目标视图的布局边界的变化添加动画。</li>
<li><code>changeClipBounds</code> - 为目标视图的裁剪边界的变化添加动画。</li>
<li><code>changeTransform</code> - 为目标视图的缩放与旋转变化添加动画。</li>
<li><code>changeImageTransform</code> - 为目标图像的大小与缩放变化添加动画。</li>
</ul>
<p>详细文档可参考<a href="https://developer.android.com/reference/android/transition/Transition.html" target="_blank" rel="external">Transition类</a>或具体某一属性的API文档。</p>
<h2 id="4-为共享元素指定transitionName"><a href="#4-为共享元素指定transitionName" class="headerlink" title="4. 为共享元素指定transitionName"></a>4. 为共享元素指定transitionName</h2><p>利用<code>android:transitionName</code>属性对两个布局中的共享元素指定一个通用名称：</p>
<blockquote>
<p>layout/activity_main.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span><br><span class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/iv_square_blue"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"48dp"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span></span><br><span class="line">    <span class="attr">android:src</span>=<span class="string">"@drawable/circle_blue"</span></span><br><span class="line">    <span class="attr">android:transitionName</span>=<span class="string">"@string/transition_name_square_blue"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span><br><span class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tv_element_title"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">    <span class="attr">android:text</span>=<span class="string">"@string/activity_main_shared_elements"</span></span><br><span class="line">    <span class="attr">android:transitionName</span>=<span class="string">"@string/transition_name_element_title"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>activity_shared_elements.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"120dp"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"120dp"</span></span><br><span class="line">    <span class="attr">android:src</span>=<span class="string">"@drawable/circle_blue"</span></span><br><span class="line">    <span class="attr">android:transitionName</span>=<span class="string">"@string/transition_name_square_blue"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">    <span class="attr">android:text</span>=<span class="string">"@string/activity_main_shared_elements"</span></span><br><span class="line">    <span class="attr">android:transitionName</span>=<span class="string">"@string/transition_name_element_title"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>要点：</strong>共享元素尽量设置固定值或wrap_content，否则在界面过渡的开始、结束位置容易出现闪屏。<br><strong>分析原因可能为：</strong>由于元素的居中等显示属性的不同导致，如设置文本居中显示，则元素从起始位置开始移动，到达结束位置时，先移动到结束时的居中位置，然后瞬间变到结束位置，如果这时候两个位置不一致，会造成闪屏。</p>
<h2 id="5-使用-makeSceneTransitionAnimation-方法"><a href="#5-使用-makeSceneTransitionAnimation-方法" class="headerlink" title="5. 使用 makeSceneTransitionAnimation() 方法"></a>5. 使用 makeSceneTransitionAnimation() 方法</h2><blockquote>
<p>MainActivity.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">View ivSquareBlue = findViewById(R.id.iv_square_blue);</span><br><span class="line">String squareBlueTransitionName = getString(R.string.transition_name_square_blue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// only one shared elements</span></span><br><span class="line">ActivityOptionsCompat activityOptionsCompat = </span><br><span class="line">        ActivityOptionsCompat.makeSceneTransitionAnimation(<span class="keyword">this</span>, ivSquareBlue, squareBlueTransitionName);</span><br><span class="line">startActivity(intent, activityOptionsCompat.toBundle());</span><br></pre></td></tr></table></figure>
<p>如果有多个共享元素，则使用以下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">View ivSquareBlue = findViewById(R.id.iv_square_blue);</span><br><span class="line">String squareBlueTransitionName = getString(R.string.transition_name_square_blue);</span><br><span class="line"></span><br><span class="line">View tvElementTitle = findViewById(R.id.tv_element_title);</span><br><span class="line">String elementTitleTransitionName = getString(R.string.transition_name_element_title);</span><br><span class="line"></span><br><span class="line"><span class="comment">// multiple shared elements</span></span><br><span class="line">ActivityOptionsCompat activityOptionsCompat = ActivityOptionsCompat.makeSceneTransitionAnimation(<span class="keyword">this</span>,</span><br><span class="line">        Pair.create(ivSquareBlue, squareBlueTransitionName),</span><br><span class="line">        Pair.create(tvElementTitle, elementTitleTransitionName));</span><br><span class="line"></span><br><span class="line">startActivity(intent, activityOptionsCompat.toBundle());</span><br></pre></td></tr></table></figure>
<h1 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h1><p><a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="external">Material Animations</a><br><a href="https://developer.android.com/training/material/animations.html" target="_blank" rel="external">定义定制动画-Android开发文档</a></p>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Material Animations 1：Content Transitions]]></title>
      <url>http://sherlockshi.github.io/2016/10/03/15_Android/1545_%E5%8A%A8%E7%94%BB/MaterialAnimations1_ContentTransitions/</url>
      <content type="html"><![CDATA[<blockquote>
<p>项目地址：<a href="https://github.com/SherlockShi/AndroidMaterialAnimationPractise" target="_blank" rel="external">https://github.com/SherlockShi/AndroidMaterialAnimationPractise</a></p>
</blockquote>
<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><blockquote>
<p>同overridePendingTransition()方法执行效果类似</p>
</blockquote>
<p>Content Transition也称为Transitions between Activities，或Enter/Exit Transition，包括下图4个部分（本图截取自Udacity）：</p>
<a id="more"></a>
<p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-4/39816433.jpg" alt="Content Transition执行过程"></p>
<ul>
<li><strong>1. Exit A</strong>: 离开A界面时的转换动画</li>
<li><strong>2. Enter B</strong>: 进入B界面时的转换动画</li>
<li><strong>3. Return B</strong>: 从B界面返回时的转换动画；可不设置，默认执行<code>Enter B</code>的逆过程</li>
<li><strong>4. Reenter A</strong>: 重新进入A界面时的转换动画；可不设置，默认执行<code>Exit A</code>的逆过程</li>
</ul>
<h1 id="二、效果图"><a href="#二、效果图" class="headerlink" title="二、效果图"></a>二、效果图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-4/94174213.jpg" alt=""></p>
<h1 id="三、实现方法"><a href="#三、实现方法" class="headerlink" title="三、实现方法"></a>三、实现方法</h1><h2 id="1-编码实现"><a href="#1-编码实现" class="headerlink" title="1. 编码实现"></a>1. 编码实现</h2><blockquote>
<p>ActivityA.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_a);</span><br><span class="line">    setupWindowAnimations();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupWindowAnimations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Slide slide = <span class="keyword">new</span> Slide();</span><br><span class="line">    slide.setDuration(<span class="number">500</span>);</span><br><span class="line">    slide.setSlideEdge(Gravity.LEFT);</span><br><span class="line">    getWindow().setExitTransition(slide);</span><br><span class="line"><span class="comment">//    getWindow().setReenterTransition(slide);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ActivityB.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_b);</span><br><span class="line">    setupWindowAnimations();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupWindowAnimations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Fade fade = <span class="keyword">new</span> Fade();</span><br><span class="line">    fade.setDuration(<span class="number">500</span>);</span><br><span class="line">    getWindow().setEnterTransition(fade);</span><br><span class="line"><span class="comment">//    getWindow().setReturnTransition(slide);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>由于大部分相关API只支持API 19以上版本，甚至只支持API 21以上版本，因此需要添加如下判断：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-XML-amp-Code实例化实现"><a href="#2-XML-amp-Code实例化实现" class="headerlink" title="2. XML &amp; Code实例化实现"></a>2. XML &amp; Code实例化实现</h2><h3 id="定义XML"><a href="#定义XML" class="headerlink" title="定义XML"></a>定义XML</h3><blockquote>
<p>res/transition-v21/fade.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">fade</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/"</span></span><br><span class="line">    <span class="attr">android:duration</span>=<span class="string">"500"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>res/transition-v21/slide.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">slide</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/"</span></span><br><span class="line">    <span class="attr">android:duration</span>=<span class="string">"500"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Code实例化"><a href="#Code实例化" class="headerlink" title="Code实例化"></a>Code实例化</h3><blockquote>
<p>ActivityA.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_a);</span><br><span class="line">    setupWindowAnimations();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupWindowAnimations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Slide slide = TransitionInflater.from(<span class="keyword">this</span>).inflateTransition(R.transition.slide);</span><br><span class="line">    getWindow().setExitTransition(slide);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ActivityB.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_b);</span><br><span class="line">    setupWindowAnimations();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupWindowAnimations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Fade fade = TransitionInflater.from(<span class="keyword">this</span>).inflateTransition(R.transition.fade);</span><br><span class="line">    getWindow().setEnterTransition(fade);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-XML-amp-Style声明式实现（强烈推荐）"><a href="#3-XML-amp-Style声明式实现（强烈推荐）" class="headerlink" title="3. XML &amp; Style声明式实现（强烈推荐）"></a>3. XML &amp; Style声明式实现（强烈推荐）</h2><h3 id="定义XML-1"><a href="#定义XML-1" class="headerlink" title="定义XML"></a>定义XML</h3><blockquote>
<p>如果没有其它属性要求，本步骤可跳过，直接在下一步使用系统定义好的XML  </p>
</blockquote>
<p>同<code>XML &amp; Code实例化实现</code>一样，声明XML文件</p>
<blockquote>
<p>res/transition-v21/fade.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">fade</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/"</span></span><br><span class="line">    <span class="attr">android:duration</span>=<span class="string">"500"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>res/transition-v21/slide.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">slide</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/"</span></span><br><span class="line">    <span class="attr">android:duration</span>=<span class="string">"500"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Style文件声明"><a href="#Style文件声明" class="headerlink" title="Style文件声明"></a>Style文件声明</h3><blockquote>
<p>res/values-v21/styles.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowExitTransition"</span>&gt;</span>@transition/slide<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowReenterTransition"</span>&gt;</span>@transition/slide<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowEnterTransition"</span>&gt;</span>@transition/slide<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowReturnTransition"</span>&gt;</span>@transition/slide<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>也可以直接使用系统提供的过渡效果：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowExitTransition"</span>&gt;</span>@android:transition/slide_left<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowReenterTransition"</span>&gt;</span>@android:transition/slide_left<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowEnterTransition"</span>&gt;</span>@android:transition/slide_right<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowReturnTransition"</span>&gt;</span>@android:transition/slide_right<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="声明打开Content-Transitions（非必须）"><a href="#声明打开Content-Transitions（非必须）" class="headerlink" title="声明打开Content Transitions（非必须）"></a>声明打开Content Transitions（非必须）</h3><blockquote>
<p>如果上一个步骤继承的父主题不是AppCompt相关主题，还需要在styles.xml文件中声明:</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowContentTransitions"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="四、跳转"><a href="#四、跳转" class="headerlink" title="四、跳转"></a>四、跳转</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startActivity(<span class="keyword">new</span> Intent(ActivityA.<span class="keyword">this</span>, ActivityB.class),</span><br><span class="line">                ActivityOptionsCompat.makeSceneTransitionAnimation(ActivityA.<span class="keyword">this</span>).toBundle());</span><br></pre></td></tr></table></figure>
<h1 id="五、返回"><a href="#五、返回" class="headerlink" title="五、返回"></a>五、返回</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">finishAfterTransition();</span><br></pre></td></tr></table></figure>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><p><a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="external">https://github.com/lgvalle/Material-Animations</a></p>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nodeppt常用功能]]></title>
      <url>http://sherlockshi.github.io/2016/10/03/10_Markdown/nodeppt%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>更多功能请参考<a href="https://github.com/ksky521/nodePPT" target="_blank" rel="external">nodeppt官方文档</a></p>
</blockquote>
<h1 id="一、-启动"><a href="#一、-启动" class="headerlink" title="一、 启动"></a>一、 启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodeppt start</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="二、导出html"><a href="#二、导出html" class="headerlink" title="二、导出html"></a>二、导出html</h1><p>导出全部，包括nodeppt的js、img和css文件夹<br>默认导出在publish文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodeppt generate filepath <span class="_">-a</span></span><br></pre></td></tr></table></figure></p>
<h1 id="三、导出ppt"><a href="#三、导出ppt" class="headerlink" title="三、导出ppt"></a>三、导出ppt</h1><p>使用url?print=1访问页面，然后选择chrome的系统打印即可：<br><code>打印</code> -&gt; <code>使用系统对话框进行打印</code> -&gt; (左下角)<code>存储为PDF...</code></p>
<blockquote>
<p>注意url中不能包含“#1”等具体页码信息，否则打印时会只打印一页</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android程序员简历模板]]></title>
      <url>http://sherlockshi.github.io/2016/10/02/45_%E5%B7%A5%E4%BD%9C/4505_%E7%AE%80%E5%8E%86/Android%E7%A8%8B%E5%BA%8F%E5%91%98%E7%AE%80%E5%8E%86%E6%A8%A1%E6%9D%BF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>其他程序员简历模板可参考<a href="https://github.com/geekcompany/ResumeSample" target="_blank" rel="external">ResumeSample</a></p>
</blockquote>
<h1 id="Android程序员简历模板"><a href="#Android程序员简历模板" class="headerlink" title="Android程序员简历模板"></a>Android程序员简历模板</h1><p>本简历模板由国内首家互联网人才拍卖网站「 <a href="http://www.jobdeer.com" target="_blank" rel="external">JobDeer.com</a> 」提供。</p>
<p>（括号里的是我们的顾问编写的说明，建议在简历书写完成后统一删除）</p>
<a id="more"></a>
<h2 id="先讲讲怎样才是一份好的技术简历"><a href="#先讲讲怎样才是一份好的技术简历" class="headerlink" title="先讲讲怎样才是一份好的技术简历"></a>先讲讲怎样才是一份好的技术简历</h2><p>首先，一份好的简历不光说明事实，更通过FAB模式来增强其说服力。</p>
<ul>
<li>Feature：是什么</li>
<li>Advantage：比别人好在哪些地方</li>
<li>Benefit：如果雇佣你，招聘方会得到什么好处</li>
</ul>
<p>其次，写简历和写议论文不同，过分的论证会显得自夸，反而容易引起反感，所以要点到为止。这里的技巧是，提供论据，把论点留给阅读简历的人自己去得出。放论据要具体，最基本的是要数字化，好的论据要让人印象深刻。</p>
<p>举个例子，下边内容是虚构的：</p>
<p>2006年，我参与了手机XX网发布系统WAPCMS的开发（<code>这部分是大家都会写的</code>）。作为核心程序员，我不但完成了网站界面、调度队列的开发工作，更提出了高效的组件级缓存系统，通过碎片化缓冲有效的提升了系统的渲染效率。（<code>这部分是很多同学忘掉的，要写出你在这个项目中具体负责的部分，以及你贡献出来的价值。</code>）在该系统上线后，Web前端性能从10QPS提升到200QPS，服务器由10台减少到3台（<code>通过量化的数字来增强可信度</code>）。2008年我升任WAPCMS项目负责人，带领一个3人小组支持着每天超过2亿的PV（<code>这就是Benefit。你能带给前雇主的价值，也就是你能带给新雇主的价值。</code>）。</p>
<p>有同学问，如果我在项目里边没有那么显赫的成绩可以说怎么办？讲不出成绩时，就讲你的成长。因为学习能力也是每家公司都看中的东西。你可以写你在这个项目里边遇到了一个什么样的问题，别人怎么解决的，你怎么解决的，你的方案好在什么地方，最终这个方案的效果如何。</p>
<p>具体、量化、有说服力，是技术简历特别需要注重的地方。</p>
<p>（以上内容在写完简历后，对每一段进行评估，完成后再删除）</p>
<hr>
<h1 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h1><p>（HR会打印你的简历，用于在面试的时候联系，所以联系方式放到最上边会比较方便）</p>
<ul>
<li>手机：135<strong><em>**</em></strong> （<code>如果是外地手机，可注明。如经常关机，要写上最优联系时间</code>）</li>
<li>Email：goodman@gmail.com （<code>虽然我觉得QQ邮箱无所谓，不过有些技术人员比较反感，建议用G</code>）</li>
<li>QQ/微信号：6<strong><em>*</em></strong>（<code>提供一个通过网络可以联系到你的方式</code>）</li>
</ul>
<hr>
<h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><ul>
<li>胶布帝/男/1990</li>
<li>本科/萌鹿大学计算机系</li>
<li>工作年限：3年</li>
<li>微博：<a href="http://weibo.com/jobdeer" target="_blank" rel="external">@JobDeer</a> （<code>如果没有技术相关内容，也可以不放</code>）</li>
<li>技术博客：<a href="http://blog.github.io" target="_blank" rel="external">http://blog.github.io</a> ( <code>使用GitHub Host的Big较高</code>  )</li>
<li><p>GitHub: <a href="http://github.com/geekcompany" target="_blank" rel="external">http://github.com/geekcompany</a> ( <code>有原创repo的GitHub帐号会极大的提升你的个人品牌</code>  )</p>
</li>
<li><p>期望职位：Android高级程序员，应用架构师</p>
</li>
<li>期望薪资：税前月薪15k~20k，特别喜欢的公司可例外</li>
<li>期望城市：北京</li>
</ul>
<hr>
<h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1><p>（工作经历按逆序排列，最新的在最前边，按公司做一级分组，公司内按二级分组）</p>
<h2 id="ABC公司-（-2012年9月-2014年9月-）"><a href="#ABC公司-（-2012年9月-2014年9月-）" class="headerlink" title="ABC公司 （ 2012年9月 ~ 2014年9月 ）"></a>ABC公司 （ 2012年9月 ~ 2014年9月 ）</h2><h3 id="DEF项目"><a href="#DEF项目" class="headerlink" title="DEF项目"></a>DEF项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>
<h3 id="GHI项目"><a href="#GHI项目" class="headerlink" title="GHI项目"></a>GHI项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>
<h3 id="其他项目"><a href="#其他项目" class="headerlink" title="其他项目"></a>其他项目</h3><p>（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。）</p>
<h2 id="JKL公司-（-2010年3月-2012年8月-）"><a href="#JKL公司-（-2010年3月-2012年8月-）" class="headerlink" title="JKL公司 （ 2010年3月 ~ 2012年8月 ）"></a>JKL公司 （ 2010年3月 ~ 2012年8月 ）</h2><h3 id="MNO项目"><a href="#MNO项目" class="headerlink" title="MNO项目"></a>MNO项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>
<h3 id="PQR项目"><a href="#PQR项目" class="headerlink" title="PQR项目"></a>PQR项目</h3><p>我在此项目负责了哪些工作，分别在哪些地方做得出色/和别人不一样/成长快，这个项目中，我最困难的问题是什么，我采取了什么措施，最后结果如何。这个项目中，我最自豪的技术细节是什么，为什么，实施前和实施后的数据对比如何，同事和领导对此的反应如何。</p>
<h3 id="其他项目-1"><a href="#其他项目-1" class="headerlink" title="其他项目"></a>其他项目</h3><p>（每个公司写2~3个核心项目就好了，如果你有非常大量的项目，那么按分类进行合并，每一类选一个典型写出来。其他的一笔带过即可。）</p>
<hr>
<h1 id="开源项目和作品"><a href="#开源项目和作品" class="headerlink" title="开源项目和作品"></a>开源项目和作品</h1><p>（这一段用于放置工作以外的、可证明你的能力的材料）</p>
<h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><p>（对于程序员来讲，没有什么比Show me the code能有说服力了）</p>
<ul>
<li><a href="http://github.com/yourname/projectname" target="_blank" rel="external">STU</a> : 项目的简要说明，Star和Fork数多的可以注明</li>
<li><a href="http://github.com/yourname/projectname" target="_blank" rel="external">WXYZ</a> : 项目的简要说明，Star和Fork数多的可以注明</li>
</ul>
<h2 id="技术文章"><a href="#技术文章" class="headerlink" title="技术文章"></a>技术文章</h2><p>（挑选你写作或翻译的技术文章，好的文章可以从侧面证实你的表达和沟通能力，也帮助招聘方更了解你）</p>
<ul>
<li><a href="http://get.jobdeer.com/706.get" target="_blank" rel="external">一个产品经理眼中的云计算：前生今世和未来</a></li>
<li><a href="http://get.jobdeer.com/343.get" target="_blank" rel="external">来自HeroKu的HTTP API 设计指南(翻译文章)</a> （ <code>好的翻译文章可以侧证你对英文技术文档的阅读能力</code>）</li>
</ul>
<h2 id="演讲和讲义"><a href="#演讲和讲义" class="headerlink" title="演讲和讲义"></a>演讲和讲义</h2><p>（放置你代表公司在一些技术会议上做过的演讲，以及你在公司分享时制作的讲义）</p>
<ul>
<li>2014架构师大会演讲：<a href="http://jobdeer.com" target="_blank" rel="external">如何通过Docker优化内部开发</a><ul>
<li>9月公司内部分享：<a href="http://jobdeer.com" target="_blank" rel="external">云计算的前生今世</a></li>
</ul>
</li>
</ul>
<h1 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h1><p>（我一般主张将技能清单写入到工作经历里边去。不过很难完整，所以有这么一段也不错）</p>
<p>以下均为我熟练使用的技能</p>
<ul>
<li>Web开发：PHP/Hack/Node</li>
<li>Web框架：ThinkPHP/Yaf/Yii/Lavaral/LazyPHP</li>
<li>前端框架：Bootstrap/AngularJS/EmberJS/HTML5/Cocos2dJS/ionic</li>
<li>前端工具：Bower/Gulp/SaSS/LeSS/PhoneGap</li>
<li>数据库相关：MySQL/PgSQL/PDO/SQLite</li>
<li>版本管理、文档和自动化部署工具：Svn/Git/PHPDoc/Phing/Composer</li>
<li>单元测试：PHPUnit/SimpleTest/Qunit</li>
<li>云和开放平台：SAE/BAE/AWS/微博开放平台/微信应用开发</li>
</ul>
<h2 id="参考技能关键字"><a href="#参考技能关键字" class="headerlink" title="参考技能关键字"></a>参考技能关键字</h2><p>本技能关键字列表是从最近招聘Android的数百份JD中统计出来的，括号中是出现的词频。如果你的简历要投递给有机器（简历分选系统）和不如机器（不懂技术的HR）筛选简历环节的地方，请一定从下边高频关键词中选择5～10个适合你自己的。</p>
<ul>
<li>android(1830)</li>
<li>java(386)</li>
<li>ui(180)</li>
<li>app(178)</li>
<li>http(149)</li>
<li>sdk(135)</li>
<li>tcp(95)</li>
<li>socket(93)</li>
<li>api(60)</li>
<li>xml(48)</li>
<li>framework(48)</li>
<li>eclipse(41)</li>
<li>linux(38)</li>
<li>json(28)</li>
<li>ndk(27)</li>
<li>ios(27)</li>
<li>sqlite(26)</li>
<li>andriod(25) 2%的HR把android给写错了 T_T</li>
<li>html5(25)</li>
<li>web(23)</li>
<li>github(21)</li>
<li>jni(20)</li>
<li>svn(15)</li>
<li>gui(14)</li>
<li>git(13)</li>
<li>wifi(10)</li>
<li>3g(10)</li>
<li>j2me(10)</li>
<li>mysql(10)</li>
<li>oracle(9)</li>
<li>html(9)</li>
<li>sql(8)</li>
<li>tv(8)</li>
<li>mvc(8)</li>
<li>lbs(8)</li>
<li>code review(7)</li>
<li>im(7)</li>
<li>mobile(6)</li>
<li>view(6)</li>
<li>stackoverflow(6)</li>
<li>xmpp(6)</li>
<li>o2o(5)</li>
<li>ue(5)</li>
<li>objective(5)</li>
<li>js(5)</li>
<li>blog(5)</li>
<li>andorid(5)</li>
<li>rom(5)</li>
<li>launcher(5)</li>
<li>restful(5)</li>
<li>webservice(4)</li>
<li>apk(4)</li>
<li>androidsdk(4)</li>
<li>oo(4)</li>
<li>javascript(4)</li>
<li>j2ee(4)</li>
<li>opengl(4)</li>
<li>uml(4)</li>
<li>sms(3)</li>
<li>windows(3)</li>
<li>market(3)</li>
<li>audio(3)</li>
<li>httptps(3)</li>
<li>udp(3)</li>
<li>store(3)</li>
<li>php(3)</li>
<li>unity3d(3)</li>
<li>native(3)</li>
<li>webview(3)</li>
</ul>
<hr>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[宽高比可配置的ImageView-AspectRatioImageView]]></title>
      <url>http://sherlockshi.github.io/2016/10/02/15_Android/1540_Widget/%E5%AE%BD%E9%AB%98%E6%AF%94%E5%8F%AF%E9%85%8D%E7%BD%AE%E7%9A%84ImageView-AspectRatioImageView/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Github项目地址：<br><a href="https://github.com/SherlockShi/AspectRatioImageView" target="_blank" rel="external">https://github.com/SherlockShi/AspectRatioImageView</a></p>
</blockquote>
<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在项目开发过程中，经常会有这样的情况：美工MM切好一张图，个人信息界面顶部的背景，美美的，但是要求宽高比例一定要5：3，不然图片会变形。好，说干就干。</p>
<p>width肯定是要match_parent了，图片宽度才能与屏幕宽度一致，但是高度呢？wrap_content？那肯定不行，图片肯定变形了。某个固定的高度值呢？那也不行。</p>
<a id="more"></a>
<p>如此，便有了这个方便的自定义View - <code>AspectRatioImageView</code>，简单得只需要像普通的ImageView一样使用，再配置一定的<code>宽度比例值</code>、<code>高度比例值</code>，就可轻松实现上面的需求了。</p>
<h1 id="二、一言不合就上图"><a href="#二、一言不合就上图" class="headerlink" title="二、一言不合就上图"></a>二、一言不合就上图</h1><p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-9-30/83520279.jpg" width="210" height="400" alt="AspectRatioImageView"></p>
<h1 id="三、使用方法"><a href="#三、使用方法" class="headerlink" title="三、使用方法"></a>三、使用方法</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>使用Gradle依赖:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    compile <span class="string">'com.sherlockshi.widget:aspectratioimageview:1.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>或使用Maven依赖:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.sherlockshi.widget&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;aspectratioimageview&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0.1&lt;/version&gt;</span><br><span class="line">  &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>像使用ImageView一样，在XML文件中使用:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.sherlockshi.widget.AspectRatioImageView</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span><br><span class="line">    <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></span><br><span class="line">    <span class="attr">app:width_ratio</span>=<span class="string">"4"</span></span><br><span class="line">    <span class="attr">app:height_ratio</span>=<span class="string">"2"</span></span><br><span class="line">    <span class="attr">android:src</span>=<span class="string">"..."</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>AspectRatioImageView有以下两个属性:<br><code>width_ratio</code>: 宽度比例值，类型为integer<br><code>height_ratio</code>: 高度比例值，类型为integer    </p>
<blockquote>
<p>以上两个属性，只要有一个属性未设置，就会使用默认比例3:2.</p>
</blockquote>
<p>以上，你就可以和美工MM愉快地出去喝一杯了，不不，你就可以轻松实现项目需求了。</p>
<p>PS：欢迎关注<a href="http://sherlockshi.github.io/">SherlockShi博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo常用命令]]></title>
      <url>http://sherlockshi.github.io/2016/10/02/30_%E5%8D%9A%E5%AE%A2/3005_Hexo/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="一、启动服务预览"><a href="#一、启动服务预览" class="headerlink" title="一、启动服务预览"></a>一、启动服务预览</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p><code>hexo s</code> = hexo server</p>
<h1 id="二、快捷部署"><a href="#二、快捷部署" class="headerlink" title="二、快捷部署"></a>二、快捷部署</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p><code>hexo clean</code> #清除缓存 网页正常情况下可以忽略此条命令<br><code>hexo g</code> == hexo generate #生成静态网页<br><code>hexo d</code> == hexo deploy   #开始部署  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Android Studio把自己的Android library分发到JCenter]]></title>
      <url>http://sherlockshi.github.io/2016/09/29/15_Android/1555_Maven/%E4%BD%BF%E7%94%A8Android%20Studio%E6%8A%8A%E8%87%AA%E5%B7%B1%E7%9A%84Android%20library%E5%88%86%E5%8F%91%E5%88%B0jCenter/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果你想在Android Studio中引入一个library到你的项目，你只需添加如下的一行代码到模块的build.gradle文件中:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.sherlockshi.widget:aspectratioimageview:1.0.1'</span></span><br></pre></td></tr></table></figure>
<p>就是如此简单的一行代码，你就可以使用这个library了。</p>
<a id="more"></a>
<p>酷呆了。不过你可能很好奇Android Studio是从哪里得到这个library的。这篇文章将详细讲解这是怎么回事，包括如何把你的库发布出去分享给世界各地的其他开发者，这样不仅可以让世界更美好，还可以耍一次酷。</p>
<h1 id="一、Android-studio-是从哪里得到库的？"><a href="#一、Android-studio-是从哪里得到库的？" class="headerlink" title="一、Android studio 是从哪里得到库的？"></a>一、Android studio 是从哪里得到库的？</h1><p>先从这个简单的问题开始，我相信不是每个人都完全明白Android studio 是从哪里得到这些library的。莫非就是Android studio 从google搜索然后下载了一个合适的给我们？</p>
<p>呵呵，没那么复杂。Android Studio是从build.gradle里面定义的Maven 仓库服务器上下载library的。Apache Maven是Apache开发的一个工具，提供了用于贡献library的文件服务器。总的来说，只有两个标准的Android library文件服务器：<code>JCenter</code> 和 <code>Maven Central</code>。</p>
<h2 id="1-JCenter"><a href="#1-JCenter" class="headerlink" title="1. JCenter"></a>1. JCenter</h2><p>JCenter是一个由<code>bintray.com</code>维护的Maven仓库 。你可以在<a href="http://jcenter.bintray.com/" target="_blank" rel="external">这里</a>看到整个仓库的内容。<br>我们在项目的build.gradle 文件中如下定义仓库，就能使用JCenter了：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-Maven-Central"><a href="#2-Maven-Central" class="headerlink" title="2. Maven Central"></a>2. Maven Central</h2><p>Maven Central 则是由sonatype.org维护的Maven仓库。你可以在这里看到整个仓库。  </p>
<blockquote>
<p>注：不管是JCenter还是Maven Central ，两者都是Maven仓库  </p>
</blockquote>
<p>我们在项目的build.gradle 文件中如下定义仓库，就能使用Maven Central了：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，虽然JCenter和Maven Central 都是标准的 android library仓库，但是它们维护在完全不同的服务器上，由不同的人提供内容，两者之间毫无关系。在JCenter上有的可能 Maven Central 上没有，反之亦然。</p>
<p>除了两个标准的服务器之外，如果我们使用的library的作者是把该library放在自己的服务器上，我们还可以自己定义特有的Maven仓库服务器。Twitter的Fabric.io 就是这种情况，它们在 <a href="https://maven.fabric.io/public" target="_blank" rel="external">https://maven.fabric.io/public</a> 上维护了一个自己的Maven仓库。如果你想使用Fabric.io的library，你必须自己如下定义仓库的url。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123; url <span class="string">'https://maven.fabric.io/public'</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在里面使用相同的方法获取一个library:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.crashlytics.sdk.android:crashlytics:2.2.4@aar'</span></span><br></pre></td></tr></table></figure>
<p>但是将library上传到标准的服务器与自建服务器，哪种方法更好呢？当然是前者。如果将我们的library公开，其他开发者除了一行定义依赖名的代码之外不需要定义任何东西。因此这篇文章中，我们将只关注对开发者更友好的JCenter 和 Maven Central 。</p>
<p>实际上可以在Android Studio上使用的除了Maven 仓库之外还有另外一种仓库：Ivy 仓库 。但是根据我的经验来看，我还没看到任何人用过它，包括我，因此本文就直接忽略了。</p>
<h1 id="二、理解JCenter和Maven-Central"><a href="#二、理解JCenter和Maven-Central" class="headerlink" title="二、理解JCenter和Maven Central"></a>二、理解JCenter和Maven Central</h1><p>为何有两个标准的仓库？</p>
<p>事实上两个仓库都具有相同的使命：提供Java或者Android library服务。上传到哪个（或者都上传）取决于开发者。</p>
<p>起初，Android Studio 选择Maven Central作为默认仓库。如果你使用老版本的Android Studio创建一个新项目，mavenCentral()会自动的定义在build.gradle中。</p>
<p>但是Maven Central的最大问题是对开发者不够友好。上传library异常困难。上传上去的开发者都是某种程度的极客。同时还因为诸如安全方面的其他原因，Android Studio团队决定把默认的仓库替换成JCenter。正如你看到的，一旦使用最新版本的Android Studio创建一个项目，JCenter()自动被定义，而不是mavenCentral()。</p>
<p>有许多将Maven Central替换成JCenter的理由，下面是几个主要的原因。</p>
<ul>
<li>JCenter通过CDN发送library，开发者可以享受到更快的下载体验。</li>
<li>JCenter是全世界最大的Java仓库，因此在Maven Central 上有的，在JCenter上也极有可能有。换句话说JCenter是Maven Central的<code>超集</code>。</li>
<li>上传library到仓库很简单，不需要像在Maven Central上做很多复杂的事情。</li>
<li>友好的用户界面</li>
<li>如果你想把library上传到Maven Central ，你可以在bintray网站上直接点击一个按钮就能实现。</li>
</ul>
<p>基于上面的原因以及我自己的经验，可以说替换到JCenter是明智之举。</p>
<p>所以我们这篇文章将把重心放在JCenter，反正如果你能成功把library放在JCenter，转到 Maven Central 是非常容易的事情。</p>
<h1 id="三、gradle是如何从仓库上获取一个library的？"><a href="#三、gradle是如何从仓库上获取一个library的？" class="headerlink" title="三、gradle是如何从仓库上获取一个library的？"></a>三、gradle是如何从仓库上获取一个library的？</h1><p>在讨论如何上传library到JCenter之前，我们先看看gradle是如何从仓库获取library的。比如我们在 build.gradle输入如下代码的时候，这些库是如果奇迹般下载到我们的项目中的。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.sherlockshi.widget:aspectratioimageview:1.0.1'</span></span><br></pre></td></tr></table></figure>
<p>一般来说，我们需要知道library的字符串形式，包含3部分</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GROUP_ID:</span><span class="string">ARTIFACT_ID:</span>VERSION</span><br></pre></td></tr></table></figure>
<p>上面的例子中，GROUP_ID是<code>com.sherlockshi.widget</code>，ARTIFACT_ID是<code>aspectratioimageview</code>，VERSION是<code>1.0.1</code>。</p>
<p>GROUP_ID定义了library的group。有可能在同样的上下文中存在多个不同功能的library。如果library具有相同的group，那么它们将共享一个GROUP_ID。通常我们以开发者包名紧跟着library的group名称来命名，比如com.squareup.picasso。然后ARTIFACT_ID中是library的真实名称。至于VERSION，就是版本号而已，虽然可以是任意文字，但是我建议设置为x.y.z的形式，如果喜欢还可以加上beta这样的后缀。</p>
<p>下面是Square library的一个例子。你可以看到每个都可以很容易的分辨出library和开发者的名称。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  compile <span class="string">'com.squareup:otto:1.3.7'</span></span><br><span class="line">  compile <span class="string">'com.squareup.picasso:picasso:2.5.2'</span></span><br><span class="line">  compile <span class="string">'com.squareup.okhttp:okhttp:2.4.0'</span></span><br><span class="line">  compile <span class="string">'com.squareup.retrofit:retrofit:1.9.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么在添加了上面的依赖之后会发生什么呢？简单。Gradle会询问Maven仓库服务器这个library是否存在，如果是，gradle会获得请求library的路径，一般这个路径都是这样的形式：GROUP_ID/ARTIFACT_ID/VERSION_ID。比如可以在<a href="http://jcenter.bintray.com/com/squareup/otto/1.3.7" target="_blank" rel="external">http://jcenter.bintray.com/com/squareup/otto/1.3.7</a> 和 <a href="https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/" target="_blank" rel="external">https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/</a><br>下获得com.squareup:otto:1.3.7的library文件。</p>
<p>然后Android Studio 将下载这些文件到我们的电脑上，与我们的项目一起编译。整个过程就是这么简单，一点都不复杂。</p>
<p>我相信你应该清楚的知道从仓库上下载的library只是存储在仓库服务器上的jar 或者aar文件而已。有点类似于自己去下载这些文件，拷贝然后和项目一起编译。但是使用gradle依赖管理的最大好处是你除了添加几行文字之外啥也不做。library一下子就可以在项目中使用了。</p>
<h1 id="四、了解aar文件"><a href="#四、了解aar文件" class="headerlink" title="四、了解aar文件"></a>四、了解aar文件</h1><p>等等，我刚才说了仓库中存储的有两种类型的library：jar 和 aar。jar文件大家都知道，但是什么是aar文件呢？</p>
<p>aar文件时在jar文件之上开发的。之所以有它是因为有些Android Library需要植入一些安卓特有的文件，比如AndroidManifest.xml，资源文件，Assets或者JNI。这些都不是jar文件的标准。</p>
<p>因此aar文件就时发明出来包含所有这些东西的。总的来说它和jar一样只是普通的zip文件，不过具有不同的文件结构。jar文件以classes.jar的名字被嵌入到aar文件中。其余的文件罗列如下：<br>– /AndroidManifest.xml (mandatory)<br>– /classes.jar (mandatory)<br>– /res/ (mandatory)<br>– /R.txt (mandatory)<br>– /assets/ (optional)<br>– /libs/.jar (optional)<br>– /jni//.so (optional)<br>– /proguard.txt (optional)<br>– /lint.jar (optional)<br>可以看到.aar文件是专门为安卓设计的。因此这篇文章将教你如何创建与上传一个aar形式的library。</p>
<h1 id="五、如何上传library到JCenter"><a href="#五、如何上传library到JCenter" class="headerlink" title="五、如何上传library到JCenter"></a>五、如何上传library到JCenter</h1><p>我相信你已经知道了仓库系统的大体工作原理。现在我们来开始最重要的部分：上传。这个任务和如何上传library文件到<a href="http://jcenter.bintray.com" target="_blank" rel="external">http://jcenter.bintray.com</a> 一样简单。如果做到，这个library就算发布了。好吧，有两个需要考虑：如何创建aar文件以及如何上传构建的文件到仓库。</p>
<p>虽然需要若干步骤，但是我还是想强调这事并不复杂，因为已经准备好了所有事情。整个过程如下图：<br><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-1/64566263.jpg" alt=""></p>
<p>因为细节比较多，我分为以下几个部分，一步一步的详细解释清楚。</p>
<h2 id="1-在bintray上创建package"><a href="#1-在bintray上创建package" class="headerlink" title="1. 在bintray上创建package"></a>1. 在bintray上创建package</h2><p><strong>第一步</strong></p>
<p>在bintray.com上注册一个账号。（注册过程很简单，自己完成，也可以直接使用Github账号）</p>
<p><strong>第二步</strong></p>
<p>完成注册之后，登录网站，然后点击+号<br><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-1/13698614.jpg" alt=""></p>
<p><strong>第三步</strong></p>
<p>输入Repository相关信息，创建一个Repository<br><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-1/26172115.jpg" alt=""></p>
<p><strong>第四步</strong></p>
<p>点击打开刚才创建好的Repository<br><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-1/78523250.jpg" alt=""></p>
<p><strong>第五步</strong></p>
<p>点击<code>Add New Package</code>，为我们的library创建一个新的package<br><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-1/98586757.jpg" alt=""></p>
<p><strong>第六步</strong></p>
<p>按页面要求填写相关信息<br><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-2/47591545.jpg" alt=""></p>
<p>完工！现在你有了自己在Bintray上的Maven仓库，可以准备上传library到上面了。</p>
<h2 id="2-准备一个Android-Studio项目"><a href="#2-准备一个Android-Studio项目" class="headerlink" title="2. 准备一个Android Studio项目"></a>2. 准备一个Android Studio项目</h2><p>很多情况下，我们需要同时上传一个以上的library到仓库，也可能不需要上传东西。因此我建议最好将每部分分成一个Module。最好分成两个module，一个Application Module一个Library Module。Application Module用于展示库的用法，Library Module是library的源代码。如果你的项目有一个以上的library，尽量创建另外的module：1个 module对应1 个library。<br><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-1/61816057.jpg" alt=""><br>我相信大家知道如何创建一个新的module，因此就不会深入讲解这个问题了。其实很简单，基本就是选择 <code>File</code> -&gt; <code>New</code> -&gt; <code>Module</code>，选择<code>Android Library</code>，然后就完了。</p>
<p><strong>添加bintray插件</strong></p>
<p>我们需要修改<code>项目的build.gradle</code>文件中的依赖部分，如下：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    classpath <span class="string">'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'</span></span><br><span class="line">    classpath <span class="string">'com.github.dcendents:android-maven-gradle-plugin:1.4.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>配置Bintray账号以及开发者信息</strong></p>
<p>接下来我们将修改<code>local.properties</code>。在里面定义api key的用户名以及被创建key的密码，用于bintray的认证。之所以要把这些东西放在这个文件是因为这些信息时比较敏感的，不应该到处分享，包括版本控制里面。幸运的是在创建项目的时候local.properties文件就已经被添加到.gitignore了。因此这些敏感数据不会被误传到git服务器。</p>
<p>下面是要添加的代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#bintray</span><br><span class="line">bintray.user=******</span><br><span class="line">bintray.apikey=******</span><br><span class="line"></span><br><span class="line">#developer</span><br><span class="line">developer.id=******</span><br><span class="line">developer.name=******</span><br><span class="line">developer.email=******</span><br></pre></td></tr></table></figure>
<ul>
<li>bintray.user：你的Bintray的用户名</li>
<li>bintray.apikey：你的的Bintray的API Key,可以在<code>Edit Profile</code>页面的 <code>API Key</code> 选项卡中找到</li>
<li>developer.id：通常是你在开源社区的昵称</li>
<li>developer.name：你的姓名</li>
<li>developer.email：你的邮箱</li>
</ul>
<p><strong>配置项目信息</strong></p>
<p>在<code>library module</code>目录下新建<code>project.properties</code>文件，输入以下内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#project</span><br><span class="line">project.name=AspectRatioImageView</span><br><span class="line">project.bintrayRepo=android-widgets</span><br><span class="line">project.groupId=com.sherlockshi.widget</span><br><span class="line">project.artifactId=aspectratioimageview</span><br><span class="line">project.packaging=aar</span><br><span class="line">project.siteUrl=https://github.com/SherlockShi/AspectRatioImageView</span><br><span class="line">project.gitUrl=https://github.com/SherlockShi/AspectRatioImageView.git</span><br><span class="line"></span><br><span class="line">#javadoc</span><br><span class="line">javadoc.name=AspectRatioImageView</span><br></pre></td></tr></table></figure>
<ul>
<li>project.name：项目名称</li>
<li>project.groupId：项目组ID</li>
<li>project.artifactId：项目ID</li>
<li>project.packaging：包类型，Android库是aar</li>
<li>project.siteUrl：项目官方网站的地址，没有的话就用Github上的地址</li>
<li>project.gitUrl：项目的Git地址</li>
<li>javadoc.name：生成的javadoc打开后主页显示的名称，通常跟项目名称一样即可</li>
</ul>
<p><strong>配置bintrayUpload.gradle</strong></p>
<blockquote>
<p>本步骤也可以直接使用别人打包好的脚本引入即可，但本文主要介绍原理，有需要的可以自己搜索。</p>
</blockquote>
<ul>
<li>首先在<code>library module</code>目录下新建<code>bintrayUpload.gradle</code>文件，直接粘贴以下内容：  </li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.github.dcendents.android-maven'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.jfrog.bintray'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// load properties</span></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties()</span><br><span class="line">File localPropertiesFile = project.file(<span class="string">"../local.properties"</span>);</span><br><span class="line"><span class="keyword">if</span>(localPropertiesFile.exists())&#123;</span><br><span class="line">    properties.load(localPropertiesFile.newDataInputStream())</span><br><span class="line">&#125;</span><br><span class="line">File projectPropertiesFile = project.file(<span class="string">"project.properties"</span>);</span><br><span class="line"><span class="keyword">if</span>(projectPropertiesFile.exists())&#123;</span><br><span class="line">    properties.load(projectPropertiesFile.newDataInputStream())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// read properties</span></span><br><span class="line"><span class="keyword">def</span> projectName = properties.getProperty(<span class="string">"project.name"</span>)</span><br><span class="line"><span class="keyword">def</span> projectBintrayRepo = properties.getProperty(<span class="string">"project.bintrayRepo"</span>)</span><br><span class="line"><span class="keyword">def</span> projectGroupId = properties.getProperty(<span class="string">"project.groupId"</span>)</span><br><span class="line"><span class="keyword">def</span> projectArtifactId = properties.getProperty(<span class="string">"project.artifactId"</span>)</span><br><span class="line"><span class="keyword">def</span> projectVersionName = android.defaultConfig.versionName</span><br><span class="line"><span class="keyword">def</span> projectPackaging = properties.getProperty(<span class="string">"project.packaging"</span>)</span><br><span class="line"><span class="keyword">def</span> projectSiteUrl = properties.getProperty(<span class="string">"project.siteUrl"</span>)</span><br><span class="line"><span class="keyword">def</span> projectGitUrl = properties.getProperty(<span class="string">"project.gitUrl"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> developerId = properties.getProperty(<span class="string">"developer.id"</span>)</span><br><span class="line"><span class="keyword">def</span> developerName = properties.getProperty(<span class="string">"developer.name"</span>)</span><br><span class="line"><span class="keyword">def</span> developerEmail = properties.getProperty(<span class="string">"developer.email"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> bintrayUser = properties.getProperty(<span class="string">"bintray.user"</span>)</span><br><span class="line"><span class="keyword">def</span> bintrayApikey = properties.getProperty(<span class="string">"bintray.apikey"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> javadocName = properties.getProperty(<span class="string">"javadoc.name"</span>)</span><br><span class="line"></span><br><span class="line">group = projectGroupId</span><br><span class="line"></span><br><span class="line"><span class="comment">// This generates POM.xml with proper parameters</span></span><br><span class="line">install &#123;</span><br><span class="line">    repositories.mavenInstaller &#123;</span><br><span class="line">        pom &#123;</span><br><span class="line">            project &#123;</span><br><span class="line">                name projectName</span><br><span class="line">                groupId projectGroupId</span><br><span class="line">                artifactId projectArtifactId</span><br><span class="line">                version projectVersionName</span><br><span class="line">                packaging projectPackaging</span><br><span class="line">                url projectSiteUrl</span><br><span class="line">                licenses &#123;</span><br><span class="line">                    license &#123;</span><br><span class="line">                        name <span class="string">'The Apache Software License, Version 2.0'</span></span><br><span class="line">                        url <span class="string">'http://www.apache.org/licenses/LICENSE-2.0.txt'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                developers &#123;</span><br><span class="line">                    developer &#123;</span><br><span class="line">                        id developerId</span><br><span class="line">                        name developerName</span><br><span class="line">                        email developerEmail</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                scm &#123;</span><br><span class="line">                    connection projectGitUrl</span><br><span class="line">                    developerConnection projectGitUrl</span><br><span class="line">                    url projectSiteUrl</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.writeTo(<span class="string">"$buildDir/poms/pom-default.xml"</span>).writeTo(<span class="string">"pom.xml"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This generates sources.jar</span></span><br><span class="line">task sourcesJar(<span class="string">type:</span> Jar) &#123;</span><br><span class="line">    from android.sourceSets.main.java.srcDirs</span><br><span class="line">    classifier = <span class="string">'sources'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task javadoc(<span class="string">type:</span> Javadoc) &#123;</span><br><span class="line">    source = android.sourceSets.main.java.srcDirs</span><br><span class="line">    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This generates javadoc.jar</span></span><br><span class="line">task javadocJar(<span class="string">type:</span> Jar, <span class="string">dependsOn:</span> javadoc) &#123;</span><br><span class="line">    classifier = <span class="string">'javadoc'</span></span><br><span class="line">    from javadoc.destinationDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">artifacts &#123;</span><br><span class="line">    archives javadocJar</span><br><span class="line">    archives sourcesJar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// javadoc configuration</span></span><br><span class="line">javadoc &#123;</span><br><span class="line">    options&#123;</span><br><span class="line">        encoding <span class="string">"UTF-8"</span></span><br><span class="line">        charSet <span class="string">'UTF-8'</span></span><br><span class="line">        author <span class="literal">true</span></span><br><span class="line">        version projectVersionName</span><br><span class="line">        links <span class="string">"http://docs.oracle.com/javase/7/docs/api"</span></span><br><span class="line">        title javadocName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bintray configuration</span></span><br><span class="line">bintray &#123;</span><br><span class="line">    user = bintrayUser</span><br><span class="line">    key = bintrayApikey</span><br><span class="line">    configurations = [<span class="string">'archives'</span>]</span><br><span class="line">    pkg &#123;</span><br><span class="line">        repo = projectBintrayRepo</span><br><span class="line">        name = projectName</span><br><span class="line">        websiteUrl = projectSiteUrl</span><br><span class="line">        vcsUrl = projectGitUrl</span><br><span class="line">        licenses = [<span class="string">"Apache-2.0"</span>]</span><br><span class="line">        publish = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>然后修改你的<code>library module</code>的<code>build.gradle</code>文件，在最后加上：</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">from:</span> <span class="string">"bintrayUpload.gradle"</span></span><br></pre></td></tr></table></figure>
<h2 id="3-把library上传到你的bintray空间"><a href="#3-把library上传到你的bintray空间" class="headerlink" title="3. 把library上传到你的bintray空间"></a>3. 把library上传到你的bintray空间</h2><p>打开终端进入项目目录下，执行<code>gradlew bintrayUpload</code>命令即可</p>
<p>另外，如果你的本地已经配置了Gradle了，那么执行<code>gradle bintrayUpload</code>命令也可以。gradlew是Gradle的一层封装，如果你本地没有安装Gradle, gradlew就会自动下载Gradle。</p>
<p>在bintray的网页上检查一下你的package。你会发现在版本区域的变化。<br><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-1/52163301.jpg" alt=""></p>
<p>点击进去，进入Files选项卡，你会看见那里有我们所上传的library文件。</p>
<p>恭喜，你的library终于放在了互联网上，任何人都可以使用了！</p>
<p>不过也别高兴过头，library现在仍然只是在你自己的Maven仓库，而不是在JCenter上。如果有人想使用你的library，他必须定义仓库的url，如下：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">'https://dl.bintray.com/sherlockshi/android-widgets/'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'com.sherlockshi.widgets:aspectratioimageview:1.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你可以在bintray的web界面找到自己Maven仓库的url，或者直接吧nuuneoi替换成你的bintray用户名（因为前面部分其实都是一样的）。我还建议你直接访问那个链接，看看里面到底是什么。</p>
<p>但是，就如我们前面所讲的那样，让开发者去定义url这种复杂的事情并不是分享library的最佳方式。想象一下，使用10个library不得添加10个url？所以为了更好的体验，我们把library从自己的仓库传到JCenter上。</p>
<h2 id="4-同步bintray用户仓库到JCenter"><a href="#4-同步bintray用户仓库到JCenter" class="headerlink" title="4. 同步bintray用户仓库到JCenter"></a>4. 同步bintray用户仓库到JCenter</h2><p>把library同步到JCenter非常容易，只需访问网页在package界面<code>Linked To</code>区域点击右下角的<code>Add to JCenter</code>，什么也不用填，直接点击<code>Send</code>。</p>
<p>现在我们所能做的就是等待bintray团队审核我们的请求，大概4-5个小时。一旦同步的请求审核通过，你会收到一封确认此更改的邮件。现在我们去网页上确认，你会在 Linked To 部分看到已链接到JCenter仓库。</p>
<h2 id="5-用法"><a href="#5-用法" class="headerlink" title="5. 用法"></a>5. 用法</h2><p>从此之后，任何开发者都可以使用JCenter() repository 外加一行gradle脚本来使用我们的library了</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.sherlockshi.widget:aspectratioimageview:1.0.1'</span></span><br></pre></td></tr></table></figure>
<p>想检查一下自己的library在JCenter上是否存在？你可以直接访问<a href="http://jcenter.bintray.com" target="_blank" rel="external">http://jcenter.bintray.com</a> ，然后进入和你library的group id 以及artifact id匹配的目录。在本例中就是com -&gt; sherlockshi -&gt; widget -&gt; aspectratioimageview -&gt; 1.0.1。</p>
<p>请注意链接到JCenter是一个只需做一次的操作。如果你对你的package做了任何修改，比如上传了一个新版本的binary，删除了旧版本的binary等等，这些改变也会影响到JCenter。不过毕竟你自己的仓库和JCenter在不同的地方，所以需要等待2－3分钟让JCenter同步这些修改。</p>
<p>同时注意，如果你决定删除整个package，放在JCenter仓库上的library不会被删除。它们会像僵尸一样的存在，没有人再能删除它了。因此我建议，如果你想删除整个package，请在移除package之前先在网页上删除每一个版本。</p>
<p>恭喜！虽然需要许多步骤，但是每一步都很简单。而且大部分操作都是一劳永逸的。</p>
<p>期待能在上面看到你的library大作！</p>
<h1 id="六、踩坑经历"><a href="#六、踩坑经历" class="headerlink" title="六、踩坑经历"></a>六、踩坑经历</h1><h2 id="1-编译上传时，提示jar包未找到"><a href="#1-编译上传时，提示jar包未找到" class="headerlink" title="1. 编译上传时，提示jar包未找到"></a>1. 编译上传时，提示jar包未找到</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:aspectratioimageview:bintrayUpload: file /Users/sherlock/work/workspace/AndroidStudio/AspectRatioImageView/aspectratioimageview/build/libs/aspectratioimageview-1.0.1-javadoc.jar could not be found.</span><br><span class="line">:aspectratioimageview:bintrayUpload: file /Users/sherlock/work/workspace/AndroidStudio/AspectRatioImageView/aspectratioimageview/build/libs/aspectratioimageview-1.0.1-sources.jar could not be found.</span><br></pre></td></tr></table></figure>
<p>解决方法：<br>先执行<code>gradlew install</code>，再执行<code>gradlew bintrayUpload</code></p>
<h1 id="七、参考"><a href="#七、参考" class="headerlink" title="七、参考"></a>七、参考</h1><p><a href="http://www.devtf.cn/?p=760" target="_blank" rel="external">如何使用Android Studio把自己的Android library分发到JCenter和Maven Central</a></p>
<p><a href="https://github.com/xiaopansky/android-library-publish-to-jcenter" target="_blank" rel="external">5分钟发布Android Library项目到JCenter</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用natapp进行微信本地开发调试]]></title>
      <url>http://sherlockshi.github.io/2016/08/18/40_%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0/%E4%BD%BF%E7%94%A8natapp%E8%BF%9B%E8%A1%8C%E5%BE%AE%E4%BF%A1%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<h1 id="一、在本地部署微信公众平台服务器"><a href="#一、在本地部署微信公众平台服务器" class="headerlink" title="一、在本地部署微信公众平台服务器"></a>一、在本地部署微信公众平台服务器</h1><p>在eclipse中使用tomcat部署微信公众平台程序</p>
<a id="more"></a>
<h1 id="二、注册natapp"><a href="#二、注册natapp" class="headerlink" title="二、注册natapp"></a>二、注册natapp</h1><blockquote>
<p>参考<a href="https://natapp.cn/article/minecraft" target="_blank" rel="external">使用natapp超简单minecraft (我的世界) 映射开服,公网联机</a>  </p>
</blockquote>
<h2 id="1-购买一条tcp型隧道-免费-付费均可"><a href="#1-购买一条tcp型隧道-免费-付费均可" class="headerlink" title="1. 购买一条tcp型隧道,免费 付费均可."></a>1. 购买一条tcp型隧道,免费 付费均可.</h2><p><img src="https://cdn.natapp.cn/uploads/ueditor/php/upload/image/20160629/1467178441435956.jpeg" alt=""></p>
<h2 id="2-在后台-gt-我的隧道-找到刚才那条购买的隧道-点击配置-输入如下配置"><a href="#2-在后台-gt-我的隧道-找到刚才那条购买的隧道-点击配置-输入如下配置" class="headerlink" title="2. 在后台-&gt;我的隧道 找到刚才那条购买的隧道,点击配置,输入如下配置"></a>2. 在后台-&gt;我的隧道 找到刚才那条购买的隧道,点击配置,输入如下配置</h2><blockquote>
<p>因tomcat默认使用的端口号是8080，所以此处的本地端口可用<code>8080</code>  </p>
</blockquote>
<p><img src="https://cdn.natapp.cn/uploads/ueditor/php/upload/image/20160629/1467178723987028.jpeg" alt=""><br>配置好后,点击修改.</p>
<h2 id="3-下载natapp"><a href="#3-下载natapp" class="headerlink" title="3. 下载natapp"></a>3. 下载natapp</h2><p>在<a href="natapp.cn">natapp.cn</a>下载相应版本的natapp.cn，并解压<br><img src="https://cdn.natapp.cn/uploads/ueditor/php/upload/image/20160529/1464510369724565.jpeg" alt=""></p>
<h2 id="4-运行natapp"><a href="#4-运行natapp" class="headerlink" title="4. 运行natapp"></a>4. 运行natapp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">natapp -authtoken=ee3e7xxxxx</span><br></pre></td></tr></table></figure>
<p>在Linux/Mac 下 需要先给执行权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x natapp</span><br></pre></td></tr></table></figure>
<p>然后再运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./natapp -authtoken=ee3e7xxxxx</span><br></pre></td></tr></table></figure>
<p>运行成功,界面如下:</p>
<p><img src="https://cdn.natapp.cn/uploads/ueditor/php/upload/image/20160629/1467178873238844.jpeg" alt=""></p>
<h1 id="三、配置微信公众平台"><a href="#三、配置微信公众平台" class="headerlink" title="三、配置微信公众平台"></a>三、配置微信公众平台</h1><p>在微信公众平台注册公众号后，在基本配置界面，填写URL(<code>格式为：上一步映射出来的外网IP/工程名/入口方法名</code>)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp://ngrok.natapp.cn:33460/wechatsino/CoreServlet</span><br></pre></td></tr></table></figure>
<p>点击保存即可（其余配置请参考微信公众平台进行配置）</p>
<h1 id="四、调试"><a href="#四、调试" class="headerlink" title="四、调试"></a>四、调试</h1><p>此时，只要关注公众号后，发送消息或进行其它操作，微信公众平台就会把消息转发到上一步配置的URL对应的服务器，此处即为本地的工程，即可进行本地调试。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio配置应用签名]]></title>
      <url>http://sherlockshi.github.io/2016/07/30/15_Android/1505_%E5%AE%89%E5%85%A8/Android%20Studio%E9%85%8D%E7%BD%AE%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文主要参考：<br><a href="http://dxjia.cn/2016/03/04/config-signature-in-gradle-for-release-version/" target="_blank" rel="external">在gradle中为release版本配置签名</a></p>
</blockquote>
<p>任何一个Android APK 发布之前都会进行签名，没有签名的APK是无法在Android device上进行安装和使用的，而且对于发布到Google Play上的同一个应用，自始至终必须使用同一个签名文件，所以必须保存好签名文件。本文介绍如何在<code>build.gradle</code>中为release版本配置签名文件，这样在打包release版本时可以自动进行签名。</p>
<a id="more"></a>
<h1 id="明文配置"><a href="#明文配置" class="headerlink" title="明文配置"></a>明文配置</h1><p>一般来说，我们直接在Android Studio中配置签名文件，是使用明文配置的，如：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line"></span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            storeFile file(<span class="string">"/Users/xxx/release_key.jks"</span>)</span><br><span class="line">            storePassword <span class="string">"123456789"</span></span><br><span class="line">            keyAlias <span class="string">"release_key_alias"</span></span><br><span class="line">            keyPassword <span class="string">"987654321"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：此处的<code>storeFile</code>，如果是在Windows系统下，会是以下格式</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">storeFile file(<span class="string">"C\:\\Users\\xxx\\release_key.jks"</span>)</span><br></pre></td></tr></table></figure>
<p>这样在打包release版本时就会自动签名了。</p>
<h1 id="隐藏密码配置"><a href="#隐藏密码配置" class="headerlink" title="隐藏密码配置"></a>隐藏密码配置</h1><p>如果你的代码不会开源，或者是公司项目，公司会保护的很好，那么直接用上面的方式就可以了。但如果是开源项目，那么上面的写法就不太可取了 ，因为这样直接配置会暴露密码啊。接下来介绍如果隐藏密码进行配置：</p>
<blockquote>
<p>利用<code>property</code>，将密码和签名文件路径信息保存在项目根目录的<code>local.properties</code>文件里，因为这个文件一般都在<code>.gitignore</code>里自动配置了，所以不会上传出去。  </p>
</blockquote>
<p>在根目录的<code>local.properties</code>文件中配置以下内容：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">keystore.path=<span class="regexp">/Users/</span>xxx/release_key.jks</span><br><span class="line">keystore.password=<span class="number">123456789</span></span><br><span class="line">keystore.alias=release_key_alias</span><br><span class="line">keystore.alias_password=<span class="number">987654321</span></span><br></pre></td></tr></table></figure>
<p>然后在你的app目录的<code>build.gradle</code>文件中增加以下代码：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =====配置keystore start=====</span></span><br><span class="line"><span class="keyword">def</span> keystoreFilePath = <span class="string">''</span></span><br><span class="line"><span class="keyword">def</span> keystorePSW = <span class="string">''</span></span><br><span class="line"><span class="keyword">def</span> keystoreAlias = <span class="string">''</span></span><br><span class="line"><span class="keyword">def</span> keystoreAliasPSW = <span class="string">''</span></span><br><span class="line"><span class="comment">// default keystore file, PLZ config file path in local.properties</span></span><br><span class="line"><span class="keyword">def</span> keyfile = file(<span class="string">'s.keystore.temp'</span>)</span><br><span class="line"></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties()</span><br><span class="line"><span class="comment">// local.properties file in the root director</span></span><br><span class="line">properties.load(project.rootProject.file(<span class="string">'local.properties'</span>).newDataInputStream())</span><br><span class="line">keystoreFilePath = properties.getProperty(<span class="string">"keystore.path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (keystoreFilePath) &#123;</span><br><span class="line">    keystorePSW = properties.getProperty(<span class="string">"keystore.password"</span>)</span><br><span class="line">    keystoreAlias = properties.getProperty(<span class="string">"keystore.alias"</span>)</span><br><span class="line">    keystoreAliasPSW = properties.getProperty(<span class="string">"keystore.alias_password"</span>)</span><br><span class="line">    keyfile = file(keystoreFilePath)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =====配置keystore end=====</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            storeFile keyfile</span><br><span class="line">            storePassword keystorePSW</span><br><span class="line">            keyAlias keystoreAlias</span><br><span class="line">            keyPassword keystoreAliasPSW</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="keyword">if</span> (keyfile.exists()) &#123;</span><br><span class="line">                signingConfig signingConfigs.release</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就达到了隐藏的目的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android ScrollView无法match_parent的问题]]></title>
      <url>http://sherlockshi.github.io/2016/07/28/15_Android/1590_Others/Android%20ScrollView%E6%97%A0%E6%B3%95match_parent%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h1><p>Android ScrollView无法match_parent的问题</p>
<a id="more"></a>
<h1 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h1><p>在ScrollView的属性里加上：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ScrollView</span></span><br><span class="line">    <span class="attr">...</span></span><br><span class="line">    <span class="attr">android:fillViewport</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio常见问题]]></title>
      <url>http://sherlockshi.github.io/2016/07/24/15_Android/1530_%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/AndroidStudio/Android%20Studio%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Android Studio使用建议：将SDK Manager里面的相关工具提前下载下来，并定期更新  </p>
<ul>
<li>Tools目录：全部下载（包括SDK Tools、SDK Platform-tools、<strong>SDK Build-tools</strong>）    </li>
<li>各个版本的Android SDK：按需下载，一般下载SDK Platform、Documentation、APIs、Sources  </li>
<li>Extras目录：Android Support Repository、Android Support Library、Google Repository</li>
</ul>
</blockquote>
<a id="more"></a>
<h1 id="1-Gradle版本问题"><a href="#1-Gradle版本问题" class="headerlink" title="1. Gradle版本问题"></a>1. Gradle版本问题</h1><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Error:</span>A problem occurred configuring root project <span class="string">'XylqPda'</span>.</span><br><span class="line">&gt; Could not resolve all dependencies <span class="keyword">for</span> configuration <span class="string">':classpath'</span>.</span><br><span class="line">   &gt; Could not resolve com.android.tools.<span class="string">build:</span><span class="string">gradle:</span><span class="number">2.0</span><span class="number">.0</span>.</span><br><span class="line">     Required <span class="string">by:</span></span><br><span class="line">         :<span class="string">XylqPda:</span>unspecified</span><br><span class="line">      &gt; Could not resolve com.android.tools.<span class="string">build:</span><span class="string">gradle:</span><span class="number">2.0</span><span class="number">.0</span>.</span><br><span class="line">         &gt; Could not get resource <span class="string">'https://repo1.maven.org/maven2/com/android/tools/build/gradle/2.0.0/gradle-2.0.0.pom'</span>.</span><br><span class="line">            &gt; Could not GET <span class="string">'https://repo1.maven.org/maven2/com/android/tools/build/gradle/2.0.0/gradle-2.0.0.pom'</span>.</span><br><span class="line">               &gt; peer not authenticated</span><br><span class="line">      &gt; Could not resolve com.android.tools.<span class="string">build:</span><span class="string">gradle:</span><span class="number">2.0</span><span class="number">.0</span>.</span><br><span class="line">         &gt; Could not get resource <span class="string">'https://jcenter.bintray.com/com/android/tools/build/gradle/2.0.0/gradle-2.0.0.pom'</span>.</span><br><span class="line">            &gt; Could not GET <span class="string">'https://jcenter.bintray.com/com/android/tools/build/gradle/2.0.0/gradle-2.0.0.pom'</span>.</span><br><span class="line">               &gt; peer not authenticated</span><br></pre></td></tr></table></figure>
<p><strong>原因分析</strong></p>
<p>一般为Android Studio版本号和Gradle版本号不一致导致。</p>
<p><strong>解决方法</strong></p>
<p>将项目根目录下的build.gradle中dependencies内的</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath <span class="string">'com.android.tools.build:gradle:2.1.2'</span></span><br></pre></td></tr></table></figure>
<p>版本号设为跟Android Studio版本号一致。</p>
<h1 id="2-下载Build-tools失败"><a href="#2-下载Build-tools失败" class="headerlink" title="2. 下载Build-tools失败"></a>2. 下载Build-tools失败</h1><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Error:</span>failed to find Build Tools revision <span class="number">24.0</span><span class="number">.1</span></span><br><span class="line">Install Build Tools <span class="number">24.0</span><span class="number">.1</span> and sync project</span><br></pre></td></tr></table></figure>
<p><a href="http://blog.csdn.net/barryhappy/article/details/44813951" target="_blank" rel="external">http://blog.csdn.net/barryhappy/article/details/44813951</a></p>
<h1 id="3-更新-Gradle-错误"><a href="#3-更新-Gradle-错误" class="headerlink" title="3. 更新 Gradle 错误"></a>3. 更新 Gradle 错误</h1><p>停止在Refreshing Gradle Project ,有时新建项目的时候报 Gradle Project Compile Error 等等相关的问题<br><a href="http://www.cnblogs.com/neozhu/p/3525404.html" target="_blank" rel="external">http://www.cnblogs.com/neozhu/p/3525404.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle基础]]></title>
      <url>http://sherlockshi.github.io/2016/07/24/15_Android/1530_%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/AndroidStudio/Gradle%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="一、什么是Gradle？"><a href="#一、什么是Gradle？" class="headerlink" title="一、什么是Gradle？"></a>一、什么是Gradle？</h1><p>Gradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，取而代之的是一种基于Groovy的领域专用（DSL）语言。</p>
<a id="more"></a>
<h1 id="二、安装Gradle"><a href="#二、安装Gradle" class="headerlink" title="二、安装Gradle"></a>二、安装Gradle</h1><p>在Android Studio中新建项目成功后会下载Gradle，貌似这个过程不翻墙也是可以下载，但是访问特别慢，建议翻墙下载。那么下载的Gradle到什么地方呢？</p>
<p><code>Mac</code>上会默认下载到 <strong>/Users/&lt;用户名&gt;/.gradle/wrapper/dists</strong> 目录<br><code>Win</code>平台会默认下载到 <strong>C:\Users\&lt;用户名&gt;\.gradle\wrapper\dists</strong> 目录</p>
<p>你会看到这个目录下有个 gradle-x.xx-all 的文件夹, 如果下载实在太慢，但是又不想翻墙的话，可以自己手动到<a href="https://gradle.org/gradle-download/" target="_blank" rel="external"><strong>Gradle官网</strong></a>、或者<a href="https://jcenter.bintray.com/com/android/tools/build/gradle/" target="_blank" rel="external"><strong>jcenter</strong></a>里下载对应的版本，然后将下载的.zip文件复制到上述的gradle-x.xx-all 文件夹下，不过还是建议让它直接下载的好。</p>
<h1 id="三、项目中的-Gradle-相关目录和文件"><a href="#三、项目中的-Gradle-相关目录和文件" class="headerlink" title="三、项目中的 Gradle 相关目录和文件"></a>三、项目中的 Gradle 相关目录和文件</h1><h2 id="1-app-build-gradle"><a href="#1-app-build-gradle" class="headerlink" title="1. app/build.gradle"></a>1. app/build.gradle</h2><p>这个文件是app文件夹下这个Module的gradle配置文件，也可以算是整个项目最主要的gradle配置文件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明是Android程序</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    <span class="comment">// 编译SDK的版本</span></span><br><span class="line">    compileSdkVersion <span class="number">21</span></span><br><span class="line">    <span class="comment">// build tools的版本</span></span><br><span class="line">    buildToolsVersion <span class="string">"21.1.1"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">    	<span class="comment">// 应用的包名</span></span><br><span class="line">        applicationId <span class="string">"me.storm.ninegag"</span></span><br><span class="line">        minSdkVersion <span class="number">14</span></span><br><span class="line">        targetSdkVersion <span class="number">21</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0.0"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java版本</span></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_7</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_7</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            <span class="comment">// debug模式</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="comment">// 是否进行混淆</span></span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            <span class="comment">// 混淆文件的位置</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.txt'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除lint检查的error</span></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">      abortOnError <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// 编译libs目录下的所有jar包</span></span><br><span class="line">    compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line">    compile <span class="string">'com.android.support:support-v4:21.0.2'</span></span><br><span class="line">    compile <span class="string">'com.etsy.android.grid:library:1.0.5'</span></span><br><span class="line">    compile <span class="string">'com.alexvasilkov:foldable-layout:1.0.1'</span></span><br><span class="line">    <span class="comment">// 编译extras目录下的ShimmerAndroid模块</span></span><br><span class="line">    compile project(<span class="string">':extras:ShimmerAndroid'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-gradle"><a href="#2-gradle" class="headerlink" title="2. gradle/"></a>2. gradle/</h2><p>这个目录下有个 wrapper 文件夹，里面可以看到有两个文件，我们主要看下 gradle-wrapper.properties 这个文件的内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#Mon Dec 28 10:00:20 PST 2015</span><br><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dists</span><br><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip</span><br></pre></td></tr></table></figure>
<p>可以看到里面声明了gradle的目录与下载路径以及当前项目使用的gradle版本，这些默认的路径我们一般不会更改的，这个文件里指明的gradle版本不对也是很多导包不成功的原因之一。</p>
<h2 id="3-build-gradle"><a href="#3-build-gradle" class="headerlink" title="3. build.gradle"></a>3. build.gradle</h2><p>这个文件是整个项目的gradle基础配置文件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.0.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>内容主要包含了两个方面：</p>
<ul>
<li>一个是声明仓库的源，这里可以看到是指明的jcenter(), 之前版本则是mavenCentral(), jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优。</li>
<li>另一个是声明了android gradle plugin的版本，android studio 1.0正式版必须要求支持gradle plugin 1.0的版本。</li>
</ul>
<h2 id="4-settings-gradle"><a href="#4-settings-gradle" class="headerlink" title="4. settings.gradle"></a>4. settings.gradle</h2><p>这个文件是全局的项目配置文件，里面主要声明一些需要加入gradle的module</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include <span class="string">':app'</span></span><br></pre></td></tr></table></figure>
<h1 id="四、Android-Studio中几个关于Gradle的不同概念"><a href="#四、Android-Studio中几个关于Gradle的不同概念" class="headerlink" title="四、Android Studio中几个关于Gradle的不同概念"></a>四、Android Studio中几个关于Gradle的不同概念</h1><h2 id="1-Gradle、Gradle-Plugin："><a href="#1-Gradle、Gradle-Plugin：" class="headerlink" title="1. Gradle、Gradle Plugin："></a>1. Gradle、Gradle Plugin：</h2><p>Gradle 是新一代的自动化构建工具，它是一个独立的项目，跟 AS、Android 无关，但是 Gradle 官方还是很看重 Android 开发的，Google 在推出 AS 的时候选中了 Gradle 作为构建工具，为了支持 Gradle 能在 AS 上使用，Google 做了个 AS 的插件叫 Android Gradle Plugin  ，所以我们能在 AS 上使用 Gradle 完全是因为这个插件的原因。在项目的根目录有个 build.gradle 文件，里面有这么一句代码：    </p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath <span class="string">'com.android.tools.build:gradle:2.1.2'</span></span><br></pre></td></tr></table></figure>
<p>这个就是依赖 gradle 插件的代码，后面的版本号代表的是 android gradle plugin 的版本，而不是 Gradle 的版本，这个是 Google 定的，跟 Gradle 官方没关系。  </p>
<h2 id="2-Gradle-Wrapper"><a href="#2-Gradle-Wrapper" class="headerlink" title="2. Gradle Wrapper"></a>2. Gradle Wrapper</h2><p>字面意思是Gradle的包装器，主要是这样的应用场景：<br>假设我们本地有多个项目，一个是比较老的项目，还用着 Gradle 1.0 的版本，一个是比较新的项目用了 Gradle 2.0 的版本，但是你两个项目肯定都想要同时运行的，如果你只装了 Gradle 1.0 的话那肯定不行，所以为了解决这个问题，Google 推出了 Gradle Wrapper 的概念，就是他在你每个项目都配置了一个指定版本的 Gradle ，你可以理解为每个 Android 项目本地都有一个小型的 Gradle ，通过这个每个项目你可以支持用不同的 Gradle 版本来构建项目。</p>
<h1 id="五、推荐阅读"><a href="#五、推荐阅读" class="headerlink" title="五、推荐阅读"></a>五、推荐阅读</h1><p><a href="http://stormzhang.com/android/2016/07/02/gradle-for-android-beginners/" target="_blank" rel="external">给 Android 初学者的 Gradle 知识普及</a><br><a href="http://stormzhang.com/android/2016/07/15/android-gradle-config/" target="_blank" rel="external">Android 开发你需要了解的 Gradle 配置</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android代码混淆问题汇总]]></title>
      <url>http://sherlockshi.github.io/2016/07/21/15_Android/1505_%E5%AE%89%E5%85%A8/Android%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h1 id="一、问题1"><a href="#一、问题1" class="headerlink" title="一、问题1"></a>一、问题1</h1><p>Android studio打包中遇到了这样的问题：</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning:Exception <span class="keyword">while</span> processing task java.io.IOException: The same input jar […….jar] is specified twice.</span><br></pre></td></tr></table></figure>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>打开<code>proguard-rules.pro</code>，<br>注释掉所有的-libraryjars行，或者直接删除，如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-libraryjars xxxx.jar</span></span><br></pre></td></tr></table></figure>
<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>build.gradle文件配置了</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">include:</span> <span class="string">'*.jar'</span>, <span class="string">dir:</span> <span class="string">'libs'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>里面已经添加过jar包，sdk 通过 proguard 混淆代码时默认已经将 lib目录中的 jar 都已经添加到打包脚本中，所以不需要再次手动添加。  </p>
<h1 id="二、问题2"><a href="#二、问题2" class="headerlink" title="二、问题2"></a>二、问题2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Warning:okio.DeflaterSink: can<span class="string">'t find referenced class org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement</span><br><span class="line">Warning:okio.Okio: can'</span>t find referenced class java.nio.file.Files</span><br><span class="line">Warning:okio.Okio: can<span class="string">'t find referenced class java.nio.file.Path</span><br><span class="line">Warning:okio.Okio: can'</span>t find referenced class java.nio.file.OpenOption</span><br><span class="line"></span><br><span class="line">Warning:Exception <span class="keyword">while</span> processing task java.io.IOException: Please correct the above warnings first.</span><br><span class="line">:app:transformClassesAndResourcesWithProguardForRelease FAILED</span><br><span class="line">Error:Execution failed <span class="keyword">for</span> task <span class="string">':app:transformClassesAndResourcesWithProguardForRelease'</span>.</span><br><span class="line">&gt; java.io.IOException: Please correct the above warnings first.</span><br></pre></td></tr></table></figure>
<h2 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># okio</span><br><span class="line">-dontwarn okio.**</span><br><span class="line">-keep class okio.** &#123;*;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、问题3"><a href="#三、问题3" class="headerlink" title="三、问题3"></a>三、问题3</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Warning:library class android.content.res.XmlResourceParser extends or implements program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Note: android.support.v4.text.ICUCompatApi23: can't find dynamically referenced class libcore.icu.ICU</span><br><span class="line">Note: android.support.v4.text.ICUCompatIcs: can't find dynamically referenced class libcore.icu.ICU</span><br><span class="line">Note: android.support.v7.internal.widget.DrawableUtils: can't find dynamically referenced class android.graphics.Insets</span><br><span class="line">Note: com.loc.ce: can't find dynamically referenced class android.telephony.MSimTelephonyManager</span><br><span class="line">Note: com.loc.ce: can't find dynamically referenced class android.telephony.TelephonyManager2</span><br><span class="line">Note: com.spd.sinoss.zxing.camera.FlashlightManager: can't find dynamically referenced class android.os.ServiceManager</span><br><span class="line">Note: com.spd.sinoss.zxing.camera.FlashlightManager: can't find dynamically referenced class android.os.IHardwareService$Stub</span><br><span class="line">Note: org.kobjects.util.ChainedRuntimeException: can't find dynamically referenced class org.kobjects.util.ChainedRuntimeExceptionSE</span><br><span class="line">Note: u.aly.ab: can't find dynamically referenced class com.ut.device.UTDevice</span><br><span class="line">Note: u.aly.ac: can't find dynamically referenced class android.os.SystemProperties</span><br><span class="line">Warning:library class android.content.Intent depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.content.IntentFilter depends on program class org.xmlpull.v1.XmlSerializer</span><br><span class="line">Warning:library class android.content.IntentFilter depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.content.res.ColorStateList depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.graphics.drawable.AnimationDrawable depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.graphics.drawable.BitmapDrawable depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.graphics.drawable.ClipDrawable depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.graphics.drawable.ColorDrawable depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.graphics.drawable.Drawable depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.graphics.drawable.GradientDrawable depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.graphics.drawable.InsetDrawable depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.graphics.drawable.LayerDrawable depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.graphics.drawable.NinePatchDrawable depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.graphics.drawable.ShapeDrawable depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.util.Xml depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.util.Xml depends on program class org.xmlpull.v1.XmlSerializer</span><br><span class="line">Warning:library class android.util.Xml depends on program class org.xmlpull.v1.XmlPullParser</span><br><span class="line">Warning:library class android.view.LayoutInflater depends on program class org.xmlpull.v1.XmlPullParser</span><br></pre></td></tr></table></figure>
<h2 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h2><p>删除ksoap jar里面的xmlpull相关类：</p>
<p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/sherlockshi/2016-10-20-Snip20161020_12.png" alt=""></p>
<ol>
<li>请确认项目中没有使用到【ksoap2-android-assembly-2.6.4-jar-with-dependencies.jar】包里面的xmlpull；</li>
<li>若未使用，可直接用zip软件打开jar包，然后删除xmlpull文件夹。</li>
<li>重新打包混淆即可正常使用。</li>
</ol>
<h2 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h2><p>项目中引用的【ksoap2-android-assembly-2.6.4-jar-with-dependencies.jar】包，此jar包里面的xmlpull与Android本身自带的类重复了，导致混淆打包报错。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HttpURLConnection用法]]></title>
      <url>http://sherlockshi.github.io/2016/07/19/15_Android/1525_%E7%BD%91%E7%BB%9C/HttpURLConnection%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原文链接：<br><a href="http://www.blogjava.net/supercrsky/articles/247449.html" target="_blank" rel="external">http://www.blogjava.net/supercrsky/articles/247449.html</a><br><a href="http://blog.csdn.net/woxueliuyun/article/details/43267365" target="_blank" rel="external">http://blog.csdn.net/woxueliuyun/article/details/43267365</a></p>
</blockquote>
<p>任何网络连接都需要经过socket才能连接，HttpURLConnection不需要设置socket，所以，HttpURLConnection并不是底层的连接，而是在底层连接上的一个请求。这就是为什么HttpURLConneciton只是一个抽象类，自身不能被实例化的原因。HttpURLConnection只能通过URL.openConnection()方法创建具体的实例。</p>
<a id="more"></a>
<p>虽然底层的网络连接可以被多个HttpURLConnection实例共享，但每一个HttpURLConnection实例只能发送一个请求。请求结束之后，应该调用HttpURLConnection实例的InputStream或OutputStream的close()方法以释放请求的网络资源，不过这种方式对于持久化连接没用。对于持久化连接，得用disconnect()方法关闭底层连接的socket。</p>
<h1 id="一、创建HttpURLConnection"><a href="#一、创建HttpURLConnection" class="headerlink" title="一、创建HttpURLConnection"></a>一、创建HttpURLConnection</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/xxx.do"</span>);    </span><br><span class="line"></span><br><span class="line">URLConnection rulConnection = url.openConnection();</span><br><span class="line"><span class="comment">// 此处的urlConnection对象实际上是根据URL的    </span></span><br><span class="line"><span class="comment">// 请求协议(此处是http)生成的URLConnection类    </span></span><br><span class="line"><span class="comment">// 的子类HttpURLConnection,故此处最好将其转化    </span></span><br><span class="line"><span class="comment">// 为HttpURLConnection类型的对象,以便用到    </span></span><br><span class="line"><span class="comment">// HttpURLConnection更多的API.如下:    </span></span><br><span class="line"></span><br><span class="line">HttpURLConnection httpUrlConnection = (HttpURLConnection) rulConnection;</span><br></pre></td></tr></table></figure>
<h1 id="二、设置HttpURLConnection参数"><a href="#二、设置HttpURLConnection参数" class="headerlink" title="二、设置HttpURLConnection参数"></a>二、设置HttpURLConnection参数</h1><blockquote>
<p>若为Get请求，不用设置下述参数，只需要最后一步的connect()即可  </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定请求的方法为"POST"，默认是GET    </span></span><br><span class="line">httpUrlConnection.setRequestMethod(<span class="string">"POST"</span>);    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置是否向httpUrlConnection输出，因为这个是post请求，参数要放在    </span></span><br><span class="line"><span class="comment">// http正文内，因此需要设为true, 默认情况下是false;    </span></span><br><span class="line">httpUrlConnection.setDoOutput(<span class="keyword">true</span>);    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置是否从httpUrlConnection读入，默认情况下是true;    </span></span><br><span class="line">httpUrlConnection.setDoInput(<span class="keyword">true</span>);    </span><br><span class="line"></span><br><span class="line"><span class="comment">// Post 请求不能使用缓存    </span></span><br><span class="line">httpUrlConnection.setUseCaches(<span class="keyword">false</span>);    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定传送的内容类型是可序列化的java对象    </span></span><br><span class="line"><span class="comment">// (如果不设此项,在传送序列化对象时,当WEB服务默认的不是这种类型时可能抛java.io.EOFException)    </span></span><br><span class="line">httpUrlConnection.setRequestProperty(<span class="string">"Content-type"</span>, <span class="string">"application/x-java-serialized-object"</span>);    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接，从上述url.openConnection()至此的配置必须要在connect之前完成，    </span></span><br><span class="line">httpUrlConnection.connect();</span><br></pre></td></tr></table></figure>
<h1 id="三、URLConnection建立连接"><a href="#三、URLConnection建立连接" class="headerlink" title="三、URLConnection建立连接"></a>三、URLConnection建立连接</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处getOutputStream会隐含的进行connect(即：如同调用上面的connect()方法，    </span></span><br><span class="line"><span class="comment">// 所以在开发中不调用上述的connect()也可以)。    </span></span><br><span class="line">OutputStream outStrm = httpUrlConnection.getOutputStream();</span><br><span class="line"><span class="comment">//getInputStream()也是同理。</span></span><br></pre></td></tr></table></figure>
<h1 id="四、HttpURLConnection发送请求"><a href="#四、HttpURLConnection发送请求" class="headerlink" title="四、HttpURLConnection发送请求"></a>四、HttpURLConnection发送请求</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在通过输出流对象构建对象输出流对象，以实现输出可序列化的对象。    </span></span><br><span class="line">ObjectOutputStream objOutputStrm = <span class="keyword">new</span> ObjectOutputStream(outStrm);    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 向对象输出流写出数据，这些数据将存到内存缓冲区中    </span></span><br><span class="line">objOutputStrm.writeObject(<span class="keyword">new</span> String(<span class="string">"我是测试数据"</span>));    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新对象输出流，将任何字节都写入潜在的流中（些处为ObjectOutputStream）    </span></span><br><span class="line">objOutputStm.flush();    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭流对象。此时，不能再向对象输出流写入任何数据，先前写入的数据存在于内存缓冲区中,    </span></span><br><span class="line"><span class="comment">// 在调用下边的getInputStream()函数时才把准备好的http请求正式发送到服务器    </span></span><br><span class="line">objOutputStm.close();</span><br></pre></td></tr></table></figure>
<h1 id="五、HttpURLConneciton获取响应"><a href="#五、HttpURLConneciton获取响应" class="headerlink" title="五、HttpURLConneciton获取响应"></a>五、HttpURLConneciton获取响应</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用HttpURLConnection连接对象的getInputStream()函数</span></span><br><span class="line">InputStream inStrm = httpConn.getInputStream();</span><br></pre></td></tr></table></figure>
<h1 id="六、设置POST参数"><a href="#六、设置POST参数" class="headerlink" title="六、设置POST参数"></a>六、设置POST参数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">OutputStream os = httpConn.getOutputStream();    </span><br><span class="line">String param = <span class="keyword">new</span> String();    </span><br><span class="line">param = <span class="string">"CorpID="</span> + CorpID +    </span><br><span class="line">       <span class="string">"&amp;LoginName="</span> + LoginName+    </span><br><span class="line">       <span class="string">"&amp;send_no="</span> + phoneNumber +    </span><br><span class="line">       <span class="string">"&amp;msg="</span> + java.net.URLEncoder.encode(msg,<span class="string">"GBK"</span>); ;    </span><br><span class="line">os.write(param.getBytes());</span><br></pre></td></tr></table></figure>
<h2 id="超时设置，防止网络异常的情况下，可能会导致程序僵死而不继续往下执行"><a href="#超时设置，防止网络异常的情况下，可能会导致程序僵死而不继续往下执行" class="headerlink" title="超时设置，防止网络异常的情况下，可能会导致程序僵死而不继续往下执行"></a>超时设置，防止网络异常的情况下，可能会导致程序僵死而不继续往下执行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"30000"</span>);</span><br><span class="line">System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"30000"</span>);</span><br></pre></td></tr></table></figure>
<p>其中：<br><code>sun.net.client.defaultConnectTimeout</code>：连接主机的超时时间（单位：毫秒）<br><code>sun.net.client.defaultReadTimeout</code>：从主机读取数据的超时时间（单位：毫秒）</p>
<p>JDK 1.5以前的版本，只能通过设置这两个系统属性来控制网络超时。在1.5中，还可以使用HttpURLConnection的父类URLConnection的以下两个方法：  </p>
<p><code>setConnectTimeout</code>：设置连接主机超时（单位：毫秒）<br><code>setReadTimeout</code>：设置从主机读取数据超时（单位：毫秒）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HttpURLConnection urlCon = (HttpURLConnection)url.openConnection();  </span><br><span class="line">urlCon.setConnectTimeout(<span class="number">30000</span>);  </span><br><span class="line">urlCon.setReadTimeout(<span class="number">30000</span>);</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio入门教程]]></title>
      <url>http://sherlockshi.github.io/2016/07/13/15_Android/1530_%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/AndroidStudio/Android%20Studio%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在Android Studio出现之前，开发Android应用主要是使用Eclipse ADT，也就是说，虽然那时候Android系统已经安装在9亿台设备上，但是没有一个专门的开发环境供Android开发者来开发Android应用。直到2013年的Google I/O大会，Google发布了Android Studio 0.1版本，我们才有了像iOS开发者的XCode一样的官方IDE。</p>
<a id="more"></a>
<p>2013年5月发布早期预览版本，版本号为0.1。2014年6月发布0.8版本，至此进入beta阶段。第一个稳定版本1.0于2014年12月8日发布，之后还有好多版本，比较稳定有的1.5正式版，2.0正式版，以及现在最新的2.1版本。</p>
<p>早期版本的Android Studio非常的难用，内存消耗非常严重，各种Bug，只有后面的1.5版本以后的版本才比较好，现在的2.0版本已经很好了。</p>
<h1 id="二、下载、安装"><a href="#二、下载、安装" class="headerlink" title="二、下载、安装"></a>二、下载、安装</h1><p><a href="https://developer.android.com/studio/index.html" target="_blank" rel="external">Android开发者官方网站(需翻墙)</a><br><a href="http://tools.android.com/download/studio" target="_blank" rel="external">Android开发工具网站(需翻墙)</a><br><a href="http://www.android-studio.org/" target="_blank" rel="external">中文社区</a>  </p>
<p><a href="https://developer.android.com/studio/index.html" target="_blank" rel="external"><strong>配置建议：</strong></a><br>内存8G+<br>JDK8</p>
<h1 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h1><ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">JDK</a>  </li>
<li><p>环境变量：JAVA_HOME、PATH、CLASSPATH  </p>
<ul>
<li><a href="http://www.cnblogs.com/smyhvae/p/3788534.html" target="_blank" rel="external">Windows系统设置方法</a>  </li>
<li><a href="http://stormzhang.com/android/2014/06/27/manage-java-on-macosx/" target="_blank" rel="external">Mac系统设置方法</a>  </li>
</ul>
</li>
<li><p>测试是否安装成功：<br>  java，javac，java -version</p>
</li>
</ul>
<h1 id="四、项目介绍"><a href="#四、项目介绍" class="headerlink" title="四、项目介绍"></a>四、项目介绍</h1><p>在新建一个项目之前，这里先普及Android Studio和eclipse在某些概念不同的地方。</p>
<p>Android Studio 中，有一些概念是和 eclipse 不同的，从 eclipse 迁移至 Android Studio 会有很多上手不顺的情况发生，当然在明确了概念的不同之后，还是容易可以切换过来。</p>
<table>
<thead>
<tr>
<th style="text-align:center">对比</th>
<th style="text-align:center">eclipse</th>
<th>Android Studio</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">工作区</td>
<td style="text-align:center">workspace</td>
<td>project</td>
</tr>
<tr>
<td style="text-align:center">项目</td>
<td style="text-align:center">project</td>
<td>module</td>
</tr>
<tr>
<td style="text-align:center">引用</td>
<td style="text-align:center">preference</td>
<td>module dependency</td>
</tr>
</tbody>
</table>
<p>简单的来说，Android Stduio把一个项目比喻成一个工程的一个个模块，外部的依赖也是一个个模块，这样一个项目的结构就很清晰明了。<br>当然也有一个缺点，就是一个窗口只能打开一个project，不能像eclipse那样一次一个窗口打开多个项目。</p>
<h2 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h2><p><strong>两个方式：</strong>  </p>
<ul>
<li><p>Android Studio欢迎界面时：<br>  <code>start a new Android Studio project</code></p>
</li>
<li><p>Android Studio已有打开的项目时：<br>  <code>File</code> -&gt; <code>New</code> -&gt; <code>New Project...</code></p>
</li>
</ul>
<h2 id="2-模拟器"><a href="#2-模拟器" class="headerlink" title="2. 模拟器"></a>2. 模拟器</h2><p><strong>＝＝＝＝＝＝＝＝建议使用真机＝＝＝＝＝＝＝＝</strong></p>
<h3 id="自带的"><a href="#自带的" class="headerlink" title="自带的"></a>自带的</h3><h3 id="Genymotion"><a href="#Genymotion" class="headerlink" title="Genymotion"></a><a href="https://www.genymotion.com/" target="_blank" rel="external">Genymotion</a></h3><h2 id="3-目录结构"><a href="#3-目录结构" class="headerlink" title="3. 目录结构"></a>3. 目录结构</h2><p>目录展现模式：Project、Android  </p>
<ul>
<li>app/  <ul>
<li>libs/： 右击jar包，Add as library</li>
<li>main<ul>
<li>src/</li>
<li>res/</li>
<li>AndroidManifest.xml</li>
</ul>
</li>
<li>proguard-rules.pro：混淆文件</li>
</ul>
</li>
</ul>
<blockquote>
<p>这里还有一些关于Gradle的配置文件还没有介绍，统一在下一节进行介绍。</p>
</blockquote>
<h1 id="五、Gradle介绍"><a href="#五、Gradle介绍" class="headerlink" title="五、Gradle介绍"></a>五、Gradle介绍</h1><p>详见<a href="http://sherlockshi.github.io/2016/07/24/15_Android/1530_%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/AndroidStudio/Gradle%E5%9F%BA%E7%A1%80/">Gradle基础</a></p>
<h1 id="六、插件"><a href="#六、插件" class="headerlink" title="六、插件"></a>六、插件</h1><ul>
<li>gson format</li>
<li>android-butterknife-zelezny</li>
<li><a href="https://github.com/takahirom/android-postfix-plugin" target="_blank" rel="external">Android Postfix Completion</a></li>
<li><a href="https://github.com/Skykai521/ECTranslation" target="_blank" rel="external">ECTranslation</a></li>
<li>.gitignore</li>
</ul>
<p><a href="http://mobdevgroup.com/tools/android" target="_blank" rel="external">Android开发工具</a></p>
<h1 id="七、常用快捷键"><a href="#七、常用快捷键" class="headerlink" title="七、常用快捷键"></a>七、常用快捷键</h1><p><code>Preferences</code> -&gt; <code>Keymap</code><br><code>Help</code> -&gt; <code>Default Keymap Reference</code></p>
<h2 id="1-常用"><a href="#1-常用" class="headerlink" title="1. 常用"></a>1. 常用</h2><table>
<thead>
<tr>
<th>Action</th>
<th>Mac OSX</th>
<th>Win/Linux</th>
</tr>
</thead>
<tbody>
<tr>
<td>Search everywhere</td>
<td>Double Shift</td>
<td>Double Shift</td>
</tr>
<tr>
<td>注释代码(//)</td>
<td>Cmd + /</td>
<td>Ctrl + /</td>
</tr>
<tr>
<td>注释代码(/**/)</td>
<td>Cmd + Option + /</td>
<td>Ctrl + Shift + /</td>
</tr>
<tr>
<td>格式化代码</td>
<td>Cmd + Option + L</td>
<td>Ctrl + Alt + L</td>
</tr>
<tr>
<td>清除无效包引用</td>
<td>Option + Control + O</td>
<td>Alt + Ctrl + O</td>
</tr>
<tr>
<td>查找</td>
<td>Cmd + F</td>
<td>Ctrl + F</td>
</tr>
<tr>
<td>查找+替换</td>
<td>Cmd + R</td>
<td>Ctrl + R</td>
</tr>
<tr>
<td>上下移动代码</td>
<td>Option + Shift + Up/Down</td>
<td>Alt + Shift + Up/Down</td>
</tr>
<tr>
<td>删除行</td>
<td>Cmd + Delete</td>
<td>Ctrl + Y</td>
</tr>
<tr>
<td>复制行</td>
<td>Cmd + D</td>
<td>Ctrl + D</td>
</tr>
<tr>
<td>重命名</td>
<td>Shift+F6</td>
<td>Shift+F6</td>
</tr>
<tr>
<td>重构</td>
<td>Cmd + Option + M</td>
<td>Shift+F6</td>
</tr>
<tr>
<td>扩大缩小选中范围</td>
<td>Option + Up/Down</td>
<td>Ctrl + W/Ctrl + Shift + W</td>
</tr>
<tr>
<td>快捷生成结构体</td>
<td>Cmd + Option + T</td>
<td>Ctrl + Alt + T</td>
</tr>
<tr>
<td>快捷覆写方法</td>
<td>Cmd + O</td>
<td>Ctrl + O</td>
</tr>
<tr>
<td>快捷定位到行首/尾</td>
<td>Cmd + Left/Right</td>
<td>Ctrl + Left/Right</td>
</tr>
<tr>
<td>折叠展开代码块</td>
<td>Cmd + Plus,Minus</td>
<td>Ctrl + Plus/Minus</td>
</tr>
<tr>
<td>折叠展开全部代码块</td>
<td>Cmd + Shift + Plus,Minus</td>
<td>Ctrl + Shift + Plus,Minus</td>
</tr>
<tr>
<td>文件方法结构</td>
<td>Cmd + F12</td>
<td>Ctrl + F12</td>
</tr>
<tr>
<td>查找调用的位置</td>
<td>Ctrl + Option + H</td>
<td>Ctrl + Alt + H</td>
</tr>
<tr>
<td>大小写转换</td>
<td>Cmd + Shift + U</td>
<td>Ctrl + Shift + U</td>
</tr>
</tbody>
</table>
<h2 id="2-自动导包"><a href="#2-自动导包" class="headerlink" title="2. 自动导包"></a>2. 自动导包</h2><p>我们只有每次引用一些类的时候必须要导包，而Android Studio可以通过设置自动导包，简直太实用了.</p>
<p>到 <code>Preferences</code> -&gt; <code>Editor</code> -&gt; <code>General</code> -&gt; <code>Auto Import</code> -&gt; <code>Java</code> 把以下选项勾上就OK了<br><img src="http://7xlpfl.com1.z0.glb.clouddn.com/Snip20160724_1.png" alt=""></p>
<h1 id="八、常见问题"><a href="#八、常见问题" class="headerlink" title="八、常见问题"></a>八、常见问题</h1><p>详见<a href="http://sherlockshi.github.io/2016/07/24/15_Android/1530_%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/AndroidStudio/Android%20Studio%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/">Android Studio常见问题</a></p>
<h1 id="九、学习资料"><a href="#九、学习资料" class="headerlink" title="九、学习资料"></a>九、学习资料</h1><p>stormzhang的<a href="http://stormzhang.com/devtools/2015/06/17/android-studio-all/" target="_blank" rel="external">Android Studio详细教程汇总</a><br><a href="https://dongchuan.gitbooks.io/gradle-user-guide-/content/tutorials/" target="_blank" rel="external">Gradle中文教程</a><br><a href="http://ask.android-studio.org/?/explore/category-video" target="_blank" rel="external">Android Studio视频教程</a><br><a href="http://ask.android-studio.org/?/explore/category-gradle" target="_blank" rel="external">Gradle教程</a></p>
<h1 id="十、翻墙软件"><a href="#十、翻墙软件" class="headerlink" title="十、翻墙软件"></a>十、翻墙软件</h1><h2 id="1-免费"><a href="#1-免费" class="headerlink" title="1. 免费"></a>1. 免费</h2><p><a href="https://github.com/XX-net/XX-Net" target="_blank" rel="external">XX-Net</a><br><a href="https://github.com/getlantern/forum" target="_blank" rel="external">蓝灯</a></p>
<h2 id="2-付费"><a href="#2-付费" class="headerlink" title="2. 付费"></a>2. 付费</h2><p><a href="https://shadowsocks.com/" target="_blank" rel="external">Shadowsocks</a><br><a href="https://www.ytpub.com/" target="_blank" rel="external">云梯VPN</a>  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Andrdoid代码混淆]]></title>
      <url>http://sherlockshi.github.io/2016/07/01/15_Android/1505_%E5%AE%89%E5%85%A8/Andrdoid%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文主要参考<a href="http://www.jianshu.com/p/f3455ecaa56e" target="_blank" rel="external">5分钟搞定android混淆</a></p>
</blockquote>
<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><a id="more"></a>
<h1 id="二、上模板"><a href="#二、上模板" class="headerlink" title="二、上模板"></a>二、上模板</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-------------------------------------------定制化区域----------------------------------------------</span></span><br><span class="line"><span class="comment">#---------------------------------1.实体类、自定义控件-----------------------</span></span><br><span class="line">-keep class com.sherlockshi.core.model.entity.** &#123; *; &#125; <span class="comment">#实体类不参与混淆</span></span><br><span class="line">-keep class com.sherlockshi.core.ui.custom.** &#123; *; &#125; <span class="comment">#自定义控件不参与混淆</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------2.第三方包-------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------3.与js互相调用的类------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------4.反射相关的类和方法-----------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------基本不用动区域--------------------------------------------</span></span><br><span class="line"><span class="comment">#---------------------------------基本指令区----------------------------------</span></span><br><span class="line">-optimizationpasses 5</span><br><span class="line">-dontskipnonpubliclibraryclassmembers</span><br><span class="line">-printmapping proguardMapping.txt</span><br><span class="line">-optimizations !code/simplification/cast,!field/*,!class/merging/*</span><br><span class="line">-keepattributes *Annotation*,InnerClasses</span><br><span class="line">-keepattributes Signature</span><br><span class="line">-keepattributes SourceFile,LineNumberTable</span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------默认保留区---------------------------------</span></span><br><span class="line">-keep public class * extends android.app.Activity</span><br><span class="line">-keep public class * extends android.app.Application</span><br><span class="line">-keep public class * extends android.app.Service</span><br><span class="line">-keep public class * extends android.content.BroadcastReceiver</span><br><span class="line">-keep public class * extends android.content.ContentProvider</span><br><span class="line">-keep public class * extends android.app.backup.BackupAgentHelper</span><br><span class="line">-keep public class * extends android.preference.Preference</span><br><span class="line">-keep public class * extends android.view.View</span><br><span class="line">-keep public class com.android.vending.licensing.ILicensingService</span><br><span class="line">-keep class android.support.** &#123;*;&#125;</span><br><span class="line"></span><br><span class="line">-keep public class * extends android.view.View&#123;</span><br><span class="line">    *** get*();</span><br><span class="line">    void <span class="built_in">set</span>*(***);</span><br><span class="line">    public &lt;init&gt;(android.content.Context);</span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</span><br><span class="line">&#125;</span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers class * implements java.io.Serializable &#123;</span><br><span class="line">    static final long serialVersionUID;</span><br><span class="line">    private static final java.io.ObjectStreamField[] serialPersistentFields;</span><br><span class="line">    private void writeObject(java.io.ObjectOutputStream);</span><br><span class="line">    private void <span class="built_in">read</span>Object(java.io.ObjectInputStream);</span><br><span class="line">    java.lang.Object writeReplace();</span><br><span class="line">    java.lang.Object <span class="built_in">read</span>Resolve();</span><br><span class="line">&#125;</span><br><span class="line">-keep class **.R$* &#123;</span><br><span class="line"> *;</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers class * &#123;</span><br><span class="line">    void *(**On*Event);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------webview------------------------------------</span></span><br><span class="line">-keepclassmembers class fqcn.of.javascript.interface.for.webview &#123;</span><br><span class="line">   public *;</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers class * extends android.webkit.webViewClient &#123;</span><br><span class="line">    public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);</span><br><span class="line">    public boolean *(android.webkit.WebView, java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers class * extends android.webkit.webViewClient &#123;</span><br><span class="line">    public void *(android.webkit.webView, jav.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>
<h1 id="三、分析"><a href="#三、分析" class="headerlink" title="三、分析"></a>三、分析</h1><h2 id="1-实体类、自定义控件"><a href="#1-实体类、自定义控件" class="headerlink" title="1. 实体类、自定义控件"></a>1. 实体类、自定义控件</h2><p>实体类由于涉及到与服务端的交互，各种gson的交互如此等等，是要保留的，自定义控件也是一样。将你项目中实体类都拎出来，用以下语法进行保留。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-keep class 你的实体类所在的包.** &#123; *; &#125;</span><br><span class="line">-keep class 你的自定义控件所在的包.** &#123; *; &#125;</span><br></pre></td></tr></table></figure>
<p>如我的项目下类User的完整路径为：com.demo.login.bean.User, 那我的混淆如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#---------------------------------1.实体类、自定义控件-----------------------</span></span><br><span class="line"></span><br><span class="line">-keep class com.demo.login.bean.** &#123; *; &#125; <span class="comment">#实体类不参与混淆</span></span><br><span class="line">-keep class com.demo.android.view.** &#123; *; &#125; <span class="comment">#自定义控件不参与混淆</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure></p>
<p>当然你的实体类、自定义控件肯定不止这一个，请用上边的方式一一添加，如果你的实体类、自定义控件都在一个包下，那你就幸福了。</p>
<h2 id="2-第三方包"><a href="#2-第三方包" class="headerlink" title="2. 第三方包"></a>2. 第三方包</h2><p>打开你app下的build.gradle文件，查看你用了哪些第三方的包。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'com.github.bumptech.glide:glide:3.7.0'</span></span><br><span class="line">    compile <span class="string">'org.greenrobot:eventbus:3.0.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我这里用了glide，eventbus。我去他们的官网把已经写好的混淆copy下来。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#---------------------------------2.第三方包-------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eventBus</span></span><br><span class="line">-keepattributes *Annotation*</span><br><span class="line">-keepclassmembers class ** &#123;</span><br><span class="line">    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line">-keep enum org.greenrobot.eventbus.ThreadMode &#123; *; &#125;</span><br><span class="line">-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent &#123;</span><br><span class="line">    &lt;init&gt;(java.lang.Throwable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#glide</span></span><br><span class="line">-keep public class * implements com.bumptech.glide.module.GlideModule</span><br><span class="line">-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** &#123;</span><br><span class="line">  **[] <span class="variable">$VALUES</span>;</span><br><span class="line">  public *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>
<p>一般官网都是有混淆的，没有的话就google，也没有的话自己按照上面的写法自己写，还不会的话。。。。。只能换个包。。。。。如果你是直接包含的jar包的话，你这样写</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#---------------------------------2.第三方包-------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#log4j</span></span><br><span class="line">-libraryjars <span class="built_in">log</span>4j-1.2.17.jar</span><br><span class="line">-dontwarn org.apache.log4j.**</span><br><span class="line">-keep class  org.apache.log4j.** &#123; *;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>
<p>大致意思就是不混淆，不报warn。如果gradle报错的话，可以考虑注释掉-libraryjars log4j-1.2.17.jar这句。</p>
<h2 id="3-与js互相调用的类"><a href="#3-与js互相调用的类" class="headerlink" title="3. 与js互相调用的类"></a>3. 与js互相调用的类</h2><p>工程中没有直接跳过，一般你可以这样写</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keep class 你的类所在的包.** &#123; *; &#125;</span><br></pre></td></tr></table></figure>
<p>如果是内部类的话，你可以这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keepclasseswithmembers class 你的类所在的包.父类$子类 &#123; &lt;methods&gt;; &#125;</span><br></pre></td></tr></table></figure></p>
<p>例如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-keepclasseswithmembers class com.demo.login.bean.ui.MainActivity<span class="variable">$JSInterface</span> &#123;</span><br><span class="line">      &lt;methods&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-反射相关的类和方法"><a href="#4-反射相关的类和方法" class="headerlink" title="4. 反射相关的类和方法"></a>4. 反射相关的类和方法</h2><p>工程中没有直接跳过，类的话直接这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keep class 你的类所在的包.** &#123; *; &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="四、深入了解"><a href="#四、深入了解" class="headerlink" title="四、深入了解"></a>四、深入了解</h1><p>先逐条介绍下基本指令区指令的含义</p>
<p>代码混淆的压缩比例，值在0-7之间：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-optimizationpasses 5</span><br></pre></td></tr></table></figure></p>
<p>混淆后类名都为小写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-dontusemixedcaseclassnames</span><br></pre></td></tr></table></figure></p>
<p>指定不去忽略非公共的库的类：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-dontskipnonpubliclibraryclasses</span><br></pre></td></tr></table></figure></p>
<p>指定不去忽略非公共的库的类的成员：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-dontskipnonpubliclibraryclassmembers</span><br></pre></td></tr></table></figure></p>
<p>不做预校验的操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-dontpreverify</span><br></pre></td></tr></table></figure></p>
<p>生成原类名和混淆后的类名的映射文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-verbose</span><br><span class="line">-printmapping proguardMapping.txt</span><br></pre></td></tr></table></figure></p>
<p>指定混淆是采用的算法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-optimizations !code/simplification/cast,!field/*,!class/merging/*</span><br></pre></td></tr></table></figure></p>
<p>不混淆Annotation：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keepattributes *Annotation*,InnerClasses</span><br></pre></td></tr></table></figure></p>
<p>不混淆泛型：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keepattributes Signature</span><br></pre></td></tr></table></figure></p>
<p>抛出异常时保留代码行号：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keepattributes SourceFile,LineNumberTable</span><br></pre></td></tr></table></figure></p>
<p>基本指令区基本介绍完了，说下2条用的最多的指令：</p>
<ol>
<li><p>保留类名不变，也就是类名不混淆，而类中的成员名不保证。当然也可以是继承XXX类的所有类名不混淆，具体代码不贴了，重在理解。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keep class XXXX</span><br></pre></td></tr></table></figure>
</li>
<li><p>保留类名和成员名。当然也可以是类中特定方法，代码不贴了，理由同上。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keepclasseswithmembers class XXXX</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="五、附：完整的混淆"><a href="#五、附：完整的混淆" class="headerlink" title="五、附：完整的混淆"></a>五、附：完整的混淆</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-------------------------------------------定制化区域----------------------------------------------</span></span><br><span class="line"><span class="comment">#---------------------------------1.实体类---------------------------------</span></span><br><span class="line"></span><br><span class="line">-keep class com.demo.login.bean.** &#123; *; &#125;</span><br><span class="line">-keep class com.demo.main.bean.** &#123; *; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------2.第三方包-------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eventBus</span></span><br><span class="line">-keepattributes *Annotation*</span><br><span class="line">-keepclassmembers class ** &#123;</span><br><span class="line">    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line">-keep enum org.greenrobot.eventbus.ThreadMode &#123; *; &#125;</span><br><span class="line">-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent &#123;</span><br><span class="line">    &lt;init&gt;(java.lang.Throwable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#glide</span></span><br><span class="line">-keep public class * implements com.bumptech.glide.module.GlideModule</span><br><span class="line">-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** &#123;</span><br><span class="line">  **[] <span class="variable">$VALUES</span>;</span><br><span class="line">  public *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#log4j</span></span><br><span class="line">-libraryjars <span class="built_in">log</span>4j-1.2.17.jar</span><br><span class="line">-dontwarn org.apache.log4j.**</span><br><span class="line">-keep class  org.apache.log4j.** &#123; *;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------3.与js互相调用的类------------------------</span></span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class com.demo.login.bean.ui.MainActivity<span class="variable">$JSInterface</span> &#123;</span><br><span class="line">      &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------4.反射相关的类和方法-----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TODO 我的工程里没有。。。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------基本不用动区域--------------------------------------------</span></span><br><span class="line"><span class="comment">#---------------------------------基本指令区----------------------------------</span></span><br><span class="line">-optimizationpasses 5</span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line">-dontskipnonpubliclibraryclasses</span><br><span class="line">-dontskipnonpubliclibraryclassmembers</span><br><span class="line">-dontpreverify</span><br><span class="line">-verbose</span><br><span class="line">-printmapping proguardMapping.txt</span><br><span class="line">-optimizations !code/simplification/cast,!field/*,!class/merging/*</span><br><span class="line">-keepattributes *Annotation*,InnerClasses</span><br><span class="line">-keepattributes Signature</span><br><span class="line">-keepattributes SourceFile,LineNumberTable</span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------默认保留区---------------------------------</span></span><br><span class="line">-keep public class * extends android.app.Activity</span><br><span class="line">-keep public class * extends android.app.Application</span><br><span class="line">-keep public class * extends android.app.Service</span><br><span class="line">-keep public class * extends android.content.BroadcastReceiver</span><br><span class="line">-keep public class * extends android.content.ContentProvider</span><br><span class="line">-keep public class * extends android.app.backup.BackupAgentHelper</span><br><span class="line">-keep public class * extends android.preference.Preference</span><br><span class="line">-keep public class * extends android.view.View</span><br><span class="line">-keep public class com.android.vending.licensing.ILicensingService</span><br><span class="line">-keep class android.support.** &#123;*;&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembernames class * &#123;</span><br><span class="line">    native &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers class * extends android.app.Activity&#123;</span><br><span class="line">    public void *(android.view.View);</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers enum * &#123;</span><br><span class="line">    public static **[] values();</span><br><span class="line">    public static ** valueOf(java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line">-keep public class * extends android.view.View&#123;</span><br><span class="line">    *** get*();</span><br><span class="line">    void <span class="built_in">set</span>*(***);</span><br><span class="line">    public &lt;init&gt;(android.content.Context);</span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</span><br><span class="line">&#125;</span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</span><br><span class="line">&#125;</span><br><span class="line">-keep class * implements android.os.Parcelable &#123;</span><br><span class="line">  public static final android.os.Parcelable<span class="variable">$Creator</span> *;</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers class * implements java.io.Serializable &#123;</span><br><span class="line">    static final long serialVersionUID;</span><br><span class="line">    private static final java.io.ObjectStreamField[] serialPersistentFields;</span><br><span class="line">    private void writeObject(java.io.ObjectOutputStream);</span><br><span class="line">    private void <span class="built_in">read</span>Object(java.io.ObjectInputStream);</span><br><span class="line">    java.lang.Object writeReplace();</span><br><span class="line">    java.lang.Object <span class="built_in">read</span>Resolve();</span><br><span class="line">&#125;</span><br><span class="line">-keep class **.R$* &#123;</span><br><span class="line"> *;</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers class * &#123;</span><br><span class="line">    void *(**On*Event);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------webview------------------------------------</span></span><br><span class="line">-keepclassmembers class fqcn.of.javascript.interface.for.webview &#123;</span><br><span class="line">   public *;</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers class * extends android.webkit.webViewClient &#123;</span><br><span class="line">    public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);</span><br><span class="line">    public boolean *(android.webkit.WebView, java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers class * extends android.webkit.webViewClient &#123;</span><br><span class="line">    public void *(android.webkit.webView, jav.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>
<h1 id="六、后言"><a href="#六、后言" class="headerlink" title="六、后言"></a>六、后言</h1><p>将app下的build.gradle中minifyEnabled设置为true打个包试试吧</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">release &#123;</span><br><span class="line">       minifyEnabled <span class="literal">true</span></span><br><span class="line">       proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android里Button只显示大写字母的问题]]></title>
      <url>http://sherlockshi.github.io/2016/06/27/15_Android/1590_Others/Android%E9%87%8CButton%E5%8F%AA%E6%98%BE%E7%A4%BA%E5%A4%A7%E5%86%99%E5%AD%97%E6%AF%8D%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h1><p>在XML布局文件里面直接给Button设置英文text时，会出现text内容全部变成大写，如设置text为<code>Take(Small)Picture</code>，但实际显示为<code>TAKE(SMALL)PICTURE</code></p>
<a id="more"></a>
<p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/Android%E9%87%8CButton%E5%8F%AA%E6%98%BE%E7%A4%BA%E5%A4%A7%E5%86%99%E5%AD%97%E6%AF%8D%E7%9A%84%E9%97%AE%E9%A2%98.png" alt="Alt text"></p>
<h1 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h1><p>在Button的属性里加上：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span><br><span class="line">    <span class="attr">...</span></span><br><span class="line">    <span class="attr">android:textAllCaps</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android官方相机教程：简单的相机应用和自定义相机]]></title>
      <url>http://sherlockshi.github.io/2016/06/27/15_Android/1520_%E7%9B%B8%E6%9C%BA/Android%E5%AE%98%E6%96%B9%E7%9B%B8%E6%9C%BA%E6%95%99%E7%A8%8B%EF%BC%9A%E7%AE%80%E5%8D%95%E7%9A%84%E7%9B%B8%E6%9C%BA%E5%BA%94%E7%94%A8%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%B8%E6%9C%BA/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文基于<a href="https://developer.android.com/training/camera/index.html" target="_blank" rel="external">Android相机官方教程</a>及<a href="http://wiki.jikexueyuan.com/project/android-training-geek/camera-index.html" target="_blank" rel="external">极客学院Wiki</a>整理</p>
</blockquote>
<a id="more"></a>
<h1 id="轻松拍摄照片"><a href="#轻松拍摄照片" class="headerlink" title="轻松拍摄照片"></a>轻松拍摄照片</h1><p>这节课将讲解如何使用已有的相机应用拍摄照片。</p>
<h2 id="1-请求使用相机权限"><a href="#1-请求使用相机权限" class="headerlink" title="1. 请求使用相机权限"></a>1. 请求使用相机权限</h2><p>如果拍照是应用的必要功能，那么应该令它在Google Play中仅对有相机的设备可见。为了让用户知道我们的应用需要依赖相机，在Manifest清单文件中添加<uses-feature>标签:</uses-feature></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">"android.hardware.camera"</span></span><br><span class="line">                  <span class="attr">android:required</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果我们的应用使用相机，但相机并不是应用的正常运行所必不可少的组件，可以将android:required设置为”false”。这样的话，Google Play 也会允许没有相机的设备下载该应用。当然我们有必要在使用相机之前通过调用hasSystemFeature(PackageManager.FEATURE_CAMERA)方法来检查设备上是否有相机。如果没有，我们应该禁用和相机相关的功能！</p>
<h2 id="2-使用相机应用程序进行拍照"><a href="#2-使用相机应用程序进行拍照" class="headerlink" title="2. 使用相机应用程序进行拍照"></a>2. 使用相机应用程序进行拍照</h2><p>利用一个描述了执行目的Intent对象，Android可以将某些执行任务委托给其他应用。整个过程包含三部分： Intent 本身，一个函数调用来启动外部的 Activity，当焦点返回到我们的Activity时，处理返回图像数据的代码。</p>
<p>下面的函数通过发送一个Intent来捕获照片：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_IMAGE_CAPTURE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchTakePictureIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) &#123;</span><br><span class="line">      Intent takePictureIntent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">      <span class="keyword">if</span> (takePictureIntent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">          startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意在调用startActivityForResult()方法之前，先调用resolveActivity()，这个方法会返回能处理该Intent的第一个Activity（译注：即检查有没有能处理这个Intent的Activity）。执行这个检查非常重要，因为如果在调用startActivityForResult()时，没有应用能处理你的Intent，应用将会崩溃。所以只要返回结果不为null，使用该Intent就是安全的。</p>
<h2 id="3-获取缩略图"><a href="#3-获取缩略图" class="headerlink" title="3. 获取缩略图"></a>3. 获取缩略图</h2><p>拍摄照片并不是应用的最终目的，我们还想要从相机应用那里取回拍摄的照片，并对它执行某些操作。</p>
<p>Android的相机应用会把拍好的照片编码为缩小的Bitmap，使用extra value的方式添加到返回的Intent当中，并传送给onActivityResult()，对应的Key为”data”。下面的代码展示的是如何获取这一图片并显示在ImageView上。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (requestCode == REQUEST_IMAGE_CAPTURE &amp;&amp; resultCode == RESULT_OK) &#123;</span><br><span class="line">        Bundle extras = data.getExtras();</span><br><span class="line">        Bitmap imageBitmap = (Bitmap) extras.get(<span class="string">"data"</span>);</span><br><span class="line">        mImageView.setImageBitmap(imageBitmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Note: 这张从”data”中取出的缩略图适用于作为图标，但其他作用会比较有限。而处理一张全尺寸图片需要做更多的工作。</p>
</blockquote>
<h2 id="4-保存全尺寸照片"><a href="#4-保存全尺寸照片" class="headerlink" title="4. 保存全尺寸照片"></a>4. 保存全尺寸照片</h2><p>如果我们提供了一个File对象给Android的相机程序，它会保存这张全尺寸照片到给定的路径下。另外，我们必须提供存储图片所需要的含有后缀名形式的文件名。</p>
<p>一般而言，用户使用设备相机所拍摄的任何照片都应该被存放在设备的公共外部存储中，这样它们就能被所有的应用访问。将DIRECTORY_PICTURES作为参数，传递给getExternalStoragePublicDirectory()方法，可以返回适用于存储公共图片的目录。由于该方法提供的目录被所有应用共享，因此对该目录进行读写操作分别需要READ_EXTERNAL_STORAGE和WRITE_EXTERNAL_STORAGE权限。另外，因为写权限隐含了读权限，所以如果需要外部存储的写权限，那么仅仅需要请求一项权限就可以了：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然而，如果希望照片对我们的应用而言是私有的，那么可以使用getExternalFilesDir()提供的目录。在Android 4.3及以下版本的系统中，写这个目录需要WRITE_EXTERNAL_STORAGE权限。从Android 4.4开始，该目录将无法被其他应用访问，所以该权限就不再需要了，你可以通过添加maxSdkVersion属性，声明只在低版本的Android设备上请求这个权限。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span></span><br><span class="line">                     <span class="attr">android:maxSdkVersion</span>=<span class="string">"18"</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>所有存储在getExternalFilesDir()提供的目录中的文件会在用户卸载你的app后被删除。</p>
</blockquote>
<p>一旦选定了存储文件的目录，我们还需要设计一个保证文件名不会冲突的命名规则。当然我们还可以将路径存储在一个成员变量里以备在将来使用。下面的例子使用日期时间戳作为新照片的文件名：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">String mCurrentPhotoPath;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> File <span class="title">createImageFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// Create an image file name</span></span><br><span class="line">    String timeStamp = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd_HHmmss"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">    String imageFileName = <span class="string">"JPEG_"</span> + timeStamp + <span class="string">"_"</span>;</span><br><span class="line">    File storageDir = Environment.getExternalStoragePublicDirectory(</span><br><span class="line">            Environment.DIRECTORY_PICTURES);</span><br><span class="line">    File image = File.createTempFile(</span><br><span class="line">        imageFileName,  <span class="comment">/* prefix */</span></span><br><span class="line">        <span class="string">".jpg"</span>,         <span class="comment">/* suffix */</span></span><br><span class="line">        storageDir      <span class="comment">/* directory */</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save a file: path for use with ACTION_VIEW intents</span></span><br><span class="line">    mCurrentPhotoPath = <span class="string">"file:"</span> + image.getAbsolutePath();</span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有了上面的方法，我们就可以给新照片创建文件对象了，现在我们可以像这样创建并触发一个Intent：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_TAKE_PHOTO = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchTakePictureIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent takePictureIntent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">    <span class="comment">// Ensure that there's a camera activity to handle the intent</span></span><br><span class="line">    <span class="keyword">if</span> (takePictureIntent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Create the File where the photo should go</span></span><br><span class="line">        File photoFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            photoFile = createImageFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="comment">// Error occurred while creating the File</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Continue only if the File was successfully created</span></span><br><span class="line">        <span class="keyword">if</span> (photoFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,</span><br><span class="line">                    Uri.fromFile(photoFile));</span><br><span class="line">            startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-将照片添加到相册中"><a href="#5-将照片添加到相册中" class="headerlink" title="5. 将照片添加到相册中"></a>5. 将照片添加到相册中</h2><p>由于我们通过Intent创建了一张照片，因此图片的存储位置我们是知道的。对其他人来说，也许查看我们的照片最简单的方式是通过系统的Media Provider。</p>
<blockquote>
<p>Note: 如果将图片存储在getExternalFilesDir()提供的目录中，Media Scanner将无法访问到我们的文件，因为它们隶属于应用的私有数据。</p>
</blockquote>
<p>下面的例子演示了如何触发系统的Media Scanner，将我们的照片添加到Media Provider的数据库中，这样就可以使得Android相册程序与其他程序能够读取到这些照片。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">galleryAddPic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent mediaScanIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);</span><br><span class="line">    File f = <span class="keyword">new</span> File(mCurrentPhotoPath);</span><br><span class="line">    Uri contentUri = Uri.fromFile(f);</span><br><span class="line">    mediaScanIntent.setData(contentUri);</span><br><span class="line">    <span class="keyword">this</span>.sendBroadcast(mediaScanIntent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-解码一幅缩放图片"><a href="#6-解码一幅缩放图片" class="headerlink" title="6. 解码一幅缩放图片"></a>6. 解码一幅缩放图片</h2><p>在有限的内存下，管理许多全尺寸的图片会很棘手。如果发现应用在展示了少量图片后消耗了所有内存，我们可以通过缩放图片到目标视图尺寸，之后再载入到内存中的方法，来显著降低内存的使用，下面的例子演示了这个技术：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Get the dimensions of the View</span></span><br><span class="line">    <span class="keyword">int</span> targetW = mImageView.getWidth();</span><br><span class="line">    <span class="keyword">int</span> targetH = mImageView.getHeight();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the dimensions of the bitmap</span></span><br><span class="line">    BitmapFactory.Options bmOptions = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">    bmOptions.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">    BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);</span><br><span class="line">    <span class="keyword">int</span> photoW = bmOptions.outWidth;</span><br><span class="line">    <span class="keyword">int</span> photoH = bmOptions.outHeight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decode the image file into a Bitmap sized to fill the View</span></span><br><span class="line">    bmOptions.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">    bmOptions.inSampleSize = calculateInSampleSize(bmOptions, targetW, targetH);</span><br><span class="line">    bmOptions.inPurgeable = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    Bitmap bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);</span><br><span class="line">    mImageView.setImageBitmap(bitmap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateInSampleSize</span><span class="params">(BitmapFactory.Options options,</span><br><span class="line">                                            <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Raw height and width of image</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;</span><br><span class="line">    <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate ratios of height and width to requested height and</span></span><br><span class="line">        <span class="comment">// width</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> heightRatio = Math.round((<span class="keyword">float</span>) height</span><br><span class="line">                / (<span class="keyword">float</span>) reqHeight);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> widthRatio = Math.round((<span class="keyword">float</span>) width / (<span class="keyword">float</span>) reqWidth);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Choose the smallest ratio as inSampleSize value, this will</span></span><br><span class="line">        <span class="comment">// guarantee</span></span><br><span class="line">        <span class="comment">// a final image with both dimensions larger than or equal to the</span></span><br><span class="line">        <span class="comment">// requested height and width.</span></span><br><span class="line">        inSampleSize = heightRatio &lt; widthRatio ? heightRatio : widthRatio;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inSampleSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Hexo搭建个人博客过程的各种问题]]></title>
      <url>http://sherlockshi.github.io/2016/06/23/30_%E5%8D%9A%E5%AE%A2/3005_Hexo/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%E7%9A%84%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="一、问题1"><a href="#一、问题1" class="headerlink" title="一、问题1"></a>一、问题1</h1><p>Q: hexo server后访问浏览器 <a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://0.0.0.0:4000/</a> 出现 <code>cannot get</code></p>
<a id="more"></a>
<p>A: 依次执行如下命令就行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-ejs --save</span><br><span class="line">npm install hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-renderer-marked --save</span><br><span class="line"></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<h1 id="二、问题2"><a href="#二、问题2" class="headerlink" title="二、问题2"></a>二、问题2</h1><p>Q: npm install时报错：</p>
<p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2_%E9%97%AE%E9%A2%982.png" alt="Alt text"></p>
<p>A: 执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install</span><br></pre></td></tr></table></figure>
<h1 id="三、问题3"><a href="#三、问题3" class="headerlink" title="三、问题3"></a>三、问题3</h1><p>Q: 社会化评论多说duoshuo_shortname在哪看？</p>
<p>A: 到多说官网创建站点(站点为xxx.github.io)，之后就会得到short_name。</p>
<h1 id="四、问题4"><a href="#四、问题4" class="headerlink" title="四、问题4"></a>四、问题4</h1><p>Q: 如何设置分类和标签？</p>
<p>A: 在文章的开始位置进行如下设置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 使用Hexo搭建个人博客过程的各种问题</span><br><span class="line">categories:</span><br><span class="line">  - Hexo</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">  - 问题</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h1 id="五、问题5"><a href="#五、问题5" class="headerlink" title="五、问题5"></a>五、问题5</h1><p>Q: 首页的文章目录，怎么设置显示部分摘要和read more?</p>
<p>A: 在文章中加一行如下的标记，在这个标记之前的就是摘要</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>
<h1 id="六、问题6"><a href="#六、问题6" class="headerlink" title="六、问题6"></a>六、问题6</h1><p>Q: 运行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>命令后报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure></p>
<p>A: 执行以下命令，安装hexo-deployer-git自动部署发布工具：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown语言常用语法]]></title>
      <url>http://sherlockshi.github.io/2016/04/28/10_Markdown/Markdown%E8%AF%AD%E8%A8%80%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文主要记录Markdown语言的常用语法，做为备忘，本文内容主要参考：<br><a href="https://segmentfault.com/markdown" target="_blank" rel="external">https://segmentfault.com/markdown</a></p>
</blockquote>
<a id="more"></a>
<h1 id="一、代码"><a href="#一、代码" class="headerlink" title="一、代码"></a>一、代码</h1><h2 id="1-行内代码"><a href="#1-行内代码" class="headerlink" title="1. 行内代码"></a>1. 行内代码</h2><p><strong>用法</strong></p>
<p>把代码用反引号 ` (键盘上Esc键下面的键)包起，如：  </p>
<pre><code>`toString()`方法
</code></pre><p><strong>效果</strong></p>
<p><code>toString()</code>方法  </p>
<h2 id="2-代码块"><a href="#2-代码块" class="headerlink" title="2. 代码块"></a>2. 代码块</h2><p><strong>用法1</strong></p>
<p>用 3个`(Esc下面的键)包裹一段代码，并指定一种语言，如： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```java  </span><br><span class="line">public class BookViewHolder extends RecyclerView.ViewHolder &#123;  </span><br><span class="line">    public TextView tvBook;  </span><br><span class="line">&#125;  </span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p><strong>用法2</strong></p>
<p>也可以在代码块的每一行使用 4 空格缩进，实现相同的的效果，此处不再举例，可自己尝试。</p>
<p><strong>效果</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> TextView tvBook;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>支持的语言：<code>actionscript</code>, <code>apache</code>, <code>bash</code>, <code>clojure</code>, <code>cmake</code>, <code>coffeescript</code>, <code>cpp</code>, <code>cs</code>, <code>css</code>, <code>d</code>, <code>delphi</code>, <code>django</code>, <code>erlang</code>, <code>go</code>, <code>haskell</code>, <code>html</code>, <code>http</code>, <code>ini</code>, <code>java</code>, <code>javascript</code>, <code>json</code>, <code>lisp</code>, <code>lua</code>, <code>markdown</code>, <code>matlab</code>, <code>nginx</code>, <code>objectivec</code>, <code>perl</code>, <code>php</code>, <code>python</code>, <code>r</code>, <code>ruby</code>, <code>scala</code>, <code>smalltalk</code>, <code>sql</code>, <code>tex</code>, <code>vbscript</code>, <code>xml</code></p>
<h1 id="二、标题"><a href="#二、标题" class="headerlink" title="二、标题"></a>二、标题</h1><p><strong>用法</strong></p>
<p>使用1-6个<code>#</code>号连接内容，如：  </p>
<pre><code># 一级标题
## 二级标题
### 三级标题
</code></pre><p><strong>效果</strong></p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h1 id="三、粗体与斜体"><a href="#三、粗体与斜体" class="headerlink" title="三、粗体与斜体"></a>三、粗体与斜体</h1><p><strong>用法</strong></p>
<p>正常字前后不加<code>*</code>号，<code>1个*</code>为斜体，<code>2个*</code>为粗体，<code>3个*</code>为粗斜体，如：  </p>
<pre><code>这是正常的字
*这是斜体的字*
**这是加粗的字**
***这是粗斜体的字***
</code></pre><p><strong>效果</strong></p>
<p>这是正常的字<br><em>这是斜体的字</em><br><strong>这是加粗的字</strong><br><strong><em>这是粗斜体的字</em></strong></p>
<h1 id="四、链接"><a href="#四、链接" class="headerlink" title="四、链接"></a>四、链接</h1><h2 id="1-常用链接方法"><a href="#1-常用链接方法" class="headerlink" title="1. 常用链接方法"></a>1. 常用链接方法</h2><p><strong>用法</strong></p>
<pre><code>文字链接： [百度](http://www.baidu.com)  
网址链接： &lt;http://www.baidu.com&gt;
</code></pre><p><strong>效果</strong></p>
<p>文字链接： <a href="http://www.baidu.com" target="_blank" rel="external">百度</a><br>网址链接： <a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a></p>
<h2 id="2-高级链接技巧"><a href="#2-高级链接技巧" class="headerlink" title="2. 高级链接技巧"></a>2. 高级链接技巧</h2><p><strong>用法</strong></p>
<pre><code>这个链接用 1 作为网址变量 [Google][1].
这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].

然后在文档的结尾为变量赋值（网址）:
  [1]: http://www.google.com/
  [yahoo]: http://www.yahoo.com/
</code></pre><p><strong>效果</strong></p>
<p>这个链接用 1 作为网址变量 <a href="http://www.google.com/" target="_blank" rel="external">Google</a>.<br>这个链接用 yahoo 作为网址变量 <a href="http://www.yahoo.com/" target="_blank" rel="external">Yahoo!</a>.  </p>
<h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><h2 id="1-用法1"><a href="#1-用法1" class="headerlink" title="1. 用法1"></a>1. 用法1</h2><p>跟链接的方法区别在于前面加了个感叹号<code>!</code>，这样是不是觉得好记多了呢？</p>
<p><strong>用法</strong>  </p>
<pre><code>![图片名称](http://图片网址)，如：
![奇犽](http://7xlpfl.com1.z0.glb.clouddn.com/16-10-1/61240869.jpg)
</code></pre><p><strong>效果</strong></p>
<p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-1/61240869.jpg" alt="奇犽"></p>
<h2 id="2-用法2"><a href="#2-用法2" class="headerlink" title="2. 用法2"></a>2. 用法2</h2><p>当然，你也可以像网址那样对图片网址使用变量：  </p>
<pre><code>这个链接用 1 作为网址变量 [Google][1].  
然后在文档的结尾位变量赋值（网址）

 [1]: http://www.google.com/logo.png
</code></pre><h2 id="3-用法3"><a href="#3-用法3" class="headerlink" title="3. 用法3"></a>3. 用法3</h2><p>也可以使用 HTML 的图片语法来自定义图片的宽高大小：</p>
<pre><code>&lt;img src=&quot;htt://example.com/sample.png&quot; width=&quot;250&quot; height=&quot;250&quot; alt=&quot;奇犽&quot;&gt;
</code></pre><h2 id="4-用法4"><a href="#4-用法4" class="headerlink" title="4. 用法4"></a>4. 用法4</h2><p>如果使用七牛进行存储的图片，还可以在URL后面添加参数，控制加载的图片大小：</p>
<table>
<thead>
<tr>
<th>?imageView2/2/w/100/</th>
<th>?imageView2/2/w/150/</th>
<th>?imageView2/2/w/200/</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-1/61240869.jpg?imageView2/2/w/100/interlace/1/" alt="奇犽"></td>
<td><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-1/61240869.jpg?imageView2/2/w/150/interlace/1/" alt="奇犽"></td>
<td><img src="http://7xlpfl.com1.z0.glb.clouddn.com/16-10-1/61240869.jpg?imageView2/2/w/200/interlace/1/" alt="奇犽"></td>
</tr>
</tbody>
</table>
<p>具体参数可参考<a href="http://o9gnz92z5.bkt.clouddn.com/code/v6/api/kodo-api/image/imageview2.html" target="_blank" rel="external">七牛图片处理接口文档</a></p>
<h1 id="六、列表"><a href="#六、列表" class="headerlink" title="六、列表"></a>六、列表</h1><h2 id="1-普通无序列表"><a href="#1-普通无序列表" class="headerlink" title="1. 普通无序列表"></a>1. 普通无序列表</h2><p><strong>用法</strong></p>
<pre><code>- 列表文本前使用 [减号+空格]
+ 列表文本前使用 [加号+空格]
* 列表文本前使用 [星号+空格]
</code></pre><p><strong>效果</strong></p>
<ul>
<li>列表文本前使用 [减号+空格]</li>
</ul>
<ul>
<li>列表文本前使用 [加号+空格]</li>
</ul>
<ul>
<li>列表文本前使用 [星号+空格]</li>
</ul>
<h2 id="2-普通有序列表"><a href="#2-普通有序列表" class="headerlink" title="2. 普通有序列表"></a>2. 普通有序列表</h2><p><strong>用法</strong></p>
<pre><code>1. 列表前使用 [数字+空格]
2. 我们会自动帮你添加数字
7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3
</code></pre><p><strong>效果</strong></p>
<ol>
<li>列表前使用 [数字+空格]</li>
<li>我们会自动帮你添加数字</li>
<li>不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</li>
</ol>
<h2 id="3-列表嵌套"><a href="#3-列表嵌套" class="headerlink" title="3. 列表嵌套"></a>3. 列表嵌套</h2><p><strong>用法</strong></p>
<pre><code>1. 列出所有元素：
    - 无序列表元素 A
        1. 元素 A 的有序子列表
    - 前面加四个空格
2. 列表里的多段换行：
    前面必须加四个空格，
    这样换行，整体的格式不会乱
3. 列表里引用：

    &gt; 前面空一行
    &gt; 仍然需要在 &gt;  前面加四个空格

4. 列表里代码段：
</code></pre><p><strong>效果</strong></p>
<ol>
<li>列出所有元素：<ul>
<li>无序列表元素 A<ol>
<li>元素 A 的有序子列表</li>
</ol>
</li>
<li>前面加四个空格</li>
</ul>
</li>
<li>列表里的多段换行：<br> 前面必须加四个空格，<br> 这样换行，整体的格式不会乱  </li>
<li><p>列表里引用：</p>
<blockquote>
<p>前面空一行<br>仍然需要在 &gt;  前面加四个空格</p>
</blockquote>
</li>
<li><p>列表里代码段：<br>待补充。</p>
</li>
</ol>
<h1 id="七、引用"><a href="#七、引用" class="headerlink" title="七、引用"></a>七、引用</h1><h2 id="1-普通引用"><a href="#1-普通引用" class="headerlink" title="1. 普通引用"></a>1. 普通引用</h2><p><strong>用法</strong></p>
<pre><code>&gt; 引用文本前使用 [大于号+空格]  
&gt; 折行可以不加，新起一行都要加上哦
</code></pre><p><strong>效果</strong></p>
<blockquote>
<p>引用文本前使用 [大于号+空格]<br>折行可以不加，新起一行都要加上哦</p>
</blockquote>
<h2 id="2-引用里嵌套引用"><a href="#2-引用里嵌套引用" class="headerlink" title="2. 引用里嵌套引用"></a>2. 引用里嵌套引用</h2><p><strong>用法</strong></p>
<pre><code>&gt; 最外层引用
&gt; &gt; 多一个 &gt; 嵌套一层引用
&gt; &gt; &gt; 可以嵌套很多层
</code></pre><p><strong>效果</strong></p>
<blockquote>
<p>最外层引用</p>
<blockquote>
<p>多一个 &gt; 嵌套一层引用</p>
<blockquote>
<p>可以嵌套很多层</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="3-引用里嵌套列表"><a href="#3-引用里嵌套列表" class="headerlink" title="3. 引用里嵌套列表"></a>3. 引用里嵌套列表</h2><p><strong>用法</strong></p>
<pre><code>&gt; - 这是引用里嵌套的一个列表
&gt; - 还可以有子列表
&gt;     * 子列表需要从 - 之后延后四个空格开始
</code></pre><p><strong>效果</strong></p>
<blockquote>
<ul>
<li>这是引用里嵌套的一个列表</li>
<li>还可以有子列表<ul>
<li>子列表需要从 - 之后延后四个空格开始</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="4-引用里嵌套代码块"><a href="#4-引用里嵌套代码块" class="headerlink" title="4. 引用里嵌套代码块"></a>4. 引用里嵌套代码块</h2><p><strong>用法</strong></p>
<pre><code>&gt;     同样的，在前面加四个空格形成代码块
</code></pre><p><strong>效果</strong></p>
<blockquote>
<pre><code>同样的，在前面加四个空格形成代码块
</code></pre></blockquote>
<h1 id="八、换行"><a href="#八、换行" class="headerlink" title="八、换行"></a>八、换行</h1><p>如果另起一行，只需在当前行结尾加 2 个空格</p>
<pre><code>在当前行的结尾加 2 个空格  
这行就会新起一行
</code></pre><p>如果是要起一个新段落，只需要空出一行即可。</p>
<h1 id="九、分隔符"><a href="#九、分隔符" class="headerlink" title="九、分隔符"></a>九、分隔符</h1><p>如果你有写分割线的习惯，可以新起一行输入三个减号-。当前后都有段落时，请空出一行：</p>
<pre><code>前面的段落
---
后面的段落
</code></pre><h1 id="十、符号转义"><a href="#十、符号转义" class="headerlink" title="十、符号转义"></a>十、符号转义</h1><p>如果你的描述中需要用到 markdown 的符号，比如 _ # * 等，但又不想它被转义，这时候可以在这些符号前加反斜杠<code>\</code>进行避免。</p>
<p><strong>用法</strong></p>
<pre><code>\_不想这里的文本变斜体\_
\*\*不想这里的文本被加粗\*\*
</code></pre><p><strong>效果</strong></p>
<p>_不想这里的文本变斜体_<br>**不想这里的文本被加粗**</p>
<h1 id="十一、表格"><a href="#十一、表格" class="headerlink" title="十一、表格"></a>十一、表格</h1><p><strong>用法</strong></p>
<pre><code>abc | def | kdka
--- | --- | ---
ld  | dk  | dk
ld  | dk  | dk
</code></pre><p><strong>效果</strong></p>
<table>
<thead>
<tr>
<th>abc</th>
<th>def</th>
<th>kdka</th>
</tr>
</thead>
<tbody>
<tr>
<td>ld</td>
<td>dk</td>
<td>dk</td>
</tr>
<tr>
<td>ld</td>
<td>dk</td>
<td>dk</td>
</tr>
</tbody>
</table>
<h1 id="十二、复杂表格"><a href="#十二、复杂表格" class="headerlink" title="十二、复杂表格"></a>十二、复杂表格</h1><h2 id="1-在Excel中填写表格"><a href="#1-在Excel中填写表格" class="headerlink" title="1. 在Excel中填写表格"></a>1. 在Excel中填写表格</h2><p>在 Excel 中正常填写你的表格内容，之后在标题行下插入一行，要<code>居中</code>的填入<code>:-:</code>，要<code>右对齐</code>的填<code>-:</code>，<code>其它</code>全部填上<code>-</code>。</p>
<p><img src="http://7xlpfl.com1.z0.glb.clouddn.com/%E5%9C%A8Excel%E4%B8%AD%E5%A1%AB%E5%86%99%E8%A1%A8%E6%A0%BC.png" alt=""></p>
<h2 id="2-生成表格"><a href="#2-生成表格" class="headerlink" title="2. 生成表格"></a>2. 生成表格</h2><h3 id="复制、粘贴表格："><a href="#复制、粘贴表格：" class="headerlink" title="复制、粘贴表格："></a>复制、粘贴表格：</h3><p>选中表格，复制，然后粘贴到 Markdown 编辑器中。</p>
<h3 id="用-替换tab："><a href="#用-替换tab：" class="headerlink" title="用|替换tab："></a>用|替换tab：</h3><p>复制出来的 Excel 默认以<code>tab</code>作为单元格分隔符，而 Markdown 则以|为分隔符。顺理成章，当我们使用 <code>|</code> 对原<code>tab</code>分隔符进行替换后，即可生成 Markdown 化的表格：</p>
<pre><code>-|左对齐|居中对齐|右对齐
:-:|-|:-:|-:
1|Left|Center|Right
2|Left|Center|Right
3|Left|Center|Right
</code></pre><p><strong>效果</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th>左对齐</th>
<th style="text-align:center">居中对齐</th>
<th style="text-align:right">右对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td>Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td>Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td>Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
</tbody>
</table>
<h2 id="3-在线生成Markdown表格"><a href="#3-在线生成Markdown表格" class="headerlink" title="3. 在线生成Markdown表格"></a>3. 在线生成Markdown表格</h2><p><a href="http://www.tablesgenerator.com/markdown_tables" target="_blank" rel="external">http://www.tablesgenerator.com/markdown_tables</a></p>
<h2 id="4-复杂表格生成办法"><a href="#4-复杂表格生成办法" class="headerlink" title="4. 复杂表格生成办法"></a>4. 复杂表格生成办法</h2><blockquote>
<p>我们仍然建议使用其他的方式替代复杂的表格，甚至尽量少用表格。</p>
</blockquote>
<p>在你本地或者远程的HTML编辑器上生成复杂表格，然后粘贴表格的HTML代码到编辑区即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RecyclerView学习笔记1_入门]]></title>
      <url>http://sherlockshi.github.io/2016/04/19/15_Android/1510_View/RecyclerView/RecyclerView%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01_%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h1><p>RecyclerView是谷歌V7包下新增的控件,用来替代ListView、GridView的使用.</p>
<a id="more"></a>
<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ul>
<li><p>LayoutManager：布局管理器,目前SDK中提供了三种自带的LayoutManager:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LinearLayoutManager-----类似ListView</span><br><span class="line">GridLayoutManager-----类似GridView</span><br><span class="line">StaggeredGridLayoutManager-----瀑布流</span><br></pre></td></tr></table></figure>
</li>
<li><p>ItemDecoration：Item间的分割线样式</p>
</li>
<li><p>ItemAnimator：Item增加、删除的动画</p>
</li>
<li><p>点击、长按事件：比较麻烦</p>
</li>
</ul>
<h1 id="二、开发环境"><a href="#二、开发环境" class="headerlink" title="二、开发环境"></a>二、开发环境</h1><ul>
<li>IDE: Android Studio 2.0 Beta 6</li>
<li>SDK: Android 23</li>
</ul>
<h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><h2 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a>1. 配置</h2><blockquote>
<p>app/build.gradle</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    compile <span class="string">'com.android.support:recyclerview-v7:23.1.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-主布局文件"><a href="#2-主布局文件" class="headerlink" title="2. 主布局文件"></a>2. 主布局文件</h2><blockquote>
<p>activity_main.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span><br><span class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span><br><span class="line">    <span class="attr">tools:context</span>=<span class="string">"com.sh.recyclerviewstudy1.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rv_book"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.RecyclerView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-子布局文件"><a href="#3-子布局文件" class="headerlink" title="3. 子布局文件"></a>3. 子布局文件</h2><blockquote>
<p>rv_item_book.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:padding</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_book"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:textSize</span>=<span class="string">"16sp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-ViewHolder文件"><a href="#4-ViewHolder文件" class="headerlink" title="4. ViewHolder文件"></a>4. ViewHolder文件</h2><blockquote>
<p>BookViewHolder.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TextView tvBook;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookViewHolder</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(view);</span><br><span class="line">        tvBook = (TextView) view.findViewById(R.id.tv_book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-适配器"><a href="#5-适配器" class="headerlink" title="5. 适配器"></a>5. 适配器</h2><blockquote>
<p>BookRecyclerViewAdapter.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookRecyclerViewAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">BookViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LayoutInflater mLayoutInflater;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> String[] mBooks;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookRecyclerViewAdapter</span><span class="params">(Context context, String[] mBooks)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mBooks = mBooks;</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        mLayoutInflater = LayoutInflater.from(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个View</span></span><br><span class="line">        View view = mLayoutInflater.inflate(R.layout.rv_item_book, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 创建一个ViewHolder</span></span><br><span class="line">        BookViewHolder bookViewHolder = <span class="keyword">new</span> BookViewHolder(view);</span><br><span class="line">        <span class="keyword">return</span> bookViewHolder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(BookViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 绑定数据到ViewHolder上</span></span><br><span class="line">        holder.tvBook.setText(mBooks[position]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// item数量</span></span><br><span class="line">        <span class="keyword">return</span> mBooks.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-主界面"><a href="#6-主界面" class="headerlink" title="6. 主界面"></a>6. 主界面</h2><blockquote>
<p>MainActivity.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView rvBook;</span><br><span class="line">    <span class="keyword">private</span> String[] mBooks = &#123;<span class="string">"认知盈余"</span>, <span class="string">"和喜欢的一切在一起"</span>, <span class="string">"从0到1"</span>, <span class="string">"从你的全世界路过"</span>, <span class="string">"打工旅行"</span>, <span class="string">"番茄工作法图解"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        rvBook = (RecyclerView) findViewById(R.id.rv_book);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1\. 这里用线性显示,类似于ListView</span></span><br><span class="line">        rvBook.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2\. 这里用线性宫格显示,类似于GridView</span></span><br><span class="line"><span class="comment">//        rvBook.setLayoutManager(new GridLayoutManager(this, 2));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3\. 这里用线性宫格显示,类似于瀑布流</span></span><br><span class="line"><span class="comment">//        rvBook.setLayoutManager(new StaggeredGridLayoutManager(2, OrientationHelper.VERTICAL));</span></span><br><span class="line"></span><br><span class="line">        rvBook.setAdapter(<span class="keyword">new</span> BookRecyclerViewAdapter(MainActivity.<span class="keyword">this</span>, mBooks));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>RecyclerView的另一个特点是标准化了 ViewHolder，编写Adapter面向的是ViewHolder而不再是View了，复用的逻辑被封装了，写起来更加简单。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo入门]]></title>
      <url>http://sherlockshi.github.io/2016/04/19/30_%E5%8D%9A%E5%AE%A2/3005_Hexo/Hexo%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><h2 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h2 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h2 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h2 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>http://sherlockshi.github.io/about/index.html</url>
      <content type="html"><![CDATA[<p>大家好，我是SherlockShi，欢迎来到我的个人技术博客。</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://sherlockshi.github.io/tags/index%E5%89%AF%E6%9C%AC%202.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://sherlockshi.github.io/tags/index-1.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://sherlockshi.github.io/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://sherlockshi.github.io/tags/index%E5%89%AF%E6%9C%AC.html</url>
      <content type="html"><![CDATA[<p>type: “tags”<br>noDate: true</p>
<h2 id="comments-false"><a href="#comments-false" class="headerlink" title="comments: false"></a>comments: false</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>http://sherlockshi.github.io/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
